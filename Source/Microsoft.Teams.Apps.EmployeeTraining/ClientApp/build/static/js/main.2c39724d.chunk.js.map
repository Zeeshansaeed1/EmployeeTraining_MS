{"version":3,"sources":["constants/constants.ts","components/error-page.tsx","api/axios-decorator.ts","api/culture-metadata-api.ts","helpers/cache-helper.ts","i18n.ts","models/event-operation-type.ts","models/event-status.ts","helpers/api-helper.ts","models/event-audience.ts","models/event-type.ts","api/common-api.ts","api/user-group-api.ts","api/user-events-api.ts","models/language-direction.ts","api/create-event-api.ts","helpers/event-helper.ts","providers/context-provider.tsx","components/common/event-artifacts/audience.tsx","models/event-search-type.ts","models/sort-by.ts","components/common/event-artifacts/teams-meeting.tsx","components/common/event-artifacts/live-event.tsx","components/common/event-artifacts/mandatory.tsx","components/common/event-image/event-image.tsx","components/event-operation-task-module/event-details.tsx","components/register-remove-event/register-remove-event.tsx","components/event-image/event-image.tsx","components/event-card/event-card.tsx","components/user-events-wrapper/user-events-wrapper.tsx","components/no-content-page/no-content-page.tsx","components/common/popup-menu/popup-menu-checkboxes-content.tsx","components/common/popup-menu/popup-menu-radiogroup-content.tsx","components/common/popup-menu/popup-menu-wrapper.tsx","constants/resources.ts","helpers/localized-constants.ts","models/activity-status.ts","components/filter-bar/filter-bar.tsx","components/tab-menu/tab-menu.tsx","components/toast-notification/toast-notification.tsx","api/LnD-team-api.ts","helpers/mobile-filter-helper.ts","components/discover-events/discover-events.tsx","components/my-events/my-events.tsx","components/common/accordion-menu/accordion-menu-checkboxes-content.tsx","components/common/accordion-menu/accordion-menu-radiogroup-content.tsx","components/common/accordion-menu/accordion-menu-wrapper.tsx","components/mobile-filter-bar/mobile-filter-bar.tsx","components/manage-events/manage-events-menu.tsx","api/manage-events-api.ts","components/manage-events/manage-events.tsx","helpers/dark-customizations.ts","helpers/date-picker-styles.ts","helpers/people-picker-styles.ts","helpers/default-customizations.ts","components/common/date-picker/datepicker.tsx","components/common/time-picker/timepicker.tsx","components/common/color-picker/color-picker.tsx","components/create-event/create-event-step1.tsx","components/common/user-search-dropdown/dropdown-search.tsx","components/create-event/create-event-step2.tsx","components/create-event/create-event-step3.tsx","components/common/event-details/event-details.tsx","components/create-event/create-event-wrapper.tsx","api/manage-categories-api.ts","components/manage-categories/list-categories.tsx","components/manage-categories/manage-categories-operation-footer.tsx","components/manage-categories/add-update-category.tsx","components/manage-categories/delete-category.tsx","components/manage-categories/manage-categories.tsx","components/manage-events/close-cancel-event.tsx","components/manage-events/delete-draft.tsx","components/signin/signin.tsx","api/authentication-metadata-api.ts","components/signin/signin-start.tsx","components/signin/signin-end.tsx","router/router.tsx","app.tsx","index.tsx"],"names":["CategoryOperations","ResponseStatus","ErrorPage","props","code","token","search","window","location","params","URLSearchParams","get","state","resourceStrings","a","message","this","errorMessage","unauthorizedAccess","className","gap","hAlign","vAlign","Item","style","position","icon","grow","column","weight","error","content","React","axiosJWTDecoratorInstance","authorizationHeaderKey","acceptLanguageHeaderKey","url","data","config","setupAuthorizationHeader","axios","post","Promise","resolve","handleError","delete","put","patch","needAuthorizationHeader","headers","hasOwnProperty","response","microsoftTeams","reject","authTokenRequest","successCallback","defaults","i18n","language","failureCallback","console","href","resources","getAuthToken","Constants","body","theme","default","light","dark","contrast","categoryNameMaxLength","categoryDescriptionMaxLength","lazyLoadEventsCount","maxWidthForMobileView","apiBaseURL","origin","getDefaultCultureAsync","getSupportedCulturesAsync","getDataFromCache","cacheName","supportedCultureCache","nextCleanup","Date","getTime","localStorage","getItem","JSON","parse","removeItem","e","setDataToCache","key","value","setItem","stringify","defaultLocale","context","supportedCulturesCache","defaultCultureCache","includes","locale","split","changeLanguage","then","result","supportedCultures","use","Backend","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","react","useSuspense","EventOperationType","EventStatus","EventAudience","EventType","getAPIRequestConfigParams","baseAxios","getEventAsync","eventId","teamId","searchUsersAndGroups","searchText","encodeURIComponent","getGroupMembers","groupId","getUserProfiles","userIds","baseURL","getEventsAsync","searchString","pageCount","eventSearchType","createdByFilter","categoryFilter","sortByFilter","sortBy","registerToEventAsync","removeEventAsync","LanguageDirection","uploadEventImage","formData","saveEventAsDraft","event","updateEventAsDraft","createNewEvent","updateEvent","getEventCategoriesAsync","searchEventAsync","eventName","validateSelectedUsers","selectedUsersAndGroups","users","mandatoryUsers","Array","optionalUsers","groups","filteredUsers","i","length","userOrGroup","isGroup","id","status","OK","members","map","member","isMandatory","push","Set","filteredOptionalUsers","j","find","mandatoryUserId","filteredOptionalUsersInGroup","k","filteredMandatoryUsersInGroup","l","optionalUser","m","mandatoryUser","createEvent","stepEventState","eventDetails","startDate","moment","startOf","add","startTime","getHours","getMinutes","utc","toDate","endDate","endTime","selectedUserOrGroupListJSON","selectedUserGroups","updateEventDetails","saveEventAsDraftAsync","isDraft","formatEventDayAndTimeToShort","eventDay","local","format","eventStartTime","eventEndTime","withContext","WrappedComponent","teamsContext","dir","Ltr","setState","Rtl","Component","EventSearchType","SortBy","withTranslation","localize","t","circular","title","audienceType","Private","start","main","size","isImageLoaded","setImageLoaded","isErrorLoadingImage","setImageError","onImageNotLoaded","src","imageSrc","onLoad","onError","onAbort","fill","align","color","getArtifacts","artifactElements","isMandatoryForLoggedInUser","type","Teams","LiveEvent","audience","Public","renderOperationButtonText","eventOperationType","CloseRegistration","CancelEvent","Register","Remove","isLoadingEventDetails","isFailedToGetEventDetails","Fabric","isMobileView","truncated","categoryName","space","renderHeader","photo","selectedColor","backgroundColor","name","marginTop","Icon","iconName","eventType","venue","InPerson","vertical","styles","height","marginRight","renderEventVenue","design","description","meetingLink","target","rel","renderAttendeeURL","undefined","maximumNumberOfParticipants","registeredAttendeesCount","eventCreatedByName","renderEventCreatorInfo","None","isOperationFailed","primary","loading","isOperationInProgress","disabled","onClick","onPerformOperation","renderFooter","renderEventDetails","RegisterRemoveEvent","getEventDetailsAsync","queryParam","Active","isLoggedInUserRegistered","isRegistrationClosed","canLoggedInUserRegister","isLoading","getUserProfileAsync","createdBy","isErrorGettingEventDetails","userId","user","userInfo","eventCreatedBy","displayName","onRegisterRemoveEvent","isFailedToRegisterOrRemove","submitTask","isSuccess","shrink","footerElements","UserEvents","Container","fluid","pageStart","initialLoad","loader","useWindow","loadMore","loadMoreEvents","hasMore","hasMoreEvents","events","index","Col","xl","lg","sm","md","Row","data-testid","renderEvents","NoContent","useTranslation","checkboxes","filteredCheckboxes","setFilteredCheckboxes","searchedString","setSearchString","disableClear","setdisableClear","checkBoxClicked","setcheckBoxClicked","setFilterCheckboxes","onCheckboxValueChange","checked","checkCount","checkboxList","checkbox","isChecked","trim","filteredItems","filter","item","toLowerCase","onCheckboxStateChange","filterItems","itemsToRender","slice","showSearchBar","iconPosition","placeholder","onChange","text","onSearchChange","selectedCount","deSelectAll","toString","label","checkboxLabel","defaultCheckedValue","selectedValue","items","radioGroupItems","onCheckedValueChange","onRadiogroupStateChange","isOpen","popup","onOpenChange","onPopupOpenChange","open","trigger","onFilterClick","trapFocus","radioGroup","selectedSortBy","Resources","eventNameMaxLength","eventDescriptionMaxLength","eventVenueMaxLength","userEventsMobileFilteredCategoriesLocalStorageKey","userEventsMobileFilteredUsersLocalStorageKey","userEventsMobileSortByFilterLocalStorageKey","validUrlRegExp","colorCells","Recent","Popularity","ActivityStatus","getLocalizedSortBy","FilterBar","isFilterStateChanged","resize","innerWidth","screenWidth","onCategoryStateChange","categoryValues","selectedCategories","categoryList","categorySelectedCount","onCreatedByStateChange","createdByValues","selectedUsers","createdByList","createdBySelectedCount","onSortByStateChange","onCloseIconClick","onFilterBarCloseClick","onFilterChange","isFilterItemOpen","categories","category","filteredCategories","initializeIcons","addEventListener","bind","removeEventListener","nextProps","isReset","categoryId","aadObjectId","isVisible","TabMenu","tabItems","defaultActiveIndex","defaultTabIndex","activeIndex","activeTabIndex","onActiveIndexChange","tabEventDetails","onTabIndexChange","ToastNotification","onClose","isShowNotification","notification","Toast","Success","autohide","delay","show","Body","baseAxiosUrl","getAllLnDTeamMembersAsync","clearMobileFilterLocalStorage","DiscoverEvents","timeout","mandatoryEventsCount","allEventsCount","screenResize","loadEventCategories","categoriesInFilter","loadAllLnDTeamMembers","lnDTeamMembersInFilter","pageNumber","MandatoryEventsForUser","AllPublicPrivateEventsForUser","loadEvents","mandatoryEvents","updatedEventResponse","findIndex","concat","setTotalEventsCount","allEvents","eventSeatchType","count","onEventClick","tasks","startTask","width","eventAtIndex","eventToUpdate","prevState","clearTimeout","isLoadingEvents","isResetFilter","setTimeout","getEvents","onSearchEvents","keyCode","onSearchTextChange","onFilterBarToggle","isFilterOpen","onMobileFilterButtonClick","onFilterBarClose","join","onMobileSearchBoxClose","isMobileSearchBoxOpen","userEventsContainerKey","finally","formatEventsCount","renderTabMenuItems","renderFilterButtonIcon","renderDesktopView","inverted","input","minWidth","maxWidth","onKeyUp","renderMobileView","iconOnly","all","results","MyEvents","registeredEventsCount","completedEventsCount","RegisteredEventsForUser","CompletedEventsForUser","registeredEvents","completedEvents","updatedRegisteredEvents","reduce","accumulator","setOpen","onAccordionOpenChange","onFilterOpenChange","MobileFilterBar","sortByList","loadFilterItems","eventCategories","lndTeamMembers","indexOf","sortByValue","sortByItem","sharedBy","updatedList","tag","onCategoriesFilterOpenStateChange","isCategoriesFilterOpen","isCreatedByFilterOpen","isSortByFilterOpen","onCreatedByFilterOpenStateChange","onSortByFilterOpenStateChange","onClearFilter","onApplyFilter","selectedCategoryIds","selectedUserIds","getActiveEventsMenu","outline","onEditEvent","onExportDetails","onSendReminder","kind","onCancelEvent","getDraftEventsMenu","onDeleteDraftEvent","getCompletedEventsMenu","menu","Draft","unshift","onCloseRegistration","getMenuItems","closeEventRegistrationsAsync","cancelEventAsync","deleteDraftEventAsync","exportEventDetailsToCSV","sendReminder","ManageEvents","draftEventsCount","activeEventsCount","eventsScrollAreaRef","componentWillReceiveProps","ActiveEventsForTeam","activeEvents","DraftEventsForTeam","draftEvents","CompletedEventsForTeam","infiniteScrollKey","formatEventDateAndTime","eventDayMonthYear","onTabMenuIndexChange","isCreateEvent","Error","updatedActiveEvents","updatedDraftEvents","URL","createObjectURL","Blob","downloadLink","document","createElement","setAttribute","click","getTabMenuItems","onEventCreated","err","getContext","onManageCategoriesClick","onCreateEventsClick","getEventsTableHeader","getEventType","button","onMenuItemClick","isInitialLoadComplete","onScreenSizeChange","Cancelled","rows","eventVenue","eventDateAndTime","truncateContent","header","DarkDefaultPalette","themeDarker","themeDark","themeDarkAlt","themePrimary","themeSecondary","themeTertiary","themeLight","themeLighter","themeLighterAlt","black","neutralDark","neutralPrimary","neutralPrimaryAlt","neutralSecondary","neutralSecondaryAlt","neutralTertiary","neutralTertiaryAlt","neutralQuaternary","neutralQuaternaryAlt","neutralLight","neutralLighter","neutralLighterAlt","white","redDark","DarkTheme","createTheme","palette","semanticColors","buttonText","buttonTextPressed","buttonTextHovered","disabledBackground","inputBackgroundChecked","menuBackground","menuItemBackgroundHovered","menuItemBackgroundPressed","menuDivider","menuIcon","menuHeader","menuItemText","menuItemTextHovered","isInverted","DarkCustomizations","settings","scopedSettings","Card","root","background","DatePicker","TextHoverStyle","callout","bodyBackground","selectors","display","listItemBackgroundChecked","disabledBodyText","DetailsList","headerWrapper","borderColor","ActionButton","rootDisabled","rootHovered","rootPressed","DetailsRow","Modal","Overlay","blackTranslucent40","VerticalDivider","divider","wrapper","Backgroundcolor","green","DocumentCard","border","borderRight","DocumentCardPreview","borderBottom","Panel","closeButton","PeoplePickerItem","selected","removeButton","subComponentStyles","persona","primaryText","PersonaCoin","initials","showUnknownPersonaCoin","Separator","SpinButton","inputTextSelected","addVariants","DefaultCustomizations","StartDate","datePickerTheme","bgcolor","useState","selectedDate","setDate","minDate","setMinDate","Customizer","showMonthPickerAsOverlay","isMonthPickerVisible","onSelectDate","date","startCycle","set","hour","minute","second","onDateSelect","disableSelectionForPastDate","TimePicker","hours","padStart","minutes","setText","setHour","setMinute","minHours","setMinHour","minMinutes","setMinMinute","hoursItems","minutesItems","useEffect","onHourChange","onAdd","onMinuteChange","popupContent","getA11ySelectionMessage","onPickerClose","parseInt","isDisabled","defaultProps","ColorPicker","selectedId","setSelectedId","divKey","setDivKey","selectedIdFound","x","SwatchColorPicker","columnCount","cellShape","onColorChanged","onColorChange","CreateEventStep1","inputReference","timeZone","update","checkIfSaveAsDraftAllowed","eventValidationStatus","isPhotoValid","isColorValid","isNameValid","isDescriptionValid","isEventTypeValid","isEventCategoryValid","isVenueValid","isMaxNoofPartipantsValid","isMeetingLinkValid","isMaxNoofParticipantsValid","isEventNameExisting","checkIfNextAllowed","isTimeValid","isEventNameAlreadyExists","eventPageState","isEdit","checkEventName","match","checkEventAlreadyStarted","isValidatingStep1","nextBtnClick","modifiedState","selectedCategory","selectedEvent","selectedEventType","navigateToPage","setStartDate","setEndDate","getNameError","getMeetingLinkError","getDescriptionError","getVenueError","getEventTypeError","getEventCategoryError","getPhotoError","isPhotoDimentionsValid","getMaximumNoofParticipantsError","onEventNameChange","onEventDescriptionChange","eventDescription","onEventVenueChange","onLiveEventUrlChange","eventUrl","onMaxNoOfParticipantsChange","eventMaxNoofParticipants","onStartTimeChange","min","setHours","onEndTimeChange","handleUploadClick","current","inputKey","uploadImage","imageUploadLoader","handleChange","fileUploaded","files","isValid","img","Image","onload","FormData","append","isEventAlreadyExists","some","eventTypes","tz","guess","projectStartDate","getDate","onEventTypeChange","categoriesList","ref","maxLength","secondary","DropdownSearch","initialReults","searchResult","setSearchResult","setLoading","setKey","setselectedValue","searchUsingAPI","searchQuery","array","email","onTypeSelection","onItemSelect","loadingMessage","onSearchQueryChange","initiateSearch","noResultsMessage","noResultMessage","CreateEventStep2","selectedAudience","selectedAudienceType","backBtnClick","onToggleChange","memberIndex","deleteItem","splice","renderMembers","toggle","onAudienceTypeSelection","onUserOrGroupSelection","selectedItem","selectedUserOrGroup","existingUsers","onAudienceChange","onAutoRegisterToggleChange","isAutoRegister","onMandatoryAllClocked","selectedUserGroup","audienceTypes","CreateEventStep3","getRegisteredAttendeesCount","getEventDayAndTime","isDraftLoading","isCreateLoading","EventDetails","errorGettingEventDetails","createdByName","setCreatedByName","getUserProfile","CreateEventWrapper","getEventDetailsToUpdate","selectedUsersOrGroups","displayReadonly","getAllCategories","setEventStep","currentStep","currentEventStep","renderOperation","createdOn","graphEventId","numberOfOccurrences","mandatoryAttendees","optionalAttendees","registeredAttendees","autoRegisteredAttendees","getCategoriesAsync","createCategoryAsync","updateCategoryAsync","deleteCategoriesAsync","categoryIds","ListCategories","forEach","statusMessage","getLastCategoryUpdateDateAndTime","sort","category1","category2","updatedOn","toUTCString","searchCategories","searchedCategories","onActionPerformed","categoryOperation","Edit","Delete","categoryOperationData","isSelected","onCategoryCheckedChange","manageControlsEnabilityAndSelection","onSelectAllCategoriesCheckedChange","isAllCategoriesSelected","onSearchTextChanged","renderCategoryOperationStatusIcon","showStatusIcon","timestamp","renderCategories","categoriesTableHeaderItems","searchedText","renderSearchInput","isEditEnabled","isDeleteEnabled","selectedCategoriesCount","Add","ManageCategoriesOperationFooter","backButtonContent","onBackClicked","renderError","submitButtonContent","isSubmitButtonDisabled","onSubmit","AddUpdateCategory","categoryDetails","createOrUpdateCategoryAsync","isCreatingOrUpdating","checkCategoryExists","isCategoryAlreadyExists","onCategoryAddedOrUpdated","onNameChanged","onDescriptionChanged","renderCategoryNameError","isInUse","required","DeleteCategory","deleteCategoryAsync","isDeleting","categoryIdsToDelete","onCategoryDeleted","paddingLeft","ManageCategories","setCategoryOperation","operationStatusMessage","Unknown","operationData","operation","onOperationSuccessful","onCategoryActionPerformed","CloseCancelEvent","operationType","onCloseOrCancelEvent","isFailedToCloseOrCancelEvent","DeleteDraftEvent","isUpdatingStatus","setUpdatingEventStatus","errorUpdatingEventStatus","setUpdateStatusError","deleteDraftEvent","marginLeft","margintop","bottom","SignInPage","authenticate","log","reason","getAuthenticationConsentMetadata","windowLocationOriginDomain","login_hint","loginhint","SignInSimpleStart","replace","upn","assign","SignInSimpleEnd","hashParams","hash","substr","s","v","decodeURIComponent","getHashParameters","notifyFailure","notifySuccess","AppRoute","fallback","exact","path","component","CloseOrCancelEvent","MobileFilter","App","setThemeComponent","getAppDOM","themes","teamsDark","teamsHighContrast","teams","forceUpdate","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.2c39724d.chunk.js","sourcesContent":["/*\r\n    <copyright file=\"constants.ts\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nexport default class Constants {\r\n\t//Themes\r\n\tpublic static readonly body: string = \"body\";\r\n\tpublic static readonly theme: string = \"theme\";\r\n\tpublic static readonly default: string = \"default\";\r\n\tpublic static readonly light: string = \"light\";\r\n\tpublic static readonly dark: string = \"dark\";\r\n\tpublic static readonly contrast: string = \"contrast\";\r\n\r\n\t//Constants for manage categories\r\n\tpublic static readonly categoryNameMaxLength: number = 100;\r\n\tpublic static readonly categoryDescriptionMaxLength: number = 300;\r\n\r\n\tpublic static readonly lazyLoadEventsCount: number = 50;\r\n\r\n\tpublic static readonly maxWidthForMobileView: number = 750;\r\n\r\n\t/** The base URL for API */\r\n\tpublic static readonly apiBaseURL = window.location.origin + \"/api\";\r\n}\r\n\r\n/** Indicates the operations that can be done on event categories */\r\nexport enum CategoryOperations {\r\n\tAdd,\r\n\tEdit,\r\n\tDelete,\r\n\tUnknown\r\n}\r\n\r\n/** Indicates the response status codes */\r\nexport enum ResponseStatus {\r\n\tOK = 200\r\n}","/*\r\n    <copyright file=\"error-page.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Flex, Label } from \"@fluentui/react-northstar\";\r\nimport { ErrorIcon } from '@fluentui/react-icons-northstar';\r\n\r\ninterface errorPageState {\r\n    resourceStrings: any | \"\",\r\n}\r\n\r\nexport default class ErrorPage extends React.Component<{}, errorPageState> {\r\n    code: string | null = null;\r\n    token: string | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.token = params.get(\"token\");\r\n        this.code = params.get(\"code\");\r\n        this.state = {\r\n            resourceStrings: {}\r\n        };\r\n    }\r\n\r\n    /** Called once component is mounted. */\r\n    async componentDidMount() {\r\n    }\r\n\r\n    /**\r\n     * Render error page.\r\n     * */\r\n    render() {\r\n        let message = this.state.resourceStrings.errorMessage;\r\n        if (this.code === \"401\") {\r\n            message = `${this.state.resourceStrings.unauthorizedAccess}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-div\">\r\n                <Flex gap=\"gap.small\" hAlign=\"center\" vAlign=\"center\" className=\"error-container\">\r\n                    <Flex gap=\"gap.small\" hAlign=\"center\" vAlign=\"center\">\r\n                        <Flex.Item>\r\n                            <div\r\n                                style={{\r\n                                    position: \"relative\",\r\n                                }}\r\n                            >\r\n                                <Label icon={<ErrorIcon />} />\r\n                            </div>\r\n                        </Flex.Item>\r\n\r\n                        <Flex.Item grow>\r\n                            <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                                <div>\r\n                                    <Text weight=\"bold\" error content={message} /><br />\r\n                                </div>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </Flex>\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    <copyright file=\"axios-decorator.ts\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from '../i18n';\r\n\r\nexport class AxiosJWTDecorator {\r\n    readonly authorizationHeaderKey = \"Authorization\";\r\n    readonly acceptLanguageHeaderKey = \"Accept-Language\";\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t* @param  {Object} data Request body data\r\n\t*/\r\n    public async post<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.post(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t*/\r\n    public async delete<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.delete(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t* @param  {Object} data Request body data\r\n\t*/\r\n    public async put<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.put(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Post data to API\r\n    * @param  {String} url Resource URI\r\n    * @param  {Object} data Request body data\r\n    */\r\n    public async patch<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.patch(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Get data to API\r\n\t*/\r\n    public async get<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig,\r\n        needAuthorizationHeader: boolean = true\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Get data to API\r\n\t*/\r\n    public async getCachedData<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig,\r\n        needAuthorizationHeader: boolean = true\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n                config.headers[\"Cache-Control\"] = \"max-age=1209600\"\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Handle error occurred during API call.\r\n\t* @param  {Object} error Error response object\r\n\t*/\r\n    private handleError(error: any):any {\r\n        if (error.hasOwnProperty(\"response\")) {\r\n            return error.response;\r\n        } else {\r\n            return error;\r\n        }\r\n    }\r\n\r\n\tprivate async setupAuthorizationHeader(\r\n\t\tconfig?: AxiosRequestConfig\r\n\t): Promise<AxiosRequestConfig> {\r\n\t\tmicrosoftTeams.initialize();\r\n\r\n\t\treturn new Promise<AxiosRequestConfig>((resolve, reject) => {\r\n\t\t\tconst authTokenRequest = {\r\n\t\t\t\tsuccessCallback: (token: string) => {\r\n\t\t\t\t\tif (!config) {\r\n\t\t\t\t\t\tconfig = axios.defaults;\r\n\t\t\t\t\t}\r\n                    config.headers[this.authorizationHeaderKey] = `Bearer ${token}`;\r\n                    config.headers[this.acceptLanguageHeaderKey] = i18n.language;\r\n\t\t\t\t\tresolve(config);\r\n\t\t\t\t},\r\n\t\t\t\tfailureCallback: (error: string) => {\r\n\t\t\t\t\t// When the getAuthToken function returns a \"resourceRequiresConsent\" error, \r\n\t\t\t\t\t// it means Azure AD needs the user's consent before issuing a token to the app. \r\n\t\t\t\t\t// The following code redirects the user to the \"Sign in\" page where the user can grant the consent. \r\n\t\t\t\t\t// Right now, the app redirects to the consent page for any error.\r\n\t\t\t\t\tconsole.error(\"Error from getAuthToken: \", error);\r\n\t\t\t\t\twindow.location.href = \"/signin\";\r\n\t\t\t\t},\r\n\t\t\t\tresources: []\r\n\t\t\t};\r\n\t\t\tmicrosoftTeams.authentication.getAuthToken(authTokenRequest);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst axiosJWTDecoratorInstance = new AxiosJWTDecorator();\r\nexport default axiosJWTDecoratorInstance;","// <copyright file=\"culture-metadata-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport Constants from \"../constants/constants\";\r\n\r\n/**\r\n* Get default culture from API.\r\n*/\r\nexport const getDefaultCultureAsync = async (): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/cultureMetadata`;\r\n\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* Get supported cultures from API.\r\n*/\r\nexport const getSupportedCulturesAsync = async (): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/cultureMetadata/supportedcultures`;\r\n\r\n    return await axios.get(url);\r\n}","// <copyright file=\"cache-helper.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nconst ONE_DAY = 1000 * 60 * 60 * 24;\r\n\r\n/**\r\n * Gets the data from local storage cache.\r\n * @param cacheName Name of the cache to get.\r\n */\r\nexport const getDataFromCache = (cacheName: string) => {\r\n    let supportedCultureCache = {\r\n        data: {},\r\n        nextCleanup: new Date().getTime() + ONE_DAY\r\n    }\r\n\r\n    try {\r\n        const data = localStorage.getItem(cacheName)\r\n        if (data) {\r\n            supportedCultureCache = JSON.parse(data)\r\n\r\n            // Remove cache if expired.\r\n            if (new Date().getTime() > supportedCultureCache.nextCleanup) {\r\n                localStorage.removeItem(cacheName);\r\n                return {\r\n                    data: {},\r\n                    nextCleanup: new Date().getTime() + ONE_DAY\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.error(e.message)\r\n    }\r\n\r\n    return supportedCultureCache\r\n}\r\n\r\n/**\r\n * Set the cache in local storage.\r\n * @param cacheName Name of the cache.\r\n * @param key Cache key.\r\n * @param value The value that need to stored.\r\n */\r\nexport const setDataToCache = (cacheName: string, key: string, value: any) => {\r\n    const supportedCultureCache = getDataFromCache(cacheName);\r\n    const data = supportedCultureCache.data;\r\n    data[key] = value;\r\n    try {\r\n        localStorage.setItem(cacheName, JSON.stringify(supportedCultureCache))\r\n    }\r\n    catch (e) {\r\n        console.error(e.message)\r\n        localStorage.removeItem(cacheName);\r\n    }\r\n}","// <copyright file=\"i18n.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport Backend from 'i18next-xhr-backend';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getDefaultCultureAsync, getSupportedCulturesAsync } from \"./api/culture-metadata-api\";\r\nimport { getDataFromCache, setDataToCache } from \"./helpers/cache-helper\";\r\n\r\nconst SUPPORTEDCULTURE_CACHE = \"SUPPORTEDCULTURE_CACHE\"\r\nconst SupportedCulturesKey = \"SupportedCultures\"\r\nconst DEFAULTCULTURE_CACHE = \"DEFAULTCULTURE_CACHE\"\r\nconst DefaultCultureKey = \"DefaultCulture\"\r\n\r\nlet locale = \"en\";\r\nlet defaultLocale = \"en\";\r\nmicrosoftTeams.initialize();\r\nmicrosoftTeams.getContext((context: microsoftTeams.Context) => {\r\n    // Get suported cultures and default culture from cache.\r\n    const supportedCulturesCache = getDataFromCache(SUPPORTEDCULTURE_CACHE);\r\n    const defaultCultureCache = getDataFromCache(DEFAULTCULTURE_CACHE);\r\n\r\n    // Check if cache is present.\r\n    if (supportedCulturesCache.data[SupportedCulturesKey] && defaultCultureCache.data[DefaultCultureKey]) {\r\n        if (supportedCulturesCache.data[SupportedCulturesKey].includes(context.locale.split(\"-\")[0]) || supportedCulturesCache.data[SupportedCulturesKey].includes(context.locale)) {\r\n            i18n.changeLanguage(context.locale!);\r\n        }\r\n        else {\r\n            i18n.changeLanguage(defaultCultureCache.data[DefaultCultureKey]);\r\n        }\r\n    }\r\n    else {\r\n        getSupportedCulturesAsync().then((result: any) => {\r\n            const supportedCultures = result.data;\r\n\r\n            // Set supported culture to cache.\r\n            setDataToCache(SUPPORTEDCULTURE_CACHE, SupportedCulturesKey, supportedCultures);\r\n            if (supportedCultures.includes(context.locale.split(\"-\")[0]) || supportedCultures.includes(context.locale)) {\r\n                i18n.changeLanguage(context.locale!);\r\n            }\r\n            else {\r\n                getDefaultCultureAsync().then((result: any) => {\r\n                    defaultLocale = result.data;\r\n\r\n                    // Set default culture to cache.\r\n                    setDataToCache(DEFAULTCULTURE_CACHE, DefaultCultureKey, defaultLocale);\r\n                    i18n.changeLanguage(defaultLocale);\r\n                });\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\ni18n\r\n.use(Backend)\r\n.use(initReactI18next) // passes i18n down to react-i18next\r\n.init({\r\n    lng: locale,\r\n    fallbackLng: defaultLocale,\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n    interpolation: {\r\n        escapeValue: false // react already safes from xss\r\n    },\r\n    react: {\r\n        useSuspense: true\r\n    }\r\n});\r\n\r\nexport default i18n;","// <copyright file=\"event-operation-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Indicates the event operation */\r\nexport enum EventOperationType {\r\n    /** No event operation */\r\n    None,\r\n\r\n    /** The operation in task module to close event registrations */\r\n    CloseRegistration,\r\n\r\n    /** The operation in task module to cancel an event to occur */\r\n    CancelEvent,\r\n\r\n    /** The operation in task module to register for an event */\r\n    Register,\r\n\r\n    /** The operation in task module to cancel event registration */\r\n    Remove\r\n}","// <copyright file=\"event-status.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Contains the values for event status */\r\nexport enum EventStatus {\r\n    /** Indicates that the event status is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event is in draft */\r\n    Draft,\r\n\r\n    /** Indicates that the event is active */\r\n    Active,\r\n\r\n    /** Indicates that the event has been cancelled */\r\n    Cancelled,\r\n\r\n    /** Indicates that the event has been completed */\r\n    Completed\r\n}","// <copyright file=\"api-helper.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport baseAxios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/**\r\n * Gets the API request configuration parameters\r\n * @param params The request parameters\r\n */\r\nexport const getAPIRequestConfigParams = (params: any) => {\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = params;\r\n\r\n    return config;\r\n}","// <copyright file=\"event-audience.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventAudience {\r\n    /** Indicates that the event audience is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event is public */\r\n    Public = 1,\r\n\r\n    /** Indicates that the event is private */\r\n    Private = 2,\r\n}","// <copyright file=\"event-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventType {\r\n    /** Indicates that the event type is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event occurs in physical presence */\r\n    InPerson = 1,\r\n\r\n    /** Indicates that the event is a Microsoft Teams meeting */\r\n    Teams = 2,\r\n\r\n    /** Indicates that the event is a Microsoft Teams meeting */\r\n    LiveEvent = 3,\r\n}","// <copyright file=\"common-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets event details\r\n * @param eventId The event ID of which details need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventAsync = async (eventId: string, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/Event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}","// <copyright file=\"user-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n* Search users and groups.\r\n * @param searchText defines the searched text\r\n*/\r\nexport const searchUsersAndGroups = async (searchText: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/users`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ searchText: encodeURIComponent(searchText) });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n* Get members of group.\r\n * @param groupId identifies a particular group of members\r\n*/\r\nexport const getGroupMembers = async (groupId: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/group/get-group-members`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ groupId: groupId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets the user profiles\r\n * @param userIds The user IDs of which profiles to get\r\n */\r\nexport const getUserProfiles = async (userIds: Array<string>): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/users`;\r\n    return await axios.post(url, userIds);\r\n}","// <copyright file=\"user-events-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport baseAxios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/** The base URL for API */\r\nconst baseURL = window.location.origin + \"/api\";\r\n\r\n/**\r\n * Register to an event\r\n * @param eventId The event Id in which registration need to be done\r\n */\r\nexport const getEventsAsync = async (\r\n    searchString: string, pageCount: number, eventSearchType: number, createdByFilter: string, categoryFilter: string, sortByFilter: number) => {\r\n    let url = `${baseURL}/event/UserEvents`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        searchString: encodeURIComponent(searchString),\r\n        pageCount: pageCount,\r\n        eventSearchType: eventSearchType,\r\n        createdByFilter: createdByFilter,\r\n        categoryFilter: categoryFilter,\r\n        sortBy: sortByFilter\r\n    };\r\n\r\n    return axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Registers user to an event\r\n * @param teamId The LnD team ID who created the event\r\n * @param eventId The event Id in which registration need to be done\r\n */\r\nexport const registerToEventAsync = (teamId: string, eventId: string) => {\r\n    let url = `${baseURL}/event/RegisterToEvent?teamId=${teamId}&eventId=${eventId}`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        teamId: teamId,\r\n        eventId: eventId\r\n    };\r\n\r\n    return axios.post(url, null, config);\r\n}\r\n\r\n/**\r\n * Un-register user to an event\r\n * @param teamId The LnD team ID who created the event\r\n * @param eventId The event Id in which registration need to be cancelled\r\n */\r\nexport const removeEventAsync = (teamId: string, eventId: string) => {\r\n    let url = `${baseURL}/event/UnregisterToEvent`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        teamId: teamId,\r\n        eventId: eventId\r\n    };\r\n\r\n    return axios.post(url, null, config);\r\n}","// <copyright file=\"language-direction.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum LanguageDirection {\r\n    /** Indicates that the language direction is right-to-left*/\r\n    Rtl = \"rtl\",\r\n\r\n    /** Indicates that the language direction is left-to-right*/\r\n    Ltr = \"ltr\",\r\n\r\n    /** Indicates that the language direction is auto*/\r\n    Auto = \"auto\",\r\n}","// <copyright file=\"create-event-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { IEvent } from \"../models/IEvent\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Upload image photo\r\n * @param formData Form data containing selected image\r\n * @param teamId The LnD team Id\r\n */\r\nexport const uploadEventImage = async (formData: FormData, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventfiles/upload-image`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, formData, config);\r\n}\r\n\r\n/**\r\n * Save event as draft\r\n * @param event Event details to be saved as draft\r\n * @param teamId The LnD team Id\r\n */\r\nexport const saveEventAsDraft = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/create-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, event, config);\r\n}\r\n\r\n/**\r\n * Update draft event\r\n * @param event Event details to be updated as draft\r\n * @param teamId The LnD team Id\r\n */\r\nexport const updateEventAsDraft = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/update-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, event, config);\r\n}\r\n\r\n/**\r\n * Create event and add to calendar\r\n * @param event Event details to be saved\r\n * @param teamId The LnD team Id\r\n */\r\nexport const createNewEvent = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/create-event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, event, config);\r\n}\r\n\r\n/**\r\n * Update event details\r\n * @param event Event details to be updated\r\n * @param teamId The LnD team Id\r\n */\r\nexport const updateEvent = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/update-event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, event, config);\r\n}\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getEventCategoriesAsync = async () => {\r\n    let url = `${Constants.apiBaseURL}/category/get-categories-for-event`;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n * Check for event with same name\r\n * @param eventName User entered event name\r\n */\r\nexport const searchEventAsync = async (eventName:string) => {\r\n    let url = `${Constants.apiBaseURL}/event/search-by-title`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ search: eventName });\r\n\r\n    return await axios.get(url, config);\r\n}","import { createNewEvent, saveEventAsDraft, updateEvent, updateEventAsDraft } from \"../api/create-event-api\";\r\nimport { ResponseStatus } from \"../constants/constants\";\r\nimport { ISelectedUserGroup } from \"../models/ISelectedUserGroup\";\r\nimport { getGroupMembers } from \"../api/user-group-api\";\r\nimport { ICreateEventState } from \"../models/ICreateEventState\";\r\nimport moment from 'moment';\r\n\r\nexport const validateSelectedUsers = async (selectedUsersAndGroups: Array<ISelectedUserGroup>) => {\r\n    let users = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n    let groups = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n\r\n    let filteredUsers = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n\r\n    for (let i = 0; i < selectedUsersAndGroups.length; i++) {\r\n        let userOrGroup = selectedUsersAndGroups[i];\r\n        if (userOrGroup.isGroup) {\r\n            let response = await getGroupMembers(userOrGroup.id);\r\n            if (response.status === ResponseStatus.OK) {\r\n                let members = response.data.map((member) => { return member.id });\r\n                if (userOrGroup.isMandatory) {\r\n                    groups.mandatoryUsers.push(...members);\r\n                }\r\n                else {\r\n                    groups.optionalUsers.push(...members);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (userOrGroup.isMandatory) {\r\n                users.mandatoryUsers.push(userOrGroup.id);\r\n            }\r\n            else {\r\n                users.optionalUsers.push(userOrGroup.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Remove duplicates\r\n    users.mandatoryUsers = [...new Set(users.mandatoryUsers)];\r\n    users.optionalUsers = [...new Set(users.optionalUsers)];\r\n    groups.mandatoryUsers = [...new Set(groups.mandatoryUsers)];\r\n    groups.optionalUsers = [...new Set(groups.optionalUsers)];\r\n\r\n    // Remove users from optional array if present in both mandatory and optional array (for users).\r\n    let filteredOptionalUsers = new Array<string>();\r\n    for (let j = 0; j < users.optionalUsers.length; j++) {\r\n        let result = users.mandatoryUsers.find((mandatoryUserId) => mandatoryUserId === users.optionalUsers[j]);\r\n        if (!result) {\r\n            filteredOptionalUsers.push(users.optionalUsers[j]);\r\n        }\r\n    }\r\n    users.optionalUsers = filteredOptionalUsers;\r\n\r\n    // Remove users from optional array if present in both mandatory and optional array (for users in group).\r\n    let filteredOptionalUsersInGroup = new Array<string>();\r\n    for (let k = 0; k < groups.optionalUsers.length; k++) {\r\n        let result = groups.mandatoryUsers.find((mandatoryUserId) => mandatoryUserId === groups.optionalUsers[k]);\r\n        if (!result) {\r\n            filteredOptionalUsersInGroup.push(groups.optionalUsers[k]);\r\n        }\r\n    }\r\n\r\n    groups.optionalUsers = filteredOptionalUsersInGroup;\r\n\r\n    // Check if user from group is added again as single user.\r\n    // If true then single user entity's mandatory/optional status will be considered and group's status will be neglected for that user.\r\n    let filteredMandatoryUsersInGroup = new Array<string>();\r\n    for (let l = 0; l < groups.mandatoryUsers.length; l++) {\r\n        let result = users.optionalUsers.find((optionalUser) => optionalUser === groups.mandatoryUsers[l]);\r\n        if (!result) {\r\n            filteredMandatoryUsersInGroup.push(groups.mandatoryUsers[l]);\r\n        }\r\n    }\r\n    groups.mandatoryUsers = filteredMandatoryUsersInGroup;\r\n\r\n    filteredOptionalUsersInGroup = new Array<string>();\r\n    for (let m = 0; m < groups.optionalUsers.length; m++) {\r\n        let result = users.mandatoryUsers.find((mandatoryUser) => mandatoryUser === groups.optionalUsers[m]);\r\n        if (!result) {\r\n            filteredOptionalUsersInGroup.push(groups.optionalUsers[m]);\r\n        }\r\n    }\r\n    groups.optionalUsers = filteredOptionalUsersInGroup;\r\n\r\n    filteredUsers.mandatoryUsers.push(...users.mandatoryUsers);\r\n    filteredUsers.mandatoryUsers.push(...groups.mandatoryUsers);\r\n    filteredUsers.optionalUsers.push(...users.optionalUsers);\r\n    filteredUsers.optionalUsers.push(...groups.optionalUsers);\r\n\r\n    filteredUsers.mandatoryUsers = [...new Set(filteredUsers.mandatoryUsers)];\r\n    filteredUsers.optionalUsers = [...new Set(filteredUsers.optionalUsers)];\r\n\r\n    return { mandatoryUsers: filteredUsers.mandatoryUsers, optionalUsers: filteredUsers.optionalUsers };\r\n}\r\n\r\nexport const createEvent = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = { ...stepEventState.eventDetails };\r\n    eventDetails.startDate = moment(eventDetails.startDate).startOf('day').add(eventDetails.startTime?.getHours(), 'hours').add(eventDetails.startTime?.getMinutes(), 'minutes').utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).startOf('day').add(eventDetails.startTime?.getHours(), 'hours').add(eventDetails.startTime?.getMinutes(), 'minutes').utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n    let response = await createNewEvent(eventDetails, teamId);\r\n\r\n    if (response.status === ResponseStatus.OK) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const updateEventDetails = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = { ...stepEventState.eventDetails };\r\n    eventDetails.startDate = moment(eventDetails.startDate).utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n    let response = await updateEvent(eventDetails, teamId);\r\n\r\n    if (response.status === ResponseStatus.OK) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const saveEventAsDraftAsync = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = stepEventState.eventDetails;\r\n    // let users = await getUserIdString(stepEventState.selectedUserGroups);\r\n    eventDetails.startDate = moment(eventDetails.startDate).utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n\r\n    if (stepEventState.isDraft) {\r\n        let response = await updateEventAsDraft(eventDetails, teamId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    else {\r\n        let response = await saveEventAsDraft(eventDetails, teamId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n    * Format and renders event day and time as per local time.\r\n    * @param startDate The start date of an event\r\n    * @param startTime The start time of an event\r\n    * @param endTime The end time of an event\r\n    * @returns Returns formatted date and time. Ex. Tue, 10:00 - 11:00\r\n    */\r\nexport const formatEventDayAndTimeToShort = (startDate: Date, startTime: Date, endTime: Date) => {\r\n    let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n    let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n    let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n    return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n}","// <copyright file=\"context-provider.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from \"i18next\";\r\nimport React, { Component } from 'react';\r\nimport { LanguageDirection } from \"../models/language-direction\";\r\n\r\nexport interface IWithContext {\r\n    teamsContext: microsoftTeams.Context | null,\r\n    microsoftTeams: typeof microsoftTeams,\r\n    dir: LanguageDirection\r\n}\r\n\r\nexport default function withContext(WrappedComponent: any) {\r\n    return class extends Component<any, IWithContext> {\r\n        constructor(props:any) {\r\n            super(props);\r\n            this.state = {\r\n                teamsContext: null,\r\n                microsoftTeams: microsoftTeams,\r\n                dir: LanguageDirection.Ltr\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n            microsoftTeams.initialize();\r\n            microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n                this.setState({ teamsContext: context, dir: i18n.dir(context.locale!) === LanguageDirection.Rtl ? LanguageDirection.Rtl : LanguageDirection.Ltr});\r\n            });\r\n        }\r\n\r\n        /** Renders component */\r\n        render() {\r\n            return (\r\n                <WrappedComponent {...this.props} teamsContext={this.state.teamsContext} microsoftTeams={this.state.microsoftTeams} dir={this.state.dir}/>\r\n            );\r\n        }\r\n    }\r\n}","// <copyright file=\"audience.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { EyeIcon, EyeSlashIcon, Text, Label, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { EventAudience } from \"../../../models/event-audience\";\r\nimport withContext, { IWithContext } from \"../../../providers/context-provider\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\ninterface IAudienceArtifact extends WithTranslation, IWithContext {\r\n    audienceType: EventAudience\r\n}\r\n\r\n/** The event audience artifact */\r\nconst AudienceArtifact: React.FunctionComponent<IAudienceArtifact> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className={props.dir === LanguageDirection.Rtl ? \"event-artifact rtl-right-margin-small\" : \"event-artifact\"}\r\n            title={props.audienceType === EventAudience.Private ? localize(\"private\") : localize(\"public\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={props.audienceType === EventAudience.Private ? <EyeSlashIcon /> : <EyeIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={props.audienceType === EventAudience.Private ? localize(\"private\") : localize(\"public\")} size=\"small\" weight=\"semibold\" />}\r\n            />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(withContext(AudienceArtifact));","// <copyright file=\"event-search-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventSearchType {\r\n    /** Represents operation type to get all public and private events for user */\r\n    AllPublicPrivateEventsForUser,\r\n\r\n    /** Represents operation type to get mandatory events for user */\r\n    MandatoryEventsForUser,\r\n\r\n    /** Represents operation type to get draft events for team */\r\n    DraftEventsForTeam,\r\n\r\n    /** Represents operation type to get active events for team */\r\n    ActiveEventsForTeam,\r\n\r\n    /** Represents operation type to get completed events for team */\r\n    CompletedEventsForTeam,\r\n\r\n    /** Represents operation type to get registered events for a user */\r\n    RegisteredEventsForUser,\r\n\r\n    /** Represents operation type to get completed events for a user */\r\n    CompletedEventsForUser = 7,\r\n}","// <copyright file=\"sort-by.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Represents 0 for recent and 1 for popular events */\r\nexport enum SortBy {\r\n    /** Represents default sorting of event by most recent first */\r\n    Recent,\r\n\r\n    /** Represents sorting of events by most number of registered attendee for an event */\r\n    Popularity,\r\n}","// <copyright file=\"teams-meeting.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Label, TeamsIcon, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The teams-meeting artifact */\r\nconst TeamsMeetingArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact\"\r\n            title={localize(\"teamsMeeting\")}\r\n            content={<Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={<TeamsIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={localize(\"teamsMeeting\")} size=\"small\" weight=\"semibold\" />}\r\n            />} />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(TeamsMeetingArtifact);","// <copyright file=\"live-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Label, BroadcastIcon, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The live event artifact */\r\nconst LiveEventArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact\"\r\n            title={localize(\"liveEvent\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={<BroadcastIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={localize(\"liveEvent\")} size=\"small\" weight=\"semibold\" />}\r\n            />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(LiveEventArtifact);","// <copyright file=\"mandatory.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Label, RedbangIcon, Text, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The mandatory event artifact */\r\nconst MandatoryArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact mandatory text-overflow-ellipsis\"\r\n            title={localize(\"mandatoryArtifactText\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                    start={<RedbangIcon />}\r\n                    main={<Text className=\"text-overflow-ellipsis\" content={localize(\"mandatoryArtifactText\")} size=\"small\" weight=\"semibold\" />}\r\n                />\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(MandatoryArtifact);","// <copyright file=\"event-image.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, ImageUnavailableIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nimport \"./event-image.css\";\r\n\r\ninterface IEventImage extends WithTranslation {\r\n    className: string | undefined,\r\n    imageSrc: string\r\n}\r\n\r\n/**\r\n * Renders event image. If image not loaded successfully, then renders placeholder\r\n * @param props The props of type IEventImage\r\n */\r\nconst EventImage: React.FunctionComponent<IEventImage> = props => {\r\n    let localize: TFunction = props.t;\r\n\r\n    let [isImageLoaded, setImageLoaded] = React.useState(false);\r\n    let [isErrorLoadingImage, setImageError] = React.useState(false);\r\n\r\n    /** The event handler called when image loaded successfully */\r\n    const onImageLoaded = () => {\r\n        setImageLoaded(true);\r\n    }\r\n\r\n    /** The event handler called when image was not loaded or user aborted loading image */\r\n    const onImageNotLoaded = () => {\r\n        setImageError(true);\r\n    }\r\n\r\n    const renderImagePlaceholder = () => {\r\n        if (!isImageLoaded && !isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <Text\r\n                            content={localize(\"eventCardImageLoadingPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else if (isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <ImageUnavailableIcon className=\"placeholder-icon\" />\r\n                        <Text\r\n                            content={localize(\"eventCardImageNotFoundPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img\r\n                className={`${props.className} ${isImageLoaded && !isErrorLoadingImage ? 'event-image-renderer image-loaded' : 'event-image-renderer image-not-loaded'}`}\r\n                src={props.imageSrc}\r\n                onLoad={onImageLoaded}\r\n                onError={onImageNotLoaded}\r\n                onAbort={onImageNotLoaded} />\r\n            {renderImagePlaceholder()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(EventImage);","// <copyright file=\"event-details.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Divider, Avatar, Layout, Provider, Button, Loader } from \"@fluentui/react-northstar\";\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { formatEventDayAndTimeToShort } from \"../../helpers/event-helper\";\r\nimport AudienceArtifact from \"../../components/common/event-artifacts/audience\";\r\nimport TeamsMeetingArtifact from \"../../components/common/event-artifacts/teams-meeting\";\r\nimport LiveEventArtifact from \"../../components/common/event-artifacts/live-event\";\r\nimport MandatoryArtifact from \"../../components/common/event-artifacts/mandatory\";\r\nimport EventImage from \"../../components/common/event-image/event-image\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./event-details.css\";\r\n\r\ninterface IEventDetailsProps extends WithTranslation {\r\n    dir: LanguageDirection\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedByName: string\r\n    eventOperationType: EventOperationType,\r\n    isLoadingEventDetails: boolean,\r\n    isFailedToGetEventDetails: boolean,\r\n    isOperationInProgress: boolean,\r\n    isOperationFailed: boolean,\r\n    isMobileView: boolean,\r\n    onPerformOperation: () => void\r\n}\r\n\r\n/** Renders the event details in task module */\r\nconst EventDetails: React.FunctionComponent<IEventDetailsProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    /** Renders artifacts */\r\n    const getArtifacts = () => {\r\n        let artifactElements: Array<JSX.Element> = [];\r\n\r\n        if (props.eventDetails?.isMandatoryForLoggedInUser) {\r\n            artifactElements.push(<MandatoryArtifact />);\r\n        }\r\n\r\n        switch (props.eventDetails?.type) {\r\n            case EventType.Teams:\r\n                artifactElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                artifactElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (props.eventDetails?.audience) {\r\n            case EventAudience.Private:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                {artifactElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Renders the event creator information */\r\n    const renderEventCreatorInfo = () => {\r\n        let name = props.eventCreatedByName && props.eventCreatedByName.length ? props.eventCreatedByName : localize(\"unknownUserName\");\r\n        return (\r\n            <Flex vAlign=\"center\" hAlign=\"start\" gap=\"gap.smaller\" design={{ marginTop: \"2.67rem\" }}>\r\n                <Avatar\r\n                    size=\"small\"\r\n                    name={name}\r\n                    className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}\r\n                />\r\n                <Layout\r\n                    start={<Text content={localize(\"createdBy\")} size=\"small\" />}\r\n                    main={<Text content={name} size=\"small\" weight=\"semibold\" />}\r\n                    gap=\".4rem\"\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    const renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Sets the event operation type that the task module is going to do */\r\n    const renderOperationButtonText = () => {\r\n        switch (props.eventOperationType) {\r\n            case EventOperationType.CloseRegistration:\r\n                return localize(\"closeRegistration\");\r\n\r\n            case EventOperationType.CancelEvent:\r\n                return localize(\"cancelEvent\");\r\n\r\n            case EventOperationType.Register:\r\n                return localize(\"register\");\r\n\r\n            case EventOperationType.Remove:\r\n                return localize(\"remove\");\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** Renders the footer which has the submit action to close, cancel, register or cancel an event */\r\n    const renderFooter = () => {\r\n        if (props.eventOperationType === EventOperationType.None) {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <Flex className=\"footer\" vAlign=\"center\">\r\n                {props.isOperationFailed ? <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" /> : null}\r\n                <Flex.Item grow={props.dir === LanguageDirection.Rtl} push={props.dir === LanguageDirection.Ltr}>\r\n                    <div >\r\n                        <Button\r\n                            primary\r\n                            loading={props.isOperationInProgress}\r\n                            disabled={props.isOperationInProgress}\r\n                            content={renderOperationButtonText()}\r\n                            onClick={props.onPerformOperation}\r\n                        />\r\n                    </div>\r\n                </Flex.Item>\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Renders task module header */\r\n    const renderHeader = () => {\r\n        if (props.isMobileView) {\r\n            return (\r\n                <Flex column vAlign=\"center\" gap=\"gap.smaller\">\r\n                    <Text className=\"category label-color\" truncated content={props.eventDetails?.categoryName} title={props.eventDetails?.categoryName} weight=\"bold\" />\r\n                    <Flex vAlign=\"center\">\r\n                        {getArtifacts()}\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex space=\"between\" vAlign=\"center\">\r\n                    <Text className=\"category label-color\" truncated content={props.eventDetails?.categoryName} title={props.eventDetails?.categoryName} weight=\"bold\" />\r\n                    <Flex.Item push={props.dir === LanguageDirection.Ltr}>\r\n                        {getArtifacts()}\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders the attendee URL for live event */\r\n    const renderAttendeeURL = () => {\r\n        if (props.eventDetails?.type === EventType.LiveEvent) {\r\n            return (\r\n                <Flex design={{ marginTop: \"2.67rem\" }} vAlign=\"center\" hAlign=\"start\" column>\r\n                    <Text content={localize(\"liveEventUrlStep1\")} weight=\"semibold\" />\r\n                    <a href={props.eventDetails?.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{props.eventDetails?.meetingLink}</a>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (props.isLoadingEventDetails) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container\">\r\n                            <Loader className=\"task-module-loader\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        if (props.isFailedToGetEventDetails || !props.eventDetails) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container event-task-module\">\r\n                            <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fabric dir={props.dir}>\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className={`${props.isMobileView ? \"mobile-task-module-container\" : \"task-module-container\"} event-task-module`}>\r\n                            <div className=\"event-info\">\r\n                                { renderHeader() }\r\n                                {props.eventDetails.photo && <EventImage className=\"event-image\" imageSrc={props.eventDetails.photo} />}\r\n                                {props.eventDetails.selectedColor && <div className=\"event-image\" style={{ backgroundColor: props.eventDetails.selectedColor }}>\r\n                                    <Flex className=\"event-image\" hAlign=\"center\" vAlign=\"center\">\r\n                                        <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={props.eventDetails.name} title={props.eventDetails.name} />\r\n                                    </Flex>\r\n                                </div>}\r\n                                <div style={{ marginTop: \"1.33rem\" }}>\r\n                                    <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-smaller\" : \"\"} content={props.eventDetails?.name} weight=\"bold\" size=\"medium\" />\r\n                                </div>\r\n                                <Flex vAlign=\"center\" hAlign=\"start\">\r\n                                    <Layout\r\n                                        className=\"event-date-and-time\"\r\n                                        start={<Icon iconName=\"Clock\" />}\r\n                                        main={<Text content={formatEventDayAndTimeToShort(props.eventDetails?.startDate, props.eventDetails?.startTime!, props.eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                                        gap=\".4rem\"\r\n                                    />\r\n                                    {renderEventVenue(props.eventDetails?.type, props.eventDetails?.venue)}\r\n                                </Flex>\r\n                                <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                                    <Text className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} content={props.eventDetails?.description} />\r\n                                </Flex>\r\n                                { renderAttendeeURL() }\r\n                                <Flex gap={props.dir === LanguageDirection.Rtl ? undefined : \"gap.large\"} className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} design={{ marginTop: \"2.67rem\" }}>\r\n                                    <Flex column className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-large\" : \"\"}>\r\n                                        <Text content={localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                                        <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={props.eventDetails?.maximumNumberOfParticipants} />\r\n                                    </Flex>\r\n                                    <Flex column>\r\n                                        <Text content={localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                                        <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={props.eventDetails?.registeredAttendeesCount} />\r\n                                    </Flex>\r\n                                </Flex>\r\n                                {renderEventCreatorInfo()}\r\n                            </div>\r\n                            {renderFooter()}\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default withTranslation()(EventDetails);","// <copyright file=\"register-remove-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { getEventAsync } from \"../../api/common-api\";\r\nimport { getUserProfiles } from \"../../api/user-group-api\"\r\nimport { registerToEventAsync, removeEventAsync } from \"../../api/user-events-api\";\r\nimport EventDetails from \"../event-operation-task-module/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface IRegisterRemoveEventProps extends IWithContext, WithTranslation {\r\n}\r\n\r\ninterface IRegisterRemoveEventState {\r\n    isLoading: boolean,\r\n    isOperationInProgress: boolean,\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedBy: string,\r\n    isErrorGettingEventDetails: boolean,\r\n    isFailedToRegisterOrRemove: boolean,\r\n    eventOperationType: EventOperationType\r\n}\r\n\r\nclass RegisterRemoveEvent extends React.Component<IRegisterRemoveEventProps, IRegisterRemoveEventState> {\r\n    readonly localize: TFunction;\r\n    isMobileView: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.isMobileView = false;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isOperationInProgress: false,\r\n            eventDetails: undefined,\r\n            eventCreatedBy: \"\",\r\n            isErrorGettingEventDetails: false,\r\n            isFailedToRegisterOrRemove: false,\r\n            eventOperationType: EventOperationType.None\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        this.getEventDetailsAsync();\r\n    }\r\n\r\n    /** Gets event details */\r\n    getEventDetailsAsync = async () => {\r\n        let queryParam = new URLSearchParams(window.location.search);\r\n        let eventId = queryParam.get(\"eventId\") ?? \"0\";\r\n        let teamId = queryParam.get(\"teamId\") ?? \"0\";\r\n        this.isMobileView = queryParam.get(\"isMobileView\") === \"true\" ? true : false;\r\n\r\n        let response = await getEventAsync(eventId!, teamId!);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let eventDetails: IEvent = response.data;\r\n            let eventOperationType: EventOperationType = EventOperationType.None;\r\n\r\n            if (eventDetails.status === EventStatus.Active && new Date() < moment.utc(eventDetails.endDate).local().toDate()) {\r\n                if (eventDetails.isLoggedInUserRegistered) {\r\n                    eventOperationType = EventOperationType.Remove;\r\n                }\r\n                else if (!eventDetails.isRegistrationClosed && eventDetails.registeredAttendeesCount < eventDetails.maximumNumberOfParticipants && eventDetails.canLoggedInUserRegister) {\r\n                    eventOperationType = EventOperationType.Register;\r\n                }\r\n            }\r\n\r\n            this.setState({isLoading: false, eventDetails, eventOperationType }, () => {\r\n                if (this.state.eventDetails) {\r\n                    this.getUserProfileAsync(this.state.eventDetails.createdBy);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, isErrorGettingEventDetails: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    getUserProfileAsync = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            this.setState({ eventCreatedBy: userInfo.displayName });\r\n        }\r\n    }\r\n\r\n    /** Called when click on 'Register' or 'Remove' event */\r\n    onRegisterRemoveEvent = async () => {\r\n        this.setState({ isFailedToRegisterOrRemove: false, isOperationInProgress: true });\r\n\r\n        let response;\r\n        let teamId = this.state.eventDetails ? this.state.eventDetails.teamId : \"0\";\r\n        let eventId = this.state.eventDetails ? this.state.eventDetails.eventId : \"0\";\r\n\r\n        switch (this.state.eventOperationType) {\r\n            case EventOperationType.Register:\r\n                response = await registerToEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            case EventOperationType.Remove:\r\n                response = await removeEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, type: this.state.eventOperationType });\r\n        }\r\n        else {\r\n            this.setState({ isFailedToRegisterOrRemove: true, isOperationInProgress: false });\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <EventDetails\r\n                dir={this.props.dir}\r\n                eventDetails={this.state.eventDetails}\r\n                eventCreatedByName={this.state.eventCreatedBy}\r\n                eventOperationType={this.state.eventOperationType}\r\n                isLoadingEventDetails={this.state.isLoading}\r\n                isFailedToGetEventDetails={this.state.isErrorGettingEventDetails}\r\n                isOperationInProgress={this.state.isOperationInProgress}\r\n                isOperationFailed={this.state.isFailedToRegisterOrRemove}\r\n                isMobileView={this.isMobileView}\r\n                onPerformOperation={this.onRegisterRemoveEvent}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(RegisterRemoveEvent));","// <copyright file=\"event-image.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, ImageUnavailableIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nimport \"./event-image.css\";\r\n\r\ninterface IEventImage extends WithTranslation {\r\n    className: string | undefined,\r\n    imageSrc: string\r\n}\r\n\r\n/**\r\n * Renders event image. If image not loaded successfully, then renders placeholder\r\n * @param props The props of type IEventImage\r\n */\r\nconst EventImage: React.FunctionComponent<IEventImage> = props => {\r\n    let localize: TFunction = props.t;\r\n\r\n    let [isImageLoaded, setImageLoaded] = React.useState(false);\r\n    let [isErrorLoadingImage, setImageError] = React.useState(false);\r\n\r\n    /** The event handler called when image loaded successfully */\r\n    const onImageLoaded = () => {\r\n        setImageLoaded(true);\r\n    }\r\n\r\n    /** The event handler called when image was not loaded or user aborted loading image */\r\n    const onImageNotLoaded = () => {\r\n        setImageError(true);\r\n    }\r\n\r\n    const renderImagePlaceholder = () => {\r\n        if (!isImageLoaded && !isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <Text\r\n                            content={localize(\"eventCardImageLoadingPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else if (isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <ImageUnavailableIcon className=\"placeholder-icon\" />\r\n                        <Text\r\n                            content={localize(\"eventCardImageNotFoundPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img\r\n                className={`${props.className} ${isImageLoaded && !isErrorLoadingImage ? 'event-image-renderer image-loaded' : 'event-image-renderer image-not-loaded'}`}\r\n                src={props.imageSrc}\r\n                onLoad={onImageLoaded}\r\n                onError={onImageNotLoaded}\r\n                onAbort={onImageNotLoaded} />\r\n            {renderImagePlaceholder()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(EventImage);","// <copyright file=\"event-card.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Divider } from \"@fluentui/react-northstar\";\r\nimport moment from \"moment\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport MandatoryArtifact from \"../common/event-artifacts/mandatory\";\r\nimport TeamsMeetingArtifact from \"../common/event-artifacts/teams-meeting\";\r\nimport AudienceArtifact from \"../common/event-artifacts/audience\";\r\nimport LiveEventArtifact from \"../common/event-artifacts/live-event\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { formatEventDayAndTimeToShort } from \"../../helpers/event-helper\";\r\nimport EventImage from \"../event-image/event-image\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\nimport \"../event-card/event-card.css\";\r\n\r\ninterface IEventCardProps extends WithTranslation, IWithContext {\r\n    eventDetails: IEvent,\r\n    onClick: () => void\r\n}\r\n\r\n/**\r\n * Renders the event card for user\r\n * @param props The props with type IEventCard\r\n */\r\nconst EventCard: React.FunctionComponent<IEventCardProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    const renderFooter = () => {\r\n        let footerElements: Array<JSX.Element> = [];\r\n\r\n        if (props.eventDetails.isMandatoryForLoggedInUser) {\r\n            footerElements.push(<MandatoryArtifact />);\r\n        }\r\n\r\n        switch (props.eventDetails.type) {\r\n            case EventType.Teams:\r\n                footerElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                footerElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (props.eventDetails.audience) {\r\n            case EventAudience.Private:\r\n                footerElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                footerElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex className=\"footer\" gap=\"gap.small\" vAlign=\"center\">\r\n                {footerElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Gets the available slots for the event */\r\n    const getAvailableSlots = () => {\r\n        if (props.eventDetails.registeredAttendeesCount < props.eventDetails.maximumNumberOfParticipants) {\r\n            return props.eventDetails.maximumNumberOfParticipants - props.eventDetails.registeredAttendeesCount;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Renders event venue if event type is In-Person */\r\n    const renderEventVenue = () => {\r\n        if (props.eventDetails.type === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider className=\"event-date-venue-separator\" vertical />\r\n                    <Text truncated className=\"event-venue\" content={props.eventDetails.venue} title={props.eventDetails.venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex column className=\"event-card\" onClick={props.onClick}>\r\n            {props.eventDetails.photo && <EventImage className=\"event-photo\" imageSrc={props.eventDetails.photo} />}\r\n            {\r\n                props.eventDetails.selectedColor &&\r\n                <div className=\"event-photo\" style={{ backgroundColor: props.eventDetails.selectedColor }}>\r\n                    <Flex className=\"event-photo\" hAlign=\"center\" vAlign=\"center\">\r\n                        <Text className=\"event-color-text\" size=\"medium\" weight=\"semibold\" title={props.eventDetails.name} content={props.eventDetails.name} />\r\n                    </Flex>\r\n                </div>\r\n            }\r\n            <Flex className=\"event-info\" column fill>\r\n                <Flex vAlign=\"center\" gap=\"gap.medium\">\r\n                    <Flex className=\"event-day\" column vAlign=\"center\" hAlign=\"center\" fill>\r\n                        <Text content={moment.utc(props.eventDetails.startDate).local().format(\"DD\")} size=\"large\" weight=\"bold\" />\r\n                        <Text content={moment.utc(props.eventDetails.startDate).local().format(\"MMM\")} size=\"medium\" weight=\"semibold\" />\r\n                    </Flex>\r\n                    <Flex className=\"event-details\" column vAlign=\"center\" fill>\r\n                        <Text align={props.dir === \"rtl\" ? \"end\" : undefined} className={props.dir === \"rtl\" ? \"event-category rtl-right-margin-small\" : \"event-category\"} truncated content={props.eventDetails.categoryName} weight=\"bold\" size=\"smaller\" />\r\n                        <Text align={props.dir === \"rtl\" ? \"end\" : undefined} className={props.dir === \"rtl\" ? \"rtl-right-margin-small\" : \"\"} truncated content={props.eventDetails.name} title={props.eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                        <Flex className={props.dir === \"rtl\" ? \"event-date-and-venue-rtl event-date-and-venue\" : \"event-date-and-venue\"} vAlign=\"center\">\r\n                            <Icon iconName=\"Clock\" />\r\n                            <Flex.Item shrink={false}>\r\n                                <Text weight=\"semibold\" size=\"small\" content={formatEventDayAndTimeToShort(props.eventDetails.startDate, props.eventDetails.startTime!, props.eventDetails.endTime!)} />\r\n                            </Flex.Item>\r\n                            {renderEventVenue()}\r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n                <Flex className=\"event-participants\" gap=\"gap.small\">\r\n                    <Text size=\"small\" content={`${localize(\"participantsRegistered\")} : ${props.eventDetails.registeredAttendeesCount}`} />\r\n                    <Divider vertical />\r\n                    <Text size=\"small\" content={`${localize(\"availableSlots\")} : ${getAvailableSlots()}`} />\r\n                </Flex>\r\n                {renderFooter()}\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(withContext(EventCard));","// <copyright file=\"user-events-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Loader } from \"@fluentui/react-northstar\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport EventCard from \"../../components/event-card/event-card\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"../../components/user-events-wrapper/user-events-wrapper.css\"\r\n\r\ninterface IUserEventsProps {\r\n    key: string,\r\n    events: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    loadMoreEvents: (pageNumber: number) => void,\r\n    onClick: (eventDetails: IEvent) => void\r\n}\r\n\r\n/**\r\n * Renders the events for the user\r\n * @param props The props of type IUserEvents\r\n */\r\nconst UserEvents: React.FunctionComponent<IUserEventsProps> = props => {\r\n    /** Renders events details for every event */\r\n    const renderEvents = () => {\r\n        if (!props.events || props.events.length === 0) {\r\n            return \"No events available\";\r\n        }\r\n\r\n        let events = props.events.map((event: IEvent, index: number) => {\r\n            return <Col className=\"grid-column d-flex justify-content-center\" xl={4} lg={4} sm={6} md={4}><EventCard key={`event-${index}`} eventDetails={event} onClick={() => props.onClick(event)} /></Col>\r\n        });\r\n\r\n        return <Row data-testid=\"event_count\">{events}</Row>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-events\">\r\n            <div className=\"container-subdiv-cardview\">\r\n                <Container key={props.key} className=\"pagination-scroll-area\" fluid>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        initialLoad={false}\r\n                        loader={<Loader />}\r\n                        useWindow={false}\r\n                        loadMore={props.loadMoreEvents}\r\n                        hasMore={props.hasMoreEvents}\r\n                    >\r\n                        {renderEvents()}\r\n                    </InfiniteScroll>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserEvents;","// <copyright file=\"no-content-page.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from 'react';\r\nimport { Text } from \"@fluentui/react-northstar\";\r\nimport { EyeIcon } from \"@fluentui/react-icons-northstar\";\r\n\r\ninterface INoContentPage {\r\n    message: string\r\n}\r\n\r\nconst NoContent: React.FunctionComponent<INoContentPage> = props => {\r\n    return (\r\n        <div className=\"no-content-container\">\r\n            <div className=\"app-logo\">\r\n                <EyeIcon size=\"largest\" />\r\n            </div>\r\n            <div className=\"no-content-title\">\r\n                <Text content={props.message} weight=\"semibold\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoContent;","// <copyright file=\"popup-menu-checkboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Button, Provider, Divider, Checkbox } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon, SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuCheckboxesContentProps {\r\n    showSearchBar: boolean,\r\n    content: any,\r\n    disableClear: boolean,\r\n    selectedCount: number,\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst MaxItemsToShowInFilter: number = 50;\r\n\r\nconst PopupMenuCheckboxesContent: React.FunctionComponent<IPopupMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data, setCheckbox] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    const [searchedString, setSearchString] = React.useState(\"\");\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setcheckBoxClicked] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setFilterCheckboxes(props.content.checkboxes);\r\n    }, []);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: string, checked: boolean) => {\r\n        let checkCount = 0;\r\n        setcheckBoxClicked(true);\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        checkboxList.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        })\r\n\r\n        if (checkCount > 0) {\r\n            setdisableClear(false);\r\n        }\r\n        else {\r\n            setdisableClear(true);\r\n        }\r\n\r\n        if (searchedString.trim().length) {\r\n            let filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            })\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(checkboxList);\r\n        }\r\n\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n                checkbox.isChecked = false\r\n                return checkbox;\r\n        });\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setdisableClear(true);\r\n        setcheckBoxClicked(true);\r\n    }\r\n\r\n    const onSearchChange = (text: string) => {\r\n        setSearchString(text);\r\n        if (text.trim().length > 0) {\r\n            let filteredItems = data.checkboxes.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(text.toLowerCase());\r\n            });\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(data.checkboxes);\r\n        }\r\n    }\r\n\r\n    const getSelectedCountString = () => {\r\n        return props.selectedCount.toString();\r\n    }\r\n\r\n    const setFilterCheckboxes = (filterItems: any) => {\r\n        if (filterItems && filterItems.length > 0) {\r\n            let items = [...filterItems];\r\n            let itemsToRender = items.slice(0, MaxItemsToShowInFilter);\r\n            setFilteredCheckboxes(itemsToRender);\r\n        }\r\n        else {\r\n            setFilteredCheckboxes([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fabric dir={props.dir}>\r\n            <Provider>\r\n                <div className=\"content-items-wrapper\">\r\n                    {props.showSearchBar && <div className=\"content-items-headerfooter\">\r\n                        <Input icon={<SearchIcon />} iconPosition={props.dir === \"rtl\" ? \"start\" : \"end\" } placeholder={localize(\"searchPlaceholder\")} value={searchedString} fluid onChange={(event: any) => onSearchChange(event.target.value)} />\r\n                    </div>}\r\n                    <Divider className=\"filter-popup-menu-divider\" />\r\n                    <div className=\"content-items-headerfooter\">\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className={props.selectedCount === 0 ? \"clear-button \": \"clear-button enable-clear\"} size=\"small\" text onClick={() => deSelectAll()} content={props.selectedCount > 0 ? localize(\"clear\") + \"(\" + getSelectedCountString() + \")\" : localize(\"clear\") } />\r\n                        </Flex>\r\n                    </div>\r\n                    <div className=\"content-items-body\">\r\n                        {\r\n                            filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                                if (checkbox.title.trim().length) {\r\n                                    return (\r\n                                        <Flex gap=\"gap.small\">\r\n                                            <Checkbox data-testid={checkbox.key + \"_categoryCheckbox_item\"} className=\"checkbox-wrapper\" label={checkbox.checkboxLabel} key={checkbox.key} checked={checkbox.isChecked} onChange={(key, data: any) => onCheckboxValueChange(checkbox.key, data.checked)} />\r\n                                        </Flex>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        </Fabric>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupMenuCheckboxesContent);","// <copyright file=\"popup-menu-radiogroup-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, RadioGroup } from \"@fluentui/react-northstar\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuRadiogroupContentProps {\r\n    content: any,\r\n    selectedValue: number,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst PopupMenuRadiogroupContent: React.FunctionComponent<IPopupMenuRadiogroupContentProps> = props => {\r\n\r\n    return (\r\n        <Fabric dir={props.dir}>\r\n            <div className=\"content-items-wrapper radio-popup-content\">\r\n                <div className=\"content-items-body\">\r\n                    {   \r\n                        <Flex gap=\"gap.small\">\r\n\t\t\t\t            <RadioGroup\r\n\t\t\t\t\t            defaultCheckedValue={props.selectedValue}\r\n\t\t\t\t\t            vertical\r\n\t\t\t\t\t            items={props.content.radioGroupItems}\r\n                                onCheckedValueChange={(event, data: any) => props.onRadiogroupStateChange(data.value)}\r\n                                data-testid={\"radioGroup_items\"}\r\n\t\t\t\t            />\r\n\t\t\t            </Flex>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Fabric>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupMenuRadiogroupContent);","// <copyright file=\"popup-menu-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Popup, Button, Text } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport PopupMenuCheckboxesContent from \"./popup-menu-checkboxes-content\";\r\nimport PopupMenuRadiogroupContent from \"./popup-menu-radiogroup-content\";\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuWrapperProps {\r\n    checkboxes?: Array<any>,\r\n    radioGroup?: Array<any>,\r\n    title: string,\r\n    selectedSortBy?: number,\r\n    showSearchBar?: boolean,\r\n    selectedCount: number,\r\n    onCheckboxStateChange: (typeState: Array<any>) => void,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    onOpenChange: (isOpen: boolean) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst PopupMenuWrapper: React.FunctionComponent<IPopupMenuWrapperProps> = props => {\r\n    const [popup, onOpenChange] = React.useState({ isOpen: false });\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n\r\n    const onFilterClick = () => {\r\n        let checkCount = 0;\r\n        let checkBox = props.checkboxes!;\r\n        checkBox.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        });\r\n        if (checkCount > 0) {\r\n            setdisableClear(false);\r\n        }\r\n        else {\r\n            setdisableClear(true);\r\n        }\r\n    }\r\n\r\n    const onPopupOpenChange = (isOpen: boolean) => {\r\n        onOpenChange({ isOpen: isOpen });\r\n        props.onOpenChange(isOpen);\r\n    }\r\n\r\n    if (props.checkboxes) {\r\n        return (\r\n            <Popup\r\n                className=\"popup-container\"\r\n                open={popup.isOpen}\r\n                align=\"end\"\r\n                position=\"below\"\r\n                onOpenChange={(e, { open }: any) => onPopupOpenChange(open)}\r\n                trigger={<Button data-testid={props.checkboxes.length > 0 ? props.checkboxes[0].title + \"_CheckboxButton\" : \"dummyTitle_CheckboxButton\"} className=\"filter-button\" onClick={() => onFilterClick()} content={< Text content={props.title} className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} iconPosition=\"after\" icon = {< ChevronDownIcon />} text />}\r\n                content={<PopupMenuCheckboxesContent dir={props.dir} disableClear={disableClear} selectedCount={props.selectedCount} showSearchBar={props.showSearchBar!} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />}\r\n                trapFocus\r\n            />\r\n        );\r\n    }\r\n    else if (props.radioGroup) {\r\n        return (\r\n            <Popup\r\n                open={popup.isOpen}\r\n                align=\"end\"\r\n                position=\"below\"\r\n                onOpenChange={(e, { open }: any) => onPopupOpenChange(open)}\r\n                trigger={<Button data-testid={props.radioGroup.length > 0 ? props.radioGroup[0].name + \"_RadioGroupButton\" : \"dummyName_RadioGroupButton\"} icon={< ChevronDownIcon />} className=\"filter-button\" iconPosition=\"after\" content={< Text content={props.title} className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} text />}\r\n                content={<PopupMenuRadiogroupContent dir={props.dir} selectedValue={props.selectedSortBy!} content={{ radioGroupItems: props.radioGroup, title: props.title }} onRadiogroupStateChange={props.onRadiogroupStateChange} />}\r\n                trapFocus\r\n            />\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default React.memo(PopupMenuWrapper);","/*\r\n\t<copyright file=\"resources.ts\" company=\"Microsoft\">\r\n\tCopyright (c) Microsoft. All rights reserved.\r\n\t</copyright>\r\n*/\r\n\r\nimport { EventAudience } from \"../models/event-audience\";\r\nimport { EventType } from \"../models/event-type\";\r\nimport { IPostType } from \"../models/IPostType\";\r\nimport { SortBy } from \"../models/sort-by\";\r\n\r\nexport interface IConstantDropdownItem {\r\n\tname: string;\r\n\tid: number;\r\n}\r\n\r\nexport interface ITimeZonesItem {\r\n\tdisplayName: string;\r\n\tid: string;\r\n}\r\n\r\nexport default class Resources {\r\n\tpublic static readonly dark: string = \"dark\";\r\n\tpublic static readonly contrast: string = \"contrast\";\r\n\tpublic static readonly eventNameMaxLength: number = 100;\r\n\tpublic static readonly eventDescriptionMaxLength: number = 1000;\r\n\tpublic static readonly eventVenueMaxLength: number = 200;\r\n\tpublic static readonly userEventsMobileFilteredCategoriesLocalStorageKey: string = \"user-events-filtered-categories\";\r\n\tpublic static readonly userEventsMobileFilteredUsersLocalStorageKey: string = \"user-events-filtered-users\";\r\n\tpublic static readonly userEventsMobileSortByFilterLocalStorageKey: string = \"user-events-sortby\";\r\n\tpublic static readonly validUrlRegExp: RegExp = /^http(s)?:\\/\\/(www\\.)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/;\r\n\r\n\t/** Color codes used while creating an event */\r\n\tpublic static readonly colorCells = [\r\n\t\t{ id: 'a', label: 'Wild blue yonder', color: '#A4A8CB' },\r\n\t\t{ id: 'b', label: 'Jasmine', color: '#FFDE85' },\r\n\t\t{ id: 'c', label: 'Sky blue', color: '#A0EAF8' },\r\n\t\t{ id: 'd', label: 'Nadeshiko pink', color: '#F1A7B9' },\r\n\t\t{ id: 'e', label: 'Lavender blue', color: '#E3D7FF' },\r\n\t];\r\n\r\n\t/** Color codes used while creating an event */\r\n\tpublic static readonly audienceType: Array<IConstantDropdownItem> = [\r\n\t\t{ name: \"Public\", id: EventAudience.Public },\r\n\t\t{ name: \"Private\", id: EventAudience.Private },\r\n\t];\r\n\r\n\t/** Sort by values for filter */\r\n\tpublic static readonly sortBy: Array<IPostType> = [\r\n\t\t{ name: \"Newest\", id: SortBy.Recent, color: \"\" },\r\n\t\t{ name: \"Popularity\", id: SortBy.Popularity, color: \"\" }\r\n\t];\r\n\r\n\t/** Event type values */\r\n\tpublic static readonly eventType: Array<IConstantDropdownItem> = [\r\n\t\t{ name: \"In person\", id: EventType.InPerson },\r\n\t\t{ name: \"Teams\", id: EventType.Teams },\r\n\t\t{ name: \"Live event\", id: EventType.LiveEvent },\r\n\t];\r\n}","// <copyright file=\"localized-constants.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { EventAudience } from \"../models/event-audience\";\r\nimport { EventType } from \"../models/event-type\";\r\nimport { IConstantDropdownItem } from \"../constants/resources\";\r\nimport Resources from \"../constants/resources\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IPostType } from \"../models/IPostType\";\r\nimport { SortBy } from \"../models/sort-by\";\r\n\r\n/**\r\n* Get localized audience types.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedAudienceTypes = (localize: TFunction): Array<IConstantDropdownItem> => {\r\n    return Resources.audienceType.map((value: IConstantDropdownItem) => {\r\n        switch (value.id) {\r\n            case EventAudience.Public:\r\n                value.name = localize(\"publicAudience\");\r\n                return value;\r\n\r\n            case EventAudience.Private:\r\n                value.name = localize(\"privateAudience\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get localized event types.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedEventTypes = (localize: TFunction): Array<IConstantDropdownItem> => {\r\n    return Resources.eventType.map((value: IConstantDropdownItem) => {\r\n        switch (value.id) {\r\n            case EventType.InPerson:\r\n                value.name = localize(\"inPersonEvent\");\r\n                return value;\r\n\r\n            case EventType.Teams:\r\n                value.name = localize(\"teamsEvent\");\r\n                return value;\r\n\r\n            case EventType.LiveEvent:\r\n                value.name = localize(\"liveEvent\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get localized sort by filters.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedSortBy = (localize: TFunction): Array<IPostType> => {\r\n    return Resources.sortBy.map((value: IPostType) => {\r\n        switch (value.id) {\r\n            case SortBy.Recent:\r\n                value.name = localize(\"sortByNewest\");\r\n                return value;\r\n\r\n            case SortBy.Popularity:\r\n                value.name = localize(\"sortByPopularity\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}","// <copyright file=\"activity-status.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Contains the values which shows status for an activity */\r\nexport enum ActivityStatus {\r\n    /** Indicates no activity */\r\n    None,\r\n\r\n    /** Indicates that the activity completed successfully */\r\n    Success,\r\n\r\n    /** Indicates that the activity failed to execute */\r\n    Error\r\n}","// <copyright file=\"filter-bar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport PopupMenuWrapper from \"../../components/common/popup-menu/popup-menu-wrapper\";\r\nimport { ICheckBoxItem } from \"../../models/ICheckBoxItem\";\r\nimport { IRadioGroupItem } from \"../../models/IRadioGroupItem\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedSortBy } from \"../../helpers/localized-constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./filter-bar.css\";\r\n\r\ninterface IFilterBarProps extends WithTranslation, IWithContext {\r\n    isVisible: boolean,\r\n    isReset: boolean,\r\n    categoryList: Array<ICategory>,\r\n    createdByList: Array<ITeamsChannelMember>,\r\n    onFilterBarCloseClick: (isFilterStateChanged: boolean) => void,\r\n    onFilterChange: (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => void\r\n}\r\n\r\ninterface IFilterBarState {\r\n    categoryList: Array<ICheckBoxItem>;\r\n    createdByList: Array<ICheckBoxItem>;\r\n    sortBy: Array<IRadioGroupItem>;\r\n    selectedSortBy: number;\r\n    screenWidth: number;\r\n    createdBySelectedCount: number;\r\n    categorySelectedCount: number;\r\n}\r\n\r\ninterface IPostType {\r\n    name: string;\r\n    id: number;\r\n    color: string;\r\n}\r\n\r\nclass FilterBar extends React.Component<IFilterBarProps, IFilterBarState> {\r\n    localize: TFunction;\r\n    isFilterStateChanged: boolean;\r\n\r\n    constructor(props: IFilterBarProps) {\r\n        super(props);\r\n\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.isFilterStateChanged = false;\r\n\r\n        const sortBy: Array<IRadioGroupItem> = getLocalizedSortBy(this.localize).map((sortBy: IPostType) => { return { key: sortBy.id, label: sortBy.name, value: sortBy.id, name: sortBy.name } });\r\n\r\n        this.state = {\r\n            selectedSortBy: sortBy[0].value,\r\n            categoryList: [],\r\n            createdByList: [],\r\n            sortBy: sortBy,\r\n            screenWidth: 800,\r\n            createdBySelectedCount: 0,\r\n            categorySelectedCount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFilterBarProps) {\r\n        if (nextProps.isReset) {\r\n            let categoryList = this.state.categoryList ? [...this.state.categoryList] : [];\r\n            let createdByList = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n            this.isFilterStateChanged = false;\r\n\r\n            this.setState({\r\n                categoryList: categoryList.map((value: ICheckBoxItem) => {\r\n                    value.isChecked = false;\r\n                    return value;\r\n                }),\r\n                categorySelectedCount: 0,\r\n                createdByList: createdByList.map((value: ICheckBoxItem) => {\r\n                    value.isChecked = false;\r\n                    return value;\r\n                }),\r\n                createdBySelectedCount: 0,\r\n                selectedSortBy: SortBy.Recent\r\n            });\r\n        }\r\n\r\n        if (nextProps.categoryList && nextProps.categoryList !== this.props.categoryList) {\r\n            this.setState({\r\n                categoryList: nextProps.categoryList.map((value: ICategory) => {\r\n                    return { isChecked: false, key: value.categoryId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                })\r\n            });\r\n        }\r\n\r\n        if (nextProps.createdByList && nextProps.createdByList !== this.props.createdByList) {\r\n            this.setState({\r\n                createdByList: nextProps.createdByList.map((value: ITeamsChannelMember) => {\r\n                    return { isChecked: false, key: value.aadObjectId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Category list' filter item when checkbox value changes.\r\n\t*@param categoryValues Array of 'category' checkboxes with updated user selection\r\n    */\r\n    onCategoryStateChange = (categoryValues: Array<ICheckBoxItem>) => {\r\n        let selectedCategories = categoryValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ categoryList: categoryValues, categorySelectedCount: selectedCategories ? selectedCategories.length : 0 });\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Created by' filter item when checkbox value changes.\r\n\t*@param createdByValues Array of 'created by' checkboxes with updated user selection\r\n    */\r\n    onCreatedByStateChange = (createdByValues: Array<ICheckBoxItem>) => {\r\n        let selectedUsers = createdByValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ createdByList: createdByValues, createdBySelectedCount: selectedUsers ? selectedUsers.length : 0 });\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of selected sort by item.\r\n\t*@param selectedSortBy Selected 'sort by' value\r\n    */\r\n    onSortByStateChange = (selectedSortBy: number) => {\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ selectedSortBy: selectedSortBy });\r\n    }\r\n\r\n\t/**\r\n\t*Removes all filters and hides filter bar.\r\n\t*@param event Event object for input\r\n    */\r\n    onCloseIconClick = (event: any) => {\r\n        this.props.onFilterBarCloseClick(this.state.categorySelectedCount > 0 || this.state.createdBySelectedCount > 0 || this.state.selectedSortBy !== SortBy.Recent );\r\n        this.isFilterStateChanged = false;\r\n    }\r\n\r\n    onFilterChange = (isFilterItemOpen: boolean) => {\r\n        if (!isFilterItemOpen && this.isFilterStateChanged) {\r\n            let categories: Array<ICheckBoxItem> = this.state.categoryList ? [...this.state.categoryList] : [];\r\n            let users: Array<ICheckBoxItem> = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n            let selectedCategories = categories.filter((category: ICheckBoxItem) => {\r\n                return category.isChecked;\r\n            });\r\n\r\n            let selectedUsers = users.filter((user: ICheckBoxItem) => {\r\n                return user.isChecked;\r\n            });\r\n\r\n            let filteredCategories = selectedCategories.map((category: ICheckBoxItem) => {\r\n                return category.key;\r\n            });\r\n\r\n            let filteredUsers = selectedUsers.map((user: ICheckBoxItem) => {\r\n                return user.key;\r\n            });\r\n\r\n            this.isFilterStateChanged = false;\r\n            this.props.onFilterChange(filteredCategories, filteredUsers, this.state.selectedSortBy);\r\n        }\r\n        else {\r\n            this.isFilterStateChanged = false;\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Renders the component\r\n\t*/\r\n    public render(): JSX.Element {\r\n        if (this.props.isVisible) {\r\n            return (\r\n                <Fabric dir={this.props.dir}>\r\n                    <Flex className=\"filter-bar\" data-testid=\"filterbar\">\r\n                        {this.state.screenWidth > 750 &&\r\n                            <Flex gap=\"gap.small\" vAlign=\"center\" className=\"filter-bar-wrapper\" space=\"between\">\r\n                                <div className=\"filter-bar-item-container\">\r\n                                    <Text content={this.localize(\"category\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.categorySelectedCount > 0 ? this.state.categorySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <Text content={this.localize(\"createdBy\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.createdBySelectedCount > 0 ? this.state.createdBySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} checkboxes={this.state.createdByList} selectedCount={this.state.createdBySelectedCount} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <Text content={this.localize(\"sortBy\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.sortBy[this.state.selectedSortBy!].name} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} radioGroup={this.state.sortBy} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                </div>\r\n                            <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                                <CloseIcon onClick={this.onCloseIconClick} className={this.props.dir === LanguageDirection.Rtl ? \"close-icon rtl-left-margin-small\" : \"close-icon\"} />\r\n                                </Flex.Item>\r\n                            </Flex>}\r\n\r\n                        {this.state.screenWidth <= 750 && <Flex gap=\"gap.small\" vAlign=\"start\" className=\"filter-bar-wrapper\">\r\n                            <Flex.Item grow>\r\n                                <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                                    <Flex className=\"mobile-filterbar-wrapper\">\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.categorySelectedCount > 0 ? this.state.categorySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.createdBySelectedCount > 0 ? this.state.createdBySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} checkboxes={this.state.createdByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.sortBy[this.state.selectedSortBy!].name} selectedCount={this.state.createdBySelectedCount} selectedSortBy={this.state.selectedSortBy!} radioGroup={this.state.sortBy} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                    </Flex>\r\n                                </Flex>\r\n                            </Flex.Item>\r\n                        </Flex>}\r\n                    </Flex>\r\n                </Fabric>\r\n            );\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(FilterBar))","// <copyright file=\"tab-menu.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Menu, MenuProps } from \"@fluentui/react-northstar\";\r\nimport \"./tab-menu.css\";\r\n\r\ninterface ITabMenuProps {\r\n    defaultTabIndex: number,\r\n    tabItems: Array<any>,\r\n    activeTabIndex: string | number,\r\n    onTabIndexChange: (tabEvent: MenuProps | undefined) => void\r\n}\r\n\r\n/**\r\n * Renders tab menu\r\n * @param props The props of type ITabMenuProps\r\n */\r\nconst TabMenu: React.FunctionComponent<ITabMenuProps> = props => {\r\n    return (\r\n        <Flex className=\"tab-menu\">\r\n            <Menu primary items={props.tabItems} defaultActiveIndex={props.defaultTabIndex} activeIndex={props.activeTabIndex} onActiveIndexChange={(event, tabEventDetails: MenuProps | undefined) => props.onTabIndexChange(tabEventDetails)} />\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default TabMenu;","// <copyright file=\"toast-notification.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./toast-notification.css\";\r\n\r\ninterface IToastNotificationProps extends WithTranslation {\r\n    notification: IToastNotification,\r\n    dir: LanguageDirection\r\n}\r\n\r\ninterface IToastNotificationState {\r\n    isShowNotification: boolean\r\n}\r\n\r\n/**\r\n * The toast notification which shows the recent status messages\r\n * @param props The props of type IToastNotificationProps\r\n */\r\nclass ToastNotification extends React.Component<IToastNotificationProps, IToastNotificationState> {\r\n    readonly localize: TFunction;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n\r\n        this.state = {\r\n            isShowNotification: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IToastNotificationProps) {\r\n        if (nextProps.notification.id !== this.props.notification.id && nextProps.notification.message?.length && nextProps.notification.type !== ActivityStatus.None) {\r\n            this.setState({ isShowNotification: true });\r\n        }\r\n    }\r\n\r\n    onClose = () => {\r\n        this.setState({ isShowNotification: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Toast\r\n                className={`notification-toast ${this.props.notification.type === ActivityStatus.Success ? \"success\" : \"error\"}`}\r\n                autohide\r\n                delay={4000}\r\n                show={this.state.isShowNotification}\r\n                onClose={this.onClose}>\r\n                <Toast.Body className={this.props.dir === LanguageDirection.Ltr ? \"notification\" : \"rtl-notification\"}>\r\n                    <strong>{this.props.notification.message}</strong>\r\n                </Toast.Body>\r\n            </Toast>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ToastNotification);","// <copyright file=\"LnD-team-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\n\r\nlet baseAxiosUrl = window.location.origin + '/api';\r\n\r\n/**\r\n* Gets all LnD teams' members\r\n*/\r\nexport const getAllLnDTeamMembersAsync = async (): Promise<any> => {\r\n    let url = `${baseAxiosUrl}/LnDTeam`;\r\n    return await axios.get(url);\r\n}","// <copyright file=\"mobile-filter-helper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport Resources from \"../constants/resources\";\r\n\r\n/** Clears the local storage data saved for mobile filter */\r\nexport const clearMobileFilterLocalStorage = () => {\r\n    localStorage.removeItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n    localStorage.removeItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n    localStorage.removeItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n}","// <copyright file=\"discover-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Input, Loader, MenuButton, MenuProps, Provider, SearchIcon, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport UserEvents from \"../user-events-wrapper/user-events-wrapper\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport FilterBar from \"../filter-bar/filter-bar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\"\r\nimport { getEventsAsync } from \"../../api/user-events-api\";\r\nimport { Icon } from '@fluentui/react';\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { clearMobileFilterLocalStorage } from \"../../helpers/mobile-filter-helper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./discover-events.css\";\r\n\r\ninterface IDiscoverEventsState {\r\n    mandatoryEvents: Array<IEvent>,\r\n    allEvents: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    userEventsContainerKey: number,\r\n    isLoadingEvents: boolean,\r\n    activeTabIndex: number | string | undefined,\r\n    isFilterOpen: boolean,\r\n    searchText: string,\r\n    filteredCategories: string,\r\n    filteredUsers: string,\r\n    sortByFilter: number,\r\n    categoriesInFilter: Array<ICategory>,\r\n    lnDTeamMembersInFilter: Array<ITeamsChannelMember>,\r\n    isResetFilter: boolean,\r\n    notification: IToastNotification,\r\n    isMobileView: boolean,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IDiscoverEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** The tab index for 'Mandatory events' tab */\r\nconst MandatoryEventsTabIndex: number = 0;\r\n\r\n/** The tab index for 'All events' */\r\nconst AllEventsTabIndex: number = 1;\r\n\r\n/** Renders all events for user created by LnD team */\r\nclass DiscoverEvents extends React.Component<IDiscoverEventsProps, IDiscoverEventsState> {\r\n    localize: TFunction;\r\n    searchText: string;\r\n    timeout: number | null;\r\n    mandatoryEventsCount: number;\r\n    allEventsCount: number;\r\n\r\n    constructor(props: IDiscoverEventsProps) {\r\n        super(props);\r\n\r\n        this.searchText = \"\";\r\n        this.localize = this.props.t;\r\n        this.timeout = null;\r\n        this.mandatoryEventsCount = -1;\r\n        this.allEventsCount = -1;\r\n\r\n        this.state = {\r\n            mandatoryEvents: [],\r\n            allEvents: [],\r\n            hasMoreEvents: false,\r\n            userEventsContainerKey: 0,\r\n            isLoadingEvents: true,\r\n            activeTabIndex: MandatoryEventsTabIndex,\r\n            isFilterOpen: false,\r\n            searchText: \"\",\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            categoriesInFilter: [],\r\n            lnDTeamMembersInFilter: [],\r\n            isResetFilter: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            isMobileView: false,\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.screenResize.bind(this));\r\n        this.screenResize();\r\n\r\n        this.loadEventCategories();\r\n        this.loadAllLnDTeamMembers();\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        let mandatoryEvents = this.getEventsAsync(EventSearchType.MandatoryEventsForUser);\r\n        let allEvents = this.getEventsAsync(EventSearchType.AllPublicPrivateEventsForUser);\r\n\r\n        Promise.all([mandatoryEvents, allEvents])\r\n            .then((results) => {\r\n                this.setTotalEventsCount(EventSearchType.MandatoryEventsForUser, results[0].length);\r\n                this.setTotalEventsCount(EventSearchType.AllPublicPrivateEventsForUser, results[1].length);\r\n            })\r\n            .finally(() => {\r\n                this.getEvents();\r\n            });\r\n    }\r\n\r\n    screenResize = () => {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ categoriesInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ lnDTeamMembersInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEventsAsync = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let response: any;\r\n\r\n        if (eventSearchType === EventSearchType.MandatoryEventsForUser) {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.MandatoryEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n        else {\r\n            response = await getEventsAsync(this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.AllPublicPrivateEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n\r\n        let result: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            result = response.data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    loadEvents = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(eventSearchType, pageNumber);\r\n\r\n        if (events) {\r\n            switch (eventSearchType) {\r\n                case EventSearchType.MandatoryEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let mandatoryEvents = [...this.state.mandatoryEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            mandatoryEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1\r\n                        );\r\n\r\n                        this.setState({\r\n                            mandatoryEvents: mandatoryEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.MandatoryEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            mandatoryEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n\r\n                case EventSearchType.AllPublicPrivateEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let allEvents = [...this.state.allEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            allEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            allEvents: allEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.AllPublicPrivateEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            allEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n\r\n                if (eventSearchType === EventSearchType.MandatoryEventsForUser) {\r\n                    this.setState({ mandatoryEvents: [], hasMoreEvents: false });\r\n                }\r\n                else {\r\n                    this.setState({ allEvents: [], hasMoreEvents: false });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ hasMoreEvents: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if ((!this.state.searchText || this.state.searchText.trim() === \"\") && !this.state.filteredCategories?.length && !this.state.filteredUsers?.length) {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.MandatoryEventsForUser:\r\n                    this.mandatoryEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.AllPublicPrivateEventsForUser:\r\n                    this.allEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on event\r\n     * @param eventDetails The event details\r\n     */\r\n    onEventClick = (eventDetails: IEvent) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/register-remove?eventId=${eventDetails.eventId}&teamId=${eventDetails.teamId}&isMobileView=${this.state.isMobileView}`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"eventDetailsStep1\"),\r\n        }, (error:any, result:any) => {\r\n                if (result) {\r\n                    let events: Array<IEvent> = this.state.activeTabIndex === MandatoryEventsTabIndex ? [...this.state.mandatoryEvents] : [...this.state.allEvents];\r\n                    let eventAtIndex: number = events?.findIndex((event: IEvent) => event.eventId === eventDetails.eventId);\r\n\r\n                    let eventToUpdate: IEvent = events[eventAtIndex];\r\n                    eventToUpdate.registeredAttendeesCount = result.type === EventOperationType.Register ? eventToUpdate.registeredAttendeesCount + 1 : eventToUpdate.registeredAttendeesCount - 1;\r\n\r\n                    if (this.state.activeTabIndex === MandatoryEventsTabIndex) {\r\n                        this.setState((prevState: IDiscoverEventsState) => (\r\n                            {\r\n                                mandatoryEvents: events,\r\n                                notification: {\r\n                                    id: prevState.notification.id + 1,\r\n                                    message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                    type: ActivityStatus.Success\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                    else {\r\n                        this.setState((prevState: IDiscoverEventsState) => (\r\n                            {\r\n                                allEvents: events,\r\n                                notification: {\r\n                                    id: prevState.notification.id + 1,\r\n                                    message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                    type: ActivityStatus.Success\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Get called when tab selection change */\r\n    onTabIndexChange = (event: MenuProps | undefined) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        this.setState({ isLoadingEvents: true, activeTabIndex: event?.activeIndex!, searchText: \"\", filteredCategories: \"\", filteredUsers: \"\", sortByFilter: SortBy.Recent, isResetFilter: true }, () => {\r\n            this.timeout = window.setTimeout(async () => {\r\n                if (event) {\r\n                    this.getEvents();\r\n                }\r\n            }, 700);\r\n        });\r\n    }\r\n\r\n    /** Get called when 'Enter' key pressed in 'Search events' textbox */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /** The event handler to toggle the state of filter bar */\r\n    onFilterBarToggle = () => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            isResetFilter: false\r\n        }));\r\n    }\r\n\r\n    /** The event handler called when click on filter icon and mobile mode is ON */\r\n    onMobileFilterButtonClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/mobile-filter`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"mobileFilterTitle\"),\r\n        }, (error: any, result: any) => {\r\n                if (result && result.isFilterStateChanged) {\r\n                    let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                    let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                    let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                    this.setState({\r\n                        filteredCategories: filteredCategories ? filteredCategories : \"\",\r\n                        filteredUsers: filteredUsers ? filteredUsers : \"\",\r\n                        sortByFilter: sortBy ? sortBy as unknown as number : 0\r\n                    }, () => this.getEvents());\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Event handler called when click on close filter bar which closes it and clears all filters those were applied */\r\n    onFilterBarClose = (isFilterStateChanged: boolean) => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            isResetFilter: true\r\n        }), () => {\r\n                if (isFilterStateChanged) {\r\n                    this.getEvents();\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when to get events based on filtered values\r\n     * @param selectedCategories The selected categories in filter bar\r\n     * @param selectedUsers The selected users in filter bar\r\n     * @param sortBy The selected sort by value in filter bar\r\n     */\r\n    onFilterChange = (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => {\r\n        let filteredCategories: Array<string> = selectedCategories ? selectedCategories : [];\r\n        let filteredUsers: Array<string> = selectedUsers ? selectedUsers : [];\r\n\r\n        this.setState({\r\n            filteredCategories: filteredCategories.join(\";\"),\r\n            filteredUsers: filteredUsers.join(\";\"),\r\n            sortByFilter: sortBy\r\n        }, () => {\r\n            this.getEvents();\r\n        });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({ searchText: \"\" }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get events based on current tab selection\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IDiscoverEventsState) =>\r\n                ({ isLoadingEvents: true, hasMoreEvents: false, userEventsContainerKey: prevState.userEventsContainerKey + 1, isResetFilter: false }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case MandatoryEventsTabIndex:\r\n                this.loadEvents(EventSearchType.MandatoryEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            case AllEventsTabIndex:\r\n                this.loadEvents(EventSearchType.AllPublicPrivateEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.setState({ isLoadingEvents: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    renderTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"mandatory-user-events\",\r\n                    content: `${this.localize(\"mandatoryEventsTab\")} ${this.formatEventsCount(this.mandatoryEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"all-user-events\",\r\n                    content: `${this.localize(\"allEventsTab\")} ${this.formatEventsCount(this.allEventsCount)}`\r\n                },\r\n            ]\r\n        );\r\n    }\r\n\r\n    /** Renders user events */\r\n    renderEvents = () => {\r\n        if (this.state.isLoadingEvents) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>;\r\n        }\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === MandatoryEventsTabIndex) {\r\n            events = [...this.state.mandatoryEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === AllEventsTabIndex) {\r\n            events = [...this.state.allEvents];\r\n        }\r\n\r\n        if (!events || events.length === 0) {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Flex className={this.state.isFilterOpen ? \"filter-open\" : undefined}>\r\n                <UserEvents\r\n                    key={`discover-events-${this.state.userEventsContainerKey}`}\r\n                    events={events}\r\n                    hasMoreEvents={this.state.hasMoreEvents}\r\n                    loadMoreEvents={this.getEvents}\r\n                    onClick={this.onEventClick}\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    renderFilterButtonIcon = () => {\r\n        if ((this.state.filteredCategories && this.state.filteredCategories.length > 0)\r\n            || (this.state.filteredUsers && this.state.filteredUsers.length > 0)) {\r\n            return <Icon iconName=\"FilterSolid\" />\r\n        }\r\n        else {\r\n            return <Icon iconName=\"Filter\" />\r\n        }\r\n    }\r\n\r\n    /** Renders the desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <TabMenu defaultTabIndex={MandatoryEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-medium\" : \"\"}\r\n                                    trigger={\r\n                                        <Button icon={this.renderFilterButtonIcon()}\r\n                                            content={this.localize(\"filterButtonText\")}\r\n                                            onClick={this.onFilterBarToggle}\r\n                                            data-testid=\"filterbutton\"\r\n                                        />}\r\n                            />\r\n                                <Input\r\n                                    inverted\r\n                                    value={this.state.searchText}\r\n                                    icon={<SearchIcon />}\r\n                                    iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                    placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                    input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                    onKeyUp={this.onSearchEvents}\r\n                                    onChange={this.onSearchTextChange}\r\n                                    data-testid=\"search_input\"\r\n                                />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <FilterBar\r\n                        isVisible={this.state.isFilterOpen}\r\n                        isReset={this.state.isResetFilter}\r\n                        categoryList={this.state.categoriesInFilter}\r\n                        createdByList={this.state.lnDTeamMembersInFilter}\r\n                        onFilterBarCloseClick={this.onFilterBarClose}\r\n                        onFilterChange={this.onFilterChange}\r\n                    />\r\n                </Flex>\r\n                {this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders the mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\">\r\n                        <TabMenu defaultTabIndex={MandatoryEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    trigger={\r\n                                        <Button\r\n                                            text\r\n                                            iconOnly\r\n                                            icon={this.renderFilterButtonIcon()}\r\n                                            onClick={this.onMobileFilterButtonClick}\r\n                                        />}\r\n                                />\r\n                                <SearchIcon onClick={() => this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen })} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.isMobileSearchBoxOpen && !this.state.isFilterOpen &&\r\n                        <Flex className=\"search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                            <Input\r\n                                inverted\r\n                                fluid\r\n                                value={this.state.searchText}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex.Item push>\r\n                                <CloseIcon className=\"close-searchbox-icon\" onClick={this.onMobileSearchBoxClose} />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    }\r\n                </Flex>\r\n                {!this.state.isFilterOpen && this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <div className=\"container-div\">\r\n                <div className=\"discover-events-container\">\r\n                    {this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(DiscoverEvents));","// <copyright file=\"my-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Input, Loader, MenuButton, MenuProps, Provider, SearchIcon, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport UserEvents from \"../user-events-wrapper/user-events-wrapper\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport FilterBar from \"../filter-bar/filter-bar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\"\r\nimport { getEventsAsync } from \"../../api/user-events-api\";\r\nimport { Fabric, Icon } from 'office-ui-fabric-react';\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { clearMobileFilterLocalStorage } from \"../../helpers/mobile-filter-helper\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./my-events.css\";\r\n\r\ninterface IMyEventsState {\r\n    registeredEvents: Array<IEvent>,\r\n    completedEvents: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    userEventsContainerKey: number,\r\n    isLoadingEvents: boolean,\r\n    activeTabIndex: number | string | undefined,\r\n    isFilterOpen: boolean,\r\n    searchText: string,\r\n    filteredCategories: string,\r\n    filteredUsers: string,\r\n    sortByFilter: number,\r\n    categoriesInFilter: Array<ICategory>,\r\n    lnDTeamMembersInFilter: Array<ITeamsChannelMember>,\r\n    isResetFilter: boolean,\r\n    notification: IToastNotification,\r\n    isMobileView: boolean,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IMyEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** The tab index for 'Registered events' tab */\r\nconst RegisteredEventsTabIndex: number = 0;\r\n\r\n/** The tab index for 'Completed events' */\r\nconst CompletedEventsTabIndex: number = 1;\r\n\r\n/** Renders all events for user created by LnD team */\r\nclass MyEvents extends React.Component<IMyEventsProps, IMyEventsState> {\r\n    teamId: string;\r\n    localize: TFunction;\r\n    searchText: string;\r\n    timeout: number | null;\r\n    registeredEventsCount: number;\r\n    completedEventsCount: number;\r\n\r\n    constructor(props: IMyEventsProps) {\r\n        super(props);\r\n\r\n        this.teamId = \"\";\r\n        this.searchText = \"\";\r\n        this.localize = this.props.t;\r\n        this.timeout = null;\r\n        this.registeredEventsCount = -1;\r\n        this.completedEventsCount = -1;\r\n\r\n        this.state = {\r\n            registeredEvents: [],\r\n            completedEvents: [],\r\n            hasMoreEvents: false,\r\n            userEventsContainerKey: 0,\r\n            isLoadingEvents: true,\r\n            activeTabIndex: RegisteredEventsTabIndex,\r\n            isFilterOpen: false,\r\n            searchText: \"\",\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            categoriesInFilter: [],\r\n            lnDTeamMembersInFilter: [],\r\n            isResetFilter: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            isMobileView: false,\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n\r\n        this.loadEventCategories();\r\n        this.loadAllLnDTeamMembers();\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        let registeredEvents = this.getEventsAsync(EventSearchType.RegisteredEventsForUser);\r\n        let completedEvents = this.getEventsAsync(EventSearchType.CompletedEventsForUser);\r\n\r\n        Promise.all([registeredEvents, completedEvents])\r\n            .then((results) => {\r\n                this.setTotalEventsCount(EventSearchType.RegisteredEventsForUser, results[0].length);\r\n                this.setTotalEventsCount(EventSearchType.CompletedEventsForUser, results[1].length);\r\n            })\r\n            .finally(() => {\r\n                this.getEvents();\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    resize = () => {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ categoriesInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ lnDTeamMembersInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEventsAsync = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let response: any;\r\n\r\n        if (eventSearchType === EventSearchType.RegisteredEventsForUser) {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.RegisteredEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n        else {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.CompletedEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n\r\n        let result: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            result = response.data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets and loads the events details on UI \r\n     * @param eventSearchType The type of user events to load\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    loadEvents = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(eventSearchType, pageNumber);\r\n\r\n        if (events) {\r\n            switch (eventSearchType) {\r\n                case EventSearchType.RegisteredEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let registeredEvents = [...this.state.registeredEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            registeredEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            registeredEvents: registeredEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.RegisteredEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            registeredEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let completedEvents = [...this.state.completedEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            completedEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            completedEvents: completedEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.CompletedEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            completedEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n\r\n                if (eventSearchType === EventSearchType.RegisteredEventsForUser) {\r\n                    this.setState({ registeredEvents: [], hasMoreEvents: false });\r\n                }\r\n                else {\r\n                    this.setState({ completedEvents: [], hasMoreEvents: false });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ hasMoreEvents: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if ((!this.state.searchText || this.state.searchText.trim() === \"\") && !this.state.filteredCategories?.length && !this.state.filteredUsers?.length) {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.RegisteredEventsForUser:\r\n                    this.registeredEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForUser:\r\n                    this.completedEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on event\r\n     * @param eventDetails The event details\r\n     */\r\n    onEventClick = (eventDetails: IEvent) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/register-remove?eventId=${eventDetails.eventId}&teamId=${eventDetails.teamId}&isMobileView=${this.state.isMobileView}`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"eventDetailsStep1\"),\r\n        }, (error: any, result: any) => {\r\n                if (result && result.isSuccess) {\r\n                    let events: Array<IEvent> = this.state.registeredEvents ? [...this.state.registeredEvents] : [];\r\n\r\n                    let updatedRegisteredEvents: Array<IEvent> = events.filter((event: IEvent) => event.eventId !== eventDetails.eventId);\r\n                    this.registeredEventsCount -= 1;\r\n\r\n                    this.setState((prevState: IMyEventsState) => (\r\n                        {\r\n                            registeredEvents: updatedRegisteredEvents,\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                type: ActivityStatus.Success\r\n                            }\r\n                        }\r\n                    ));\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Get called when tab selection change */\r\n    onTabIndexChange = (event: MenuProps | undefined) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        this.setState({ isLoadingEvents: true, activeTabIndex: event?.activeIndex!, searchText: \"\", filteredCategories: \"\", filteredUsers: \"\", sortByFilter: SortBy.Recent, isResetFilter: true }, () => {\r\n            this.timeout = window.setTimeout(async () => {\r\n                if (event) {\r\n                    this.getEvents();\r\n                }\r\n            }, 700);\r\n        });\r\n    }\r\n\r\n    /** Get called when 'Enter' key pressed in 'Search events' textbox */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /** The event handler to toggle the state of filter bar */\r\n    onFilterBarToggle = () => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            isResetFilter: false\r\n        }));\r\n    }\r\n\r\n    /** The event handler called when click on filter icon and mobile mode is ON */\r\n    onMobileFilterButtonClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/mobile-filter`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"mobileFilterTitle\"),\r\n        }, (error: any, result: any) => {\r\n            if (result && result.isFilterStateChanged) {\r\n                let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                this.setState({\r\n                    filteredCategories: filteredCategories ? filteredCategories : \"\",\r\n                    filteredUsers: filteredUsers ? filteredUsers : \"\",\r\n                    sortByFilter: sortBy ? sortBy as unknown as number : 0\r\n                }, () => this.getEvents());\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Event handler called when click on close filter bar which closes it and clears all filters those were applied */\r\n    onFilterBarClose = (isFilterStateChanged: boolean) => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            isResetFilter: true\r\n        }), () => {\r\n                if (isFilterStateChanged) {\r\n                    this.getEvents();\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when to get events based on filtered values\r\n     * @param selectedCategories The selected categories in filter bar\r\n     * @param selectedUsers The selected users in filter bar\r\n     * @param sortBy The selected sort by value in filter bar\r\n     */\r\n    onFilterChange = (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => {\r\n        let filteredCategories: Array<string> = selectedCategories ? selectedCategories : [];\r\n        let filteredUsers: Array<string> = selectedUsers ? selectedUsers : [];\r\n\r\n        this.setState({\r\n            filteredCategories: filteredCategories.join(\";\"),\r\n            filteredUsers: filteredUsers.join(\";\"),\r\n            sortByFilter: sortBy\r\n        }, () => {\r\n            this.getEvents();\r\n        });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({ searchText: \"\" }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get events based on current tab selection\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IMyEventsState) =>\r\n                ({ isLoadingEvents: true, hasMoreEvents: false, userEventsContainerKey: prevState.userEventsContainerKey + 1, isResetFilter: false }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case RegisteredEventsTabIndex:\r\n                this.loadEvents(EventSearchType.RegisteredEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            case CompletedEventsTabIndex:\r\n                this.loadEvents(EventSearchType.CompletedEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.setState({ isLoadingEvents: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    renderTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"registered-user-events\",\r\n                    content: `${this.localize(\"registeredEventsTab\")} ${this.formatEventsCount(this.registeredEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"completed-user-events\",\r\n                    content: `${this.localize(\"completedEventsTab\")} ${this.formatEventsCount(this.completedEventsCount)}`\r\n                },\r\n            ]\r\n        );\r\n    }\r\n\r\n    /** Renders user events */\r\n    renderEvents = () => {\r\n        if (this.state.isLoadingEvents) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>;\r\n        }\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === RegisteredEventsTabIndex) {\r\n            events = [...this.state.registeredEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === CompletedEventsTabIndex) {\r\n            events = [...this.state.completedEvents];\r\n        }\r\n\r\n        if (!events || events.length === 0) {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Flex className={this.state.isFilterOpen ? \"filter-open\" : undefined}>\r\n                <UserEvents\r\n                    key={`my-events-${this.state.userEventsContainerKey}`}\r\n                    events={events}\r\n                    hasMoreEvents={this.state.hasMoreEvents}\r\n                    loadMoreEvents={this.getEvents}\r\n                    onClick={this.onEventClick}\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    renderFilterButtonIcon = () => {\r\n        if ((this.state.filteredCategories && this.state.filteredCategories.length > 0)\r\n            || (this.state.filteredUsers && this.state.filteredUsers.length > 0)) {\r\n            return <Icon iconName=\"FilterSolid\" />\r\n        }\r\n        else {\r\n            return <Icon iconName=\"Filter\" />\r\n        }\r\n    }\r\n\r\n    /** Renders the desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <TabMenu defaultTabIndex={RegisteredEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-medium\" : \"\"}\r\n                                    trigger={\r\n                                        <Button icon={this.renderFilterButtonIcon()}\r\n                                            content={this.localize(\"filterButtonText\")}\r\n                                            onClick={this.onFilterBarToggle}\r\n                                            data-testid=\"filterbutton\"\r\n                                        />}\r\n                                />\r\n                                <Input\r\n                                    inverted\r\n                                    value={this.state.searchText}\r\n                                    icon={<SearchIcon />}\r\n                                    iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                    placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                    input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                    onKeyUp={this.onSearchEvents}\r\n                                    onChange={this.onSearchTextChange}\r\n                                    data-testid=\"search_input\"\r\n                                />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <FilterBar\r\n                        isVisible={this.state.isFilterOpen}\r\n                        isReset={this.state.isResetFilter}\r\n                        categoryList={this.state.categoriesInFilter}\r\n                        createdByList={this.state.lnDTeamMembersInFilter}\r\n                        onFilterBarCloseClick={this.onFilterBarClose}\r\n                        onFilterChange={this.onFilterChange}\r\n                    />\r\n                </Flex>\r\n                {this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders the mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\">\r\n                        <TabMenu defaultTabIndex={RegisteredEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    trigger={\r\n                                        <Button\r\n                                            text\r\n                                            iconOnly\r\n                                            icon={this.renderFilterButtonIcon()}\r\n                                            onClick={this.onMobileFilterButtonClick}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <SearchIcon onClick={() => this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen })} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.isMobileSearchBoxOpen && !this.state.isFilterOpen &&\r\n                        <Flex className=\"search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                            <Input\r\n                                inverted\r\n                                fluid\r\n                                value={this.state.searchText}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex.Item push>\r\n                                <CloseIcon className=\"close-searchbox-icon\" onClick={this.onMobileSearchBoxClose} />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    }\r\n                </Flex>\r\n                {!this.state.isFilterOpen && this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <div className=\"container-div\">\r\n                <div className=\"my-events-container\">\r\n                    {this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(MyEvents));","// <copyright file=\"accordion-menu-checkboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Button, Provider, Divider, Checkbox } from \"@fluentui/react-northstar\";\r\nimport { SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuCheckboxesContentProps {\r\n    isOpen: boolean,\r\n    showSearchBar: boolean,\r\n    content: any,\r\n    disableClear: boolean,\r\n    selectedCount: number;\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void\r\n}\r\n\r\nconst MaxItemsToShowInFilter: number = 50;\r\n\r\nconst AccordionCheckboxesContent: React.FunctionComponent<IAccordionMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data, setCheckbox] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    const [searchedString, setSearchString] = React.useState(\"\");\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setcheckBoxClicked] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setFilterCheckboxes(props.content.checkboxes);\r\n    }, []);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: string, checked: boolean) => {\r\n        setcheckBoxClicked(true);\r\n\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        let checkCount: number = checkboxList.reduce((accumulator: number, checkbox: ICheckBoxItem) => {\r\n            return checkbox.isChecked ? accumulator + 1 : accumulator;\r\n        }, 0);\r\n\r\n        setdisableClear(checkCount <= 0);\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    const setFilterCheckboxes = (filterItems: any) => {\r\n        if (!filterItems) {\r\n            filterItems = [];\r\n        }\r\n\r\n        let items = [...filterItems];\r\n        let itemsToRender = items.slice(0, MaxItemsToShowInFilter);\r\n        setFilteredCheckboxes(itemsToRender);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            checkbox.isChecked = false\r\n            return checkbox;\r\n        });\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setdisableClear(true);\r\n        setcheckBoxClicked(true);\r\n    }\r\n\r\n    const onSearchChange = (text: string) => {\r\n        setSearchString(text);\r\n\r\n        if (text.trim().length > 0) {\r\n            let filteredItems = data.checkboxes.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(text.toLowerCase()) === true;\r\n            });\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(data.checkboxes);\r\n        }\r\n    }\r\n\r\n    const getSelectedCountString = () => {\r\n            return props.selectedCount.toString();\r\n    }\r\n\r\n    return (\r\n        props.isOpen ? \r\n            <Provider>\r\n                <div className=\"accordion-content-items-wrapper\">\r\n                    {props.showSearchBar && <div className=\"accordion-content-items-headerfooter\">\r\n                        <Input icon={<SearchIcon />} placeholder={localize(\"searchPlaceholder\")} value={searchedString} fluid onChange={(event: any) => onSearchChange(event.target.value)} />\r\n                    </div>}\r\n                    <Divider className=\"accordion-filter-popup-menu-divider\" />\r\n                    <div className=\"accordion-content-items-headerfooter\">\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className={props.selectedCount === 0 ? \"clear-button \" : \"clear-button enable-clear\"} size=\"small\" text onClick={() => deSelectAll()} content={props.selectedCount > 0 ? localize(\"clear\") + \"(\" + getSelectedCountString() + \")\" : localize(\"clear\")} />\r\n                        </Flex>\r\n                    </div>\r\n                    <div className=\"accordion-content-items-body\">\r\n                        {\r\n                            filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                                if (checkbox.title.trim().length) {\r\n                                    return (\r\n                                        <Flex gap=\"gap.small\">\r\n                                            <Checkbox className=\"checkbox-wrapper\" label={checkbox.checkboxLabel} key={checkbox.key} checked={checkbox.isChecked} onChange={(key, data: any) => onCheckboxValueChange(checkbox.key, data.checked)} />\r\n                                        </Flex>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n            : <></>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccordionCheckboxesContent);","// <copyright file=\"popup-menu-radiogroup-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, RadioGroup } from \"@fluentui/react-northstar\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuRadiogroupContentProps {\r\n    isOpen: boolean,\r\n    content: any,\r\n    selectedValue: number,\r\n    onRadiogroupStateChange: (selectedValue: number) => void\r\n}\r\n\r\nconst AccordionRadiogroupContent: React.FunctionComponent<IAccordionMenuRadiogroupContentProps> = props => {\r\n\r\n    return (\r\n        props.isOpen ?\r\n        <>\r\n            <div className=\"accordion-content-items-wrapper radio-popup-content\">\r\n                <div className=\"accordion-content-items-body\">\r\n                    {   \r\n                        <Flex gap=\"gap.small\">\r\n\t\t\t\t            <RadioGroup\r\n\t\t\t\t\t            defaultCheckedValue={props.selectedValue}\r\n\t\t\t\t\t            vertical\r\n\t\t\t\t\t            items={props.content.radioGroupItems}\r\n\t\t\t\t\t            onCheckedValueChange={(event, data: any) => props.onRadiogroupStateChange(data.value)}\r\n\t\t\t\t            />\r\n\t\t\t            </Flex>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n        : <></>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccordionRadiogroupContent);","// <copyright file=\"accordion-menu-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Flex } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport AccordionCheckboxesContent from \"./accordion-menu-checkboxes-content\";\r\nimport AccordionRadiogroupContent from \"./accordion-menu-radiogroup-content\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuWrapperProps {\r\n    isFilterOpen: boolean,\r\n    checkboxes?: Array<any>,\r\n    radioGroup?: Array<any>,\r\n    title: string,\r\n    selectedSortBy?: number,\r\n    showSearchBar?: boolean,\r\n    selectedCount: number;\r\n    onCheckboxStateChange: (typeState: Array<any>) => void,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    onFilterOpenChange: (isOpen: boolean) => void\r\n}\r\n\r\nconst AccordionMenuWrapper: React.FunctionComponent<IAccordionMenuWrapperProps> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const onAccordionOpenChange = () => {\r\n        setOpen(!open);\r\n        props.onFilterOpenChange(!open);\r\n    }\r\n\r\n    if (props.checkboxes) {\r\n        return (\r\n            <div className=\"accordion-container\">\r\n                <div className=\"accordion-main\" onClick={() => onAccordionOpenChange()}>\r\n                    <Flex><Flex.Item><Text content={props.title} /></Flex.Item><Flex.Item push><ChevronDownIcon /></Flex.Item></Flex>\r\n                </div>\r\n                <AccordionCheckboxesContent isOpen={props.isFilterOpen} disableClear={props.selectedCount === 0} selectedCount={props.selectedCount} showSearchBar={props.showSearchBar!} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.radioGroup) {\r\n        return (\r\n            <div className=\"accordion-container\">\r\n                <div className=\"accordion-main\" onClick={() => onAccordionOpenChange()}>\r\n                    <Flex><Flex.Item><Text content={props.title} /></Flex.Item><Flex.Item push><ChevronDownIcon /></Flex.Item></Flex>\r\n                </div>\r\n                <AccordionRadiogroupContent isOpen={props.isFilterOpen} selectedValue={props.selectedSortBy!} content={{ radioGroupItems: props.radioGroup, title: props.title }} onRadiogroupStateChange={props.onRadiogroupStateChange} />\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default React.memo(AccordionMenuWrapper);","// <copyright file=\"filter-bar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Provider, Loader, Button } from \"@fluentui/react-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport AccordionMenuWrapper from \"../../components/common/accordion-menu/accordion-menu-wrapper\";\r\nimport { ICheckBoxItem } from \"../../models/ICheckBoxItem\";\r\nimport { IRadioGroupItem } from \"../../models/IRadioGroupItem\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedSortBy } from \"../../helpers/localized-constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\n\r\nimport \"./mobile-filter-bar.css\";\r\n\r\ninterface IMobileFilterBarState {\r\n    categoryList: Array<ICheckBoxItem>;\r\n    createdByList: Array<ICheckBoxItem>;\r\n    selectedSortBy: number;\r\n    searchText: string;\r\n    screenWidth: number;\r\n    createdBySelectedCount: number;\r\n    categorySelectedCount: number;\r\n    isLoading: boolean;\r\n    isCategoriesFilterOpen: boolean,\r\n    isCreatedByFilterOpen: boolean,\r\n    isSortByFilterOpen: boolean\r\n}\r\n\r\ninterface IMobileFilterBarProps extends WithTranslation, IWithContext  {\r\n}\r\n\r\ninterface IPostType {\r\n    name: string;\r\n    id: number;\r\n    color: string;\r\n}\r\n\r\nclass MobileFilterBar extends React.Component<IMobileFilterBarProps, IMobileFilterBarState> {\r\n    localize: TFunction;\r\n    readonly sortByList: Array<IRadioGroupItem> = [];\r\n    isFilterStateChanged: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.sortByList = getLocalizedSortBy(this.localize).map((sortBy: IPostType) => { return { key: sortBy.id, label: sortBy.name, value: sortBy.id, name: sortBy.name } });\r\n        this.isFilterStateChanged = false;\r\n\r\n        this.state = {\r\n            selectedSortBy: this.sortByList[0].value,\r\n            categoryList: [],\r\n            createdByList: [],\r\n            searchText: \"\",\r\n            screenWidth: 800,\r\n            createdBySelectedCount: 0,\r\n            categorySelectedCount: 0,\r\n            isLoading: true,\r\n            isCategoriesFilterOpen: false,\r\n            isCreatedByFilterOpen: false,\r\n            isSortByFilterOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadFilterItems();\r\n\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n                this.setState({\r\n                    categoryList: response.data.map((value: ICategory) => {\r\n                        return { isChecked: false, key: value.categoryId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n                this.setState({\r\n                    createdByList: response.data.map((value: ITeamsChannelMember) => {\r\n                        return { isChecked: false, key: value.aadObjectId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Populates the filter items */\r\n    loadFilterItems = async () => {\r\n        let eventCategories = this.loadEventCategories();\r\n        let lndTeamMembers = this.loadAllLnDTeamMembers();\r\n\r\n        Promise.all([eventCategories, lndTeamMembers])\r\n            .finally(() => {\r\n                let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                let categoryList = [...this.state.categoryList];\r\n                let categorySelectedCount: number = 0;\r\n\r\n                if (filteredCategories?.trim().length && categoryList?.length > 0) {\r\n                    let categories = categoryList.filter((category: ICheckBoxItem) => filteredCategories && filteredCategories.indexOf(category.key) > -1);\r\n\r\n                    for (let i = 0; i < categories.length; i++) {\r\n                        categories[i].isChecked = true;\r\n                        categorySelectedCount += 1;\r\n                    }\r\n                }\r\n\r\n                let createdByList = [...this.state.createdByList];\r\n                let createdBySelectedCount: number = 0;\r\n\r\n                if (filteredUsers?.trim().length && createdByList?.length > 0) {\r\n                    let users = createdByList.filter((user: ICheckBoxItem) => filteredUsers && filteredUsers.indexOf(user.key) > -1);\r\n\r\n                    for (let i = 0; i < users.length; i++) {\r\n                        users[i].isChecked = true;\r\n                        createdBySelectedCount += 1;\r\n                    }\r\n                }\r\n\r\n                let sortByFilter = this.state.selectedSortBy;\r\n\r\n                if (sortBy?.trim().length) {\r\n                    let sortByValue = this.sortByList?.find((sortByItem: IRadioGroupItem) => sortByItem.key.toString() === sortBy?.trim());\r\n\r\n                    if (sortByValue) {\r\n                        sortByFilter = sortByValue.key;\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    categoryList,\r\n                    categorySelectedCount,\r\n                    createdByList,\r\n                    createdBySelectedCount,\r\n                    selectedSortBy: sortByFilter,\r\n                    isLoading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Category list' filter item when checkbox value changes.\r\n\t*@param categoryValues Array of 'category' checkboxes with updated user selection\r\n    */\r\n    onCategoryStateChange = (categoryValues: Array<ICheckBoxItem>) => {\r\n        let selectedCategories = categoryValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.setState({\r\n            categoryList: categoryValues,\r\n            categorySelectedCount: selectedCategories && selectedCategories.length\r\n        }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Created by' filter item when checkbox value changes.\r\n\t*@param createdByValues Array of 'created by' checkboxes with updated user selection\r\n    */\r\n    onCreatedByStateChange = (createdByValues: Array<ICheckBoxItem>) => {\r\n        let selectedUsers = createdByValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.setState({\r\n            createdByList: createdByValues,\r\n            createdBySelectedCount: selectedUsers ? selectedUsers.length : 0\r\n        }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of selected sort by item.\r\n\t*@param selectedSortBy Selected 'sort by' value\r\n    */\r\n    onSortByStateChange = (selectedSortBy: number) => {\r\n        this.setState({ selectedSortBy: selectedSortBy }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Removes all filters and hides filter bar.\r\n\t*@param event Event object for input\r\n    */\r\n    onCloseIconClick = () => {\r\n        if (this.state.searchText.trim().length > 0) {\r\n            this.setState({ searchText: \"\" });\r\n        }\r\n\r\n        if (this.state.categoryList.filter((sharedBy: ICheckBoxItem) => { return sharedBy.isChecked }).length) {\r\n            let updatedList = this.state.categoryList.map((sharedBy: ICheckBoxItem) => { sharedBy.isChecked = false; return sharedBy; });\r\n            this.setState({ categoryList: updatedList });\r\n        }\r\n\r\n        if (this.state.createdByList.filter((tag: ICheckBoxItem) => { return tag.isChecked }).length) {\r\n            let updatedList = this.state.createdByList.map((tag: ICheckBoxItem) => { tag.isChecked = false; return tag; });\r\n            this.setState({ createdByList: updatedList });\r\n        }\r\n\r\n        this.setState({ selectedSortBy: this.sortByList[0].value });\r\n    }\r\n\r\n    onCategoriesFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: true, isCreatedByFilterOpen: false, isSortByFilterOpen: false });\r\n        }\r\n        else {\r\n            this.setState({ isCategoriesFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onCreatedByFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: false, isCreatedByFilterOpen: true, isSortByFilterOpen: false });\r\n        }\r\n        else {\r\n            this.setState({ isCreatedByFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onSortByFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: false, isCreatedByFilterOpen: false, isSortByFilterOpen: true });\r\n        }\r\n        else {\r\n            this.setState({ isSortByFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onClearFilter = () => {\r\n        let categoryList = this.state.categoryList ? [...this.state.categoryList] : [];\r\n        let createdByList = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n        this.setState({\r\n            categoryList: categoryList.map((value: ICheckBoxItem) => {\r\n                value.isChecked = false;\r\n                return value;\r\n            }),\r\n            categorySelectedCount: 0,\r\n            createdByList: createdByList.map((value: ICheckBoxItem) => {\r\n                value.isChecked = false;\r\n                return value;\r\n            }),\r\n            createdBySelectedCount: 0,\r\n            selectedSortBy: SortBy.Recent\r\n        }, () => {\r\n            this.isFilterStateChanged = true;\r\n        });\r\n    }\r\n\r\n    onApplyFilter = () => {\r\n        let categories: Array<ICheckBoxItem> = this.state.categoryList ? [...this.state.categoryList] : [];\r\n\r\n        let selectedCategories = categories.filter((category: ICheckBoxItem) => {\r\n            return category.isChecked;\r\n        });\r\n\r\n        let selectedCategoryIds: Array<string> = selectedCategories.map((category: ICheckBoxItem) => { return category.key });\r\n        localStorage.setItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey, selectedCategoryIds.join(\";\"));\r\n\r\n        let users: Array<ICheckBoxItem> = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n        let selectedUsers = users.filter((user: ICheckBoxItem) => {\r\n            return user.isChecked;\r\n        });\r\n\r\n        let selectedUserIds: Array<string> = selectedUsers.map((user: ICheckBoxItem) => { return user.key });\r\n        localStorage.setItem(Resources.userEventsMobileFilteredUsersLocalStorageKey, selectedUserIds.join(\";\"));\r\n\r\n        localStorage.setItem(Resources.userEventsMobileSortByFilterLocalStorageKey, this.state.selectedSortBy.toString());\r\n\r\n        this.props.microsoftTeams.tasks.submitTask({ isFilterStateChanged: this.isFilterStateChanged });\r\n    }\r\n\r\n\t/**\r\n\t* Renders the component\r\n\t*/\r\n    public render(): JSX.Element {\r\n        if (this.state.isLoading) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>\r\n        }\r\n\r\n        return (\r\n            <Provider className=\"mobile-filter-bar-container\">\r\n                <Flex className=\"mobile-filter-buttons\">\r\n                    <Flex.Item push>\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                            <Button content={this.localize(\"mobileFilterClearButtonText\")} onClick={this.onClearFilter} />\r\n                            <Button primary content={this.localize(\"mobileFilterApplyButtonText\")} onClick={this.onApplyFilter} />\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <Flex className=\"filter-bar mobile-filter-wrapper\">\r\n                    <div className=\"menu-wrapper\">\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isCategoriesFilterOpen} title={`${this.localize(\"category\")} ${this.state.categorySelectedCount > 0 ? `(${this.state.categorySelectedCount} ${this.localize(\"selected\")})` : \"\"}`} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onFilterOpenChange={this.onCategoriesFilterOpenStateChange} />\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isCreatedByFilterOpen} title={`${this.localize(\"createdBy\")} ${this.state.createdBySelectedCount > 0 ? `(${this.state.createdBySelectedCount} ${this.localize(\"selected\")})` : \"\"}`} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} checkboxes={this.state.createdByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onFilterOpenChange={this.onCreatedByFilterOpenStateChange} />\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isSortByFilterOpen} title={this.sortByList[this.state.selectedSortBy!].name} selectedCount={this.state.createdBySelectedCount} selectedSortBy={this.state.selectedSortBy!} radioGroup={this.sortByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onFilterOpenChange={this.onSortByFilterOpenStateChange} />\r\n                    </div>\r\n                </Flex>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(MobileFilterBar));","// <copyright file=\"manage-events-menu.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { MenuButton, Button, MenuItemProps, MenuShorthandKinds, ShorthandCollection, BellIcon } from \"@fluentui/react-northstar\";\r\nimport { UserFriendsIcon, EditIcon, ArrowDownIcon, CloseIcon, MoreIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport moment from \"moment\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IManageEventsMenuProps extends WithTranslation {\r\n    eventDetails: IEvent,\r\n    onCloseRegistration: (eventId: string) => void,\r\n    onEditEvent: (eventId: string) => void,\r\n    onExportDetails: (eventId: string, eventName: string) => void,\r\n    onSendReminder: (eventId: string) => void,\r\n    onCancelEvent: (eventId: string) => void,\r\n    onDeleteDraftEvent: (eventId: string, eventName: string) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\n/**\r\n * This component renders menu based on event status\r\n * @param props The props of type IManageEventsMenu\r\n */\r\nconst ManageEventsMenu: React.FunctionComponent<IManageEventsMenuProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    /** Gets menu items for active events */\r\n    const getActiveEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <EditIcon outline />,\r\n            content: localize(\"editEventInformation\"),\r\n            onClick: () => props.onEditEvent(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            icon: <ArrowDownIcon />,\r\n            content: localize(\"exportRegistrationDetails\"),\r\n            onClick: () => props.onExportDetails(props.eventDetails.eventId, props.eventDetails.name)\r\n        },\r\n        {\r\n            icon: <BellIcon outline />,\r\n            content: localize(\"sendReminder\"),\r\n            onClick: () => props.onSendReminder(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            kind: \"divider\"\r\n        },\r\n        {\r\n            icon: <CloseIcon outline />,\r\n            content: localize(\"cancelEvent\"),\r\n            onClick: () => props.onCancelEvent(props.eventDetails.eventId)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu items for draft events */\r\n    const getDraftEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <EditIcon outline />,\r\n            content: localize(\"editEventInformation\"),\r\n            onClick: () => props.onEditEvent(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            kind: \"divider\"\r\n        },\r\n        {\r\n            icon: <CloseIcon outline />,\r\n            content: localize(\"deleteDraft\"),\r\n            onClick: () => props.onDeleteDraftEvent(props.eventDetails.eventId, props.eventDetails.name)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu items for completed events */\r\n    const getCompletedEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <ArrowDownIcon />,\r\n            content: localize(\"exportRegistrationDetails\"),\r\n            onClick: () => props.onExportDetails(props.eventDetails.eventId, props.eventDetails.name)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu based on event status */\r\n    const getMenuItems = () => {\r\n        switch (props.eventDetails.status) {\r\n            case EventStatus.Draft:\r\n                return getDraftEventsMenu;\r\n\r\n            case EventStatus.Active:\r\n                if (new Date() < moment.utc(props.eventDetails.endDate).local().toDate()) {\r\n                    if (props.eventDetails.isRegistrationClosed) {\r\n                        return getActiveEventsMenu;\r\n                    }\r\n\r\n                    getActiveEventsMenu.unshift(\r\n                        {\r\n                            icon: <UserFriendsIcon outline />,\r\n                            content: localize(\"closeRegistration\"),\r\n                            onClick: () => props.onCloseRegistration(props.eventDetails.eventId)\r\n                        });\r\n\r\n                    return getActiveEventsMenu;\r\n                }\r\n\r\n                return getCompletedEventsMenu;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MenuButton\r\n            trigger={<Button text iconOnly icon={<MoreIcon />} />}\r\n            menu={{\r\n                items: getMenuItems()\r\n            }}\r\n            position=\"before\"\r\n            className={ props.dir === LanguageDirection.Rtl ? \"ltr-direction\" : \"\"}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(ManageEventsMenu);","// <copyright file=\"manage-events-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets LnD team events\r\n * @param searchString The events to load with matching search text\r\n * @param pageCount The page count of which events to be fetched\r\n * @param eventSearchType The events of particular status type that need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventsAsync = async (searchString: string, pageCount: number, eventSearchType: number, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({\r\n        searchString: encodeURIComponent(searchString),\r\n        eventSearchType: eventSearchType,\r\n        teamId: teamId,\r\n        pageCount: pageCount\r\n    });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets event details\r\n * @param eventId The event ID of which details need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventAsync = async (eventId: string, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/Event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Closes the event registrations\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID of which registrations needs to be closed\r\n */\r\nexport const closeEventRegistrationsAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/CloseEventRegistrations`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.patch(url, null, config);\r\n}\r\n\r\n/**\r\n * Cancels an event to occur \r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID that needs to be cancelled\r\n */\r\nexport const cancelEventAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/CancelEvent`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.patch(url, null, config);\r\n}\r\n\r\n/**\r\n * \r\n * @param teamId The LnD team ID\r\n * @param eventId The draft event ID that needs to be deleted\r\n */\r\nexport const deleteDraftEventAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/delete-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.delete(url, config);\r\n}\r\n\r\n/**\r\n * Exports event details to CSV file\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID that of which details needs to be exported\r\n */\r\nexport const exportEventDetailsToCSV = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventfiles/ExportEventDetailsToCSV`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Sends reminder to the users registered for the event\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID\r\n */\r\nexport const sendReminder = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/SendReminder`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.post(url, null, config);\r\n}","// <copyright file=\"manage-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex, Table, Button, Input, Text, TableRowProps, Loader, SplitButton, MenuItemProps, List, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { AddIcon, SearchIcon, MoreIcon } from \"@fluentui/react-northstar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\";\r\nimport ManageEventsMenu from \"./manage-events-menu\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getEventsAsync, exportEventDetailsToCSV, sendReminder } from \"../../api/manage-events-api\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"../manage-events/manage-events.css\";\r\n\r\nconst DraftEventsTabIndex: number = 0;\r\nconst ActiveEventsTabIndex: number = 1;\r\nconst CompletedEventsTabIndex: number = 2;\r\n\r\ninterface IManageEventsState {\r\n    activeTabIndex: number | string,\r\n    draftEvents: Array<IEvent>,\r\n    activeEvents: Array<IEvent>,\r\n    completedEvents: Array<IEvent>,\r\n    isLoading: boolean,\r\n    infiniteScrollKey: number,\r\n    loadMoreEvents: boolean,\r\n    isInitialLoadComplete: boolean,\r\n    isMobileView: boolean,\r\n    notification: IToastNotification,\r\n    searchText: string,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IManageEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** This class manages all the events created by LnD team */\r\nclass ManageEvents extends React.Component<IManageEventsProps, IManageEventsState> {\r\n    readonly localize: TFunction;\r\n    draftEventsCount: number;\r\n    completedEventsCount: number;\r\n    activeEventsCount: number;\r\n    teamId: string;\r\n    timeout: number | null;\r\n    eventsScrollAreaRef: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n        this.timeout = null;\r\n        this.draftEventsCount = -1;\r\n        this.completedEventsCount = -1;\r\n        this.activeEventsCount = -1;\r\n        this.eventsScrollAreaRef = null;\r\n\r\n        this.state = {\r\n            activeTabIndex: ActiveEventsTabIndex,\r\n            draftEvents: [],\r\n            activeEvents: [],\r\n            completedEvents: [],\r\n            isLoading: true,\r\n            infiniteScrollKey: 0,\r\n            loadMoreEvents: false,\r\n            isInitialLoadComplete: false,\r\n            isMobileView: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            searchText: \"\",\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps= async (nextProps: IManageEventsProps) => {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n                if (this.activeEventsCount === -1 && this.draftEventsCount === -1 && this.completedEventsCount === -1) {\r\n                    this.activeEventsCount = this.draftEventsCount = this.completedEventsCount = 0;\r\n\r\n                    let activeEvents = await this.getEventsAsync(0, EventSearchType.ActiveEventsForTeam);\r\n                    let draftEvents = await this.getEventsAsync(0, EventSearchType.DraftEventsForTeam);\r\n                    let completedEvents = await this.getEventsAsync(0, EventSearchType.CompletedEventsForTeam);\r\n\r\n                    this.setTotalEventsCount(EventSearchType.ActiveEventsForTeam, activeEvents.length);\r\n                    this.setTotalEventsCount(EventSearchType.DraftEventsForTeam, draftEvents.length);\r\n                    this.setTotalEventsCount(EventSearchType.CompletedEventsForTeam, completedEvents.length);\r\n\r\n                    this.getEvents();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.onScreenSizeChange.bind(this));\r\n        this.onScreenSizeChange();\r\n    }\r\n\r\n    /** The HTTP GET call to get events of LnD team based on event status */\r\n    getEventsAsync = async (pageNumber: number, eventSearchType: EventSearchType) => {\r\n        let response = await getEventsAsync(this.state.searchText, pageNumber, eventSearchType, this.teamId);\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            events = response.data;\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    /** Loads the events details on UI */\r\n    loadEvents = async (pageNumber: number, eventSearchType: EventSearchType) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(pageNumber, eventSearchType);\r\n\r\n        if (events) {\r\n            let loadMoreEvents: boolean = events.length < Constants.lazyLoadEventsCount ? false : true;\r\n\r\n            switch (eventSearchType) {\r\n                case EventSearchType.DraftEventsForTeam:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.DraftEventsForTeam, events.length);\r\n                        this.setState({ draftEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let draftEvents = [...this.state.draftEvents];\r\n                        this.setState({ draftEvents: [...draftEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForTeam:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.CompletedEventsForTeam, events.length);\r\n                        this.setState({ completedEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let completedEvents = [...this.state.completedEvents];\r\n                        this.setState({ completedEvents: [...completedEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.ActiveEventsForTeam, events.length);\r\n                        this.setState({ activeEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let activeEvents = [...this.state.activeEvents];\r\n                        this.setState({ activeEvents: [...activeEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n            }\r\n\r\n            this.setState({ loadMoreEvents: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if (!this.state.searchText || this.state.searchText.trim() === \"\") {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.DraftEventsForTeam:\r\n                    this.draftEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForTeam:\r\n                    this.completedEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.ActiveEventsForTeam:\r\n                    this.activeEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets events based on currently selected tab\r\n     * @param pageNumber The page number for which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({ isLoading: true, loadMoreEvents: false, infiniteScrollKey: prevState.infiniteScrollKey + 1 }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case DraftEventsTabIndex:\r\n                this.loadEvents(pageNumber, EventSearchType.DraftEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n\r\n            case CompletedEventsTabIndex:\r\n                this.loadEvents(pageNumber, EventSearchType.CompletedEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.loadEvents(pageNumber, EventSearchType.ActiveEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats evetn's date and time in the format- {Date} {Start Time}-{End Time} => 05 Jun 2020, 13:00 - 16:00\r\n     * @param eventDetails\r\n     */\r\n    formatEventDateAndTime = (eventDetails: IEvent) => {\r\n        if (eventDetails) {\r\n            let eventDayMonthYear = moment.utc(eventDetails.startDate).local().format(\"DD MMM YYYY\");\r\n            let eventStartTime = moment.utc(eventDetails.startTime).local().format(\"HH:mm\");\r\n            let eventEndTime = moment.utc(eventDetails.endTime).local().format(\"HH:mm\");\r\n\r\n            return `${eventDayMonthYear}, ${eventStartTime} - ${eventEndTime}`;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when the event tab menu index gets changed\r\n     * @param event The event details\r\n     */\r\n    onTabMenuIndexChange = (event: any) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            searchText: \"\",\r\n            activeTabIndex: this.state.isMobileView ? event?.index! : event?.activeIndex!\r\n        });\r\n\r\n        this.timeout = window.setTimeout(async () => {\r\n            if (event) {\r\n                this.getEvents();\r\n            }\r\n        }, 700);\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on 'Close Registration' menu item of event table\r\n     * @param eventId The event ID of which the registration need to be closed\r\n     */\r\n    onCloseRegistration = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"closeRegistration\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/close-or-cancel-event?operationType=${EventOperationType.CloseRegistration}&eventId=${eventId}&teamId=${this.teamId}&isMobileView=${this.state.isMobileView}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                this.setState((prevState: IManageEventsState) => (\r\n                    {\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: this.localize(\"closeRegistrationSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success\r\n                        }\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    onEditEvent = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"editEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/create-event?eventId=${eventId}&isDraft=${this.state.activeTabIndex === 0 ? true : false}`,\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                if (result.isSuccess) {\r\n                    this.setState((prevState: IManageEventsState) =>\r\n                        ({\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: this.localize(\"updateEventSuccessfulMessage\"),\r\n                                type: ActivityStatus.Success\r\n                            },\r\n                            activeTabIndex: result.isCreateEvent ? ActiveEventsTabIndex : prevState.activeTabIndex\r\n                        }), () => {\r\n                            window.setTimeout(() => this.getEvents(), 2000);\r\n                        });\r\n                }\r\n                else {\r\n                    this.setState((prevState: IManageEventsState) =>\r\n                        ({\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: this.localize(\"updateEventFailureMessage\"),\r\n                                type: ActivityStatus.Error\r\n                            }\r\n                        }));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when sending reminder to the users of an event\r\n     * @param eventId The event ID\r\n     */\r\n    onSendReminder = async (eventId: string) => {\r\n        let response = await sendReminder(this.teamId, eventId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"sendReminderSuccessfulMessage\"),\r\n                        type: ActivityStatus.Success\r\n                    }\r\n                }));\r\n        }\r\n        else {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"sendReminderFailureMessage\"),\r\n                        type: ActivityStatus.Error\r\n                    }\r\n                }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on 'Cancel Event' menu item of event table\r\n     * @param eventId The event ID that need to be cancelled\r\n     */\r\n    onCancelEvent = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"cancelEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/close-or-cancel-event?operationType=${EventOperationType.CancelEvent}&eventId=${eventId}&teamId=${this.teamId}&isMobileView=${this.state.isMobileView}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                let activeEvents = this.state.activeEvents ? [...this.state.activeEvents] : [];\r\n                let updatedActiveEvents: Array<IEvent> = activeEvents.filter((event: IEvent) => event.eventId !== eventId);\r\n\r\n                this.activeEventsCount -= 1;\r\n\r\n                this.setState((prevState: IManageEventsState) => (\r\n                    {\r\n                        activeEvents: updatedActiveEvents,\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: this.localize(\"cancelEventSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success,\r\n                        }\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when deleting draft event\r\n     * @param eventId The draft event ID that needs to be deleted\r\n     */\r\n    onDeleteDraftEvent = (eventId: string, eventName: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"deleteEvent\"),\r\n            height: 200,\r\n            width: 400,\r\n            url: `${window.location.origin}/delete-draft?eventId=${eventId}&teamId=${this.teamId}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                let draftEvents = this.state.draftEvents ? [...this.state.draftEvents] : [];\r\n                let updatedDraftEvents: Array<IEvent> = draftEvents.filter((event: IEvent) => event.eventId !== eventId);\r\n\r\n                this.draftEventsCount -= 1;\r\n\r\n                this.setState((prevState: IManageEventsState) => ({\r\n                    draftEvents: updatedDraftEvents,\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"deleteDraftEvent\"),\r\n                        type: ActivityStatus.Success\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    onExportDetails = async (eventId: string, eventName: string) => {\r\n        let response = await exportEventDetailsToCSV(this.teamId, eventId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            const url = window.URL.createObjectURL(new Blob([\"\\ufeff\", response.data], {type: 'text/csv;charset=utf-8'}));\r\n            const downloadLink = document.createElement('a');\r\n            downloadLink.href = url;\r\n            downloadLink.setAttribute('download', `${eventName}.csv`);\r\n            downloadLink.click();\r\n\r\n            this.setState((prevState: IManageEventsState) => ({\r\n                notification: {\r\n                    id: prevState.notification.id + 1,\r\n                    message: this.localize(\"exportDetailsSuccessfulMessage\"),\r\n                    type: ActivityStatus.Success\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            this.setState((prevState: IManageEventsState) => ({\r\n                notification: {\r\n                    id: prevState.notification.id + 1,\r\n                    message: this.localize(\"exportDetailsFailureMessage\"),\r\n                    type: ActivityStatus.Error\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called after 'Enter' key press while searching events\r\n     * @param event\r\n     */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText?.length && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    getTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"draft-events\",\r\n                    content: `${this.localize(\"draftEvents\")} ${this.formatEventsCount(this.draftEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"active-events\",\r\n                    content: `${this.localize(\"activeEvents\")} ${this.formatEventsCount(this.activeEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"completed-events\",\r\n                    content: `${this.localize(\"completedEvents\")} ${this.formatEventsCount(this.completedEventsCount)}`\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    onEventCreated = (err: any, result: any) => {\r\n        if (result) {\r\n            if (result.isSuccess) {\r\n                this.setState((prevState: IManageEventsState) =>\r\n                    ({\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: result.isDraft ? this.localize(\"createDraftSuccessfulMessage\") : this.localize(\"createEventSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success\r\n                        },\r\n                        activeTabIndex: result.isDraft ? DraftEventsTabIndex : ActiveEventsTabIndex\r\n                    }), () => {\r\n                        window.setTimeout(() => this.getEvents(), 2000);\r\n                    });\r\n            }\r\n            else {\r\n                this.setState((prevState: IManageEventsState) =>\r\n                    ({\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: result.isDraft ? this.localize(\"createDraftFailureMessage\") : this.localize(\"createEventFailureMessage\"),\r\n                            type: ActivityStatus.Error\r\n                        }\r\n                    }));\r\n            }\r\n        }\r\n\r\n        this.props.microsoftTeams?.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n    }\r\n\r\n    /** Open task module for manage categories */\r\n    onManageCategoriesClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"manageCategories\"),\r\n            height: 600,\r\n            width: 900,\r\n            url: `${window.location.origin}/manage-categories`,\r\n        }, () => { });\r\n    }\r\n\r\n    /** Open task module for create event */\r\n    onCreateEventsClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"createEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/create-event`,\r\n        }, this.onEventCreated);\r\n    }\r\n\r\n    /** Called when screen size gets updated; which sets the state to indicate whether mobile view enabled */\r\n    onScreenSizeChange() {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({\r\n                searchText: \"\",\r\n            }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /** Gets event table header */\r\n    getEventsTableHeader = () => {\r\n        return ({\r\n            items: [\r\n                {\r\n                    content: this.localize(\"eventTitle\")\r\n                },\r\n                {\r\n                    content: this.localize(\"dateAndTime\"),\r\n                    design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"venue\"),\r\n                    design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"noOfRegistrations\"),\r\n                    design: { minWidth: \"12vw\", maxWidth: \"12vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"category\"),\r\n                    design: { minWidth: \"15vw\", maxWidth: \"15vw\" }\r\n                },\r\n                {\r\n                    design: { minWidth: \"5vw\", maxWidth: \"5vw\" }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the event type text in grid based on event type\r\n     * @param eventDetails The event details\r\n     */\r\n    getEventType = (eventDetails: IEvent) => {\r\n        if (eventDetails.type === EventType.InPerson) {\r\n            return eventDetails.venue;\r\n        }\r\n        else if (eventDetails.type === EventType.LiveEvent) {\r\n            return this.localize(\"liveEvent\");\r\n        }\r\n        else {\r\n            return this.localize(\"teamsMeeting\");\r\n        }\r\n    }\r\n\r\n    /** Renders events' table */\r\n    renderEvents() {\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === DraftEventsTabIndex) {\r\n            events = [...this.state.draftEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === CompletedEventsTabIndex) {\r\n            events = [...this.state.completedEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === ActiveEventsTabIndex) {\r\n            events = [...this.state.activeEvents];\r\n        }\r\n\r\n        if (events?.length > 0) {\r\n            if (this.state.isMobileView) {\r\n                let items: Array<any> = events.map((event: IEvent, index: number) => {\r\n                    return {\r\n                        key: `event-${index}`,\r\n                        content:\r\n                            <div className=\"manage-events-list-item-container\">\r\n                                <Flex space=\"between\">\r\n                                    <Flex column>\r\n                                        <Text content={event.name} weight=\"bold\" className=\"list-header\" />\r\n                                        <Flex className=\"list-elements\" vAlign=\"center\">\r\n                                            <Text className=\"category-name\" content={event.categoryName} weight=\"semibold\" />\r\n                                            <Text content=\"|\" weight=\"semibold\" className=\"divider\" />\r\n                                            <Text content={event.type === EventType.InPerson ? event.venue : this.localize(\"teamsMeeting\")} weight=\"semibold\" />\r\n                                        </Flex>\r\n                                        <Text className=\"list-elements\" content={this.formatEventDateAndTime(event)} />\r\n                                        <Text className=\"list-elements\" content={`${this.localize(\"noOfRegistrations\")}: ${event.registeredAttendeesCount}/${event.maximumNumberOfParticipants}`} />\r\n                                    </Flex>\r\n                                    <Flex.Item push>\r\n                                        {\r\n                                            event.status === EventStatus.Cancelled ? <Button disabled text iconOnly icon={<MoreIcon />} /> :\r\n                                                <ManageEventsMenu\r\n                                                    eventDetails={event}\r\n                                                    onCancelEvent={this.onCancelEvent}\r\n                                                    onCloseRegistration={this.onCloseRegistration}\r\n                                                    onEditEvent={this.onEditEvent}\r\n                                                    onExportDetails={this.onExportDetails}\r\n                                                    onSendReminder={this.onSendReminder}\r\n                                                    onDeleteDraftEvent={this.onDeleteDraftEvent}\r\n                                                    dir={this.props.dir}\r\n                                                />\r\n                                        }\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                            </div>\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <List className=\"manage-events-mobile-list-view\" items={items} />\r\n                );\r\n            }\r\n            else {\r\n                let rows: Array<TableRowProps> = events.map((event: IEvent) => {\r\n                    let eventVenue: string = this.getEventType(event);\r\n                    let eventDateAndTime: string = this.formatEventDateAndTime(event);\r\n\r\n                    return {\r\n                        key: `row-${event.eventId}`,\r\n                        items: [\r\n                            {\r\n                                content: <Text error={event.status === EventStatus.Cancelled ? true : false} content={event.name + (event.status === EventStatus.Cancelled ? ` (${this.localize(\"cancelledStatus\")})` : \"\")} weight=\"bold\" />,\r\n                                truncateContent: true,\r\n                                title: event.name\r\n                            },\r\n                            {\r\n                                content: eventDateAndTime,\r\n                                truncateContent: true,\r\n                                title: eventDateAndTime,\r\n                                design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                            },\r\n                            {\r\n                                content: eventVenue,\r\n                                truncateContent: true,\r\n                                title: eventVenue,\r\n                                design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                            },\r\n                            {\r\n                                content: `${event.registeredAttendeesCount}/${event.maximumNumberOfParticipants}`,\r\n                                design: { minWidth: \"12vw\", maxWidth: \"12vw\" }\r\n                            },\r\n                            {\r\n                                content: event.categoryName,\r\n                                truncateContent: true,\r\n                                title: event.categoryName,\r\n                                design: { minWidth: \"15vw\", maxWidth: \"15vw\" }\r\n                            },\r\n                            {\r\n                                content: event.status === EventStatus.Cancelled ? <Button disabled text iconOnly icon={<MoreIcon />} /> :\r\n                                    <ManageEventsMenu\r\n                                        eventDetails={event}\r\n                                        onCancelEvent={this.onCancelEvent}\r\n                                        onCloseRegistration={this.onCloseRegistration}\r\n                                        onEditEvent={this.onEditEvent}\r\n                                        onExportDetails={this.onExportDetails}\r\n                                        onSendReminder={this.onSendReminder}\r\n                                        onDeleteDraftEvent={this.onDeleteDraftEvent}\r\n                                        dir={this.props.dir}\r\n                                    />,\r\n                                design: { minWidth: \"5vw\", maxWidth: \"5vw\" }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Table className=\"manage-events-table\" header={this.getEventsTableHeader()} rows={rows} />\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <div className=\"container-manage-events\">\r\n                <Flex>\r\n                    <Flex.Item push>\r\n                        <Flex gap=\"gap.small\">\r\n                            <Button primary content={this.localize(\"manageCategories\")} onClick={this.onManageCategoriesClick} />\r\n                            <Button primary content={this.localize(\"createEvent\")} onClick={this.onCreateEventsClick} />\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <Flex className=\"mobile-menu-manage-events\" space=\"between\" vAlign=\"center\">\r\n                    <SplitButton\r\n                        button={this.getTabMenuItems()[this.state.activeTabIndex]}\r\n                        menu={{ activeIndex: this.state.activeTabIndex, items: this.getTabMenuItems() }}\r\n                        onMenuItemClick={(event: any, data: MenuItemProps | undefined) => this.onTabMenuIndexChange(data)}\r\n                        style={{ \"width\": \"40rem !important\" }}\r\n                        className=\"split-button\"\r\n                    />\r\n                    <Flex.Item push>\r\n                        <SearchIcon onClick={this.onMobileSearchBoxClose} />\r\n                    </Flex.Item>\r\n                </Flex>\r\n                { this.state.isMobileSearchBoxOpen &&\r\n                    <Flex className=\"manage-events-mobile-search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                        <Input\r\n                            inverted\r\n                            fluid\r\n                            placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                            input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                            onKeyUp={this.onSearchEvents}\r\n                            onChange={this.onSearchTextChange}\r\n                        />\r\n                        <Flex.Item push>\r\n                            <CloseIcon onClick={this.onMobileSearchBoxClose} />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                }\r\n                {\r\n                    this.state.isLoading\r\n                        ? <Loader className=\"loader\" />\r\n                        : <div key={this.state.infiniteScrollKey} className=\"manage-events-scroll-area-mobile\">\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.getEvents}\r\n                                hasMore={this.state.loadMoreEvents}\r\n                                initialLoad={false}\r\n                                loader={<div><Loader /></div>}\r\n                                useWindow={false}\r\n                            >\r\n                                {this.renderEvents()}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Renders desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <div className=\"container-manage-events\">\r\n                <Flex space=\"between\" vAlign=\"center\">\r\n                    <TabMenu\r\n                        tabItems={this.getTabMenuItems()}\r\n                        defaultTabIndex={ActiveEventsTabIndex}\r\n                        activeTabIndex={this.state.activeTabIndex!}\r\n                        onTabIndexChange={this.onTabMenuIndexChange}\r\n                    />\r\n                    <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                            <Input\r\n                                inverted\r\n                                value={this.state.searchText}\r\n                                icon={<SearchIcon />}\r\n                                iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex gap=\"gap.small\">\r\n                                <Button content={this.localize(\"manageCategories\")} onClick={this.onManageCategoriesClick} />\r\n                                <Button\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-medium\" : \"\"}\r\n                                    icon={<AddIcon />}\r\n                                    primary\r\n                                    content={<Text className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} content={this.localize(\"createEvent\")} />}\r\n                                    onClick={this.onCreateEventsClick}\r\n                                />\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                {\r\n                    this.state.isLoading\r\n                        ? <Loader className=\"loader\" />\r\n                        : <div key={this.state.infiniteScrollKey} className=\"manage-events-scroll-area\">\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.getEvents}\r\n                                hasMore={this.state.loadMoreEvents}\r\n                                initialLoad={false}\r\n                                loader={<div><Loader /></div>}\r\n                                useWindow={false}\r\n                            >\r\n                                {this.renderEvents()}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <div className=\"container-div\">\r\n                    { this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </Fabric>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ManageEvents));\r\n","// <copyright file=\"dark-customizations.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport {\r\n    createTheme,\r\n    ICustomizations,\r\n    IPalette,\r\n    ITheme,\r\n    IPersonaCoinStyleProps,\r\n    IPersonaCoinStyles,\r\n} from 'office-ui-fabric-react';\r\nimport { DatePickerStyles } from './date-picker-styles';\r\nimport { PeoplePickerItemStyles } from './people-picker-styles';\r\nimport { addVariants } from '@uifabric/variants';\r\n\r\nconst DarkDefaultPalette: Partial<IPalette> = {\r\n    themeDarker: '#82c7ff',\r\n    themeDark: '#6cb8f6',\r\n    themeDarkAlt: '#3aa0f3',\r\n    themePrimary: '#2899f5',\r\n    themeSecondary: '#0078d4',\r\n    themeTertiary: '#235a85',\r\n    themeLight: '#004c87',\r\n    themeLighter: '#043862',\r\n    themeLighterAlt: '#092c47',\r\n    black: '#ffffff',\r\n    neutralDark: '#faf9f8',\r\n    neutralPrimary: '#f3f2f1',\r\n    neutralPrimaryAlt: '#c8c6c4',\r\n    neutralSecondary: '#a19f9d',\r\n    neutralSecondaryAlt: '#979693',\r\n    neutralTertiary: '#797775',\r\n    neutralTertiaryAlt: '#484644',\r\n    neutralQuaternary: '#3b3a39',\r\n    neutralQuaternaryAlt: '#323130',\r\n    neutralLight: '#292827',\r\n    neutralLighter: '#252423',\r\n    neutralLighterAlt: '#201f1e',\r\n    white: '#1b1a19',\r\n    redDark: '#F1707B',\r\n};\r\n\r\nexport const DarkTheme: ITheme = createTheme({\r\n    palette: DarkDefaultPalette,\r\n    semanticColors: {\r\n        buttonText: DarkDefaultPalette.black,\r\n        buttonTextPressed: DarkDefaultPalette.neutralDark,\r\n        buttonTextHovered: DarkDefaultPalette.neutralPrimary,\r\n        disabledBackground: DarkDefaultPalette.neutralQuaternaryAlt,\r\n        inputBackgroundChecked: DarkDefaultPalette.themePrimary,\r\n        menuBackground: DarkDefaultPalette.neutralLighter,\r\n        menuItemBackgroundHovered: DarkDefaultPalette.neutralQuaternaryAlt,\r\n        menuItemBackgroundPressed: DarkDefaultPalette.neutralQuaternary,\r\n        menuDivider: DarkDefaultPalette.neutralTertiaryAlt,\r\n        menuIcon: DarkDefaultPalette.themeDarkAlt,\r\n        menuHeader: DarkDefaultPalette.black,\r\n        menuItemText: DarkDefaultPalette.neutralPrimary,\r\n        menuItemTextHovered: DarkDefaultPalette.neutralDark,\r\n    },\r\n    isInverted: true,\r\n});\r\n\r\nexport const PersonaCoinStyles = (props: IPersonaCoinStyleProps): Partial<IPersonaCoinStyles> => {\r\n    return {\r\n        initials: {\r\n            color: props.showUnknownPersonaCoin ? DarkTheme.palette.redDark : DarkTheme.palette.black,\r\n        },\r\n    };\r\n};\r\n\r\nexport const DarkCustomizations: ICustomizations = {\r\n    settings: {\r\n        theme: DarkTheme,\r\n    },\r\n    scopedSettings: {\r\n        Card: {\r\n            styles: {\r\n                root: {\r\n                    background: DarkTheme.palette.neutralLighter,\r\n                },\r\n            },\r\n        },\r\n        DatePicker: {\r\n            styles: DatePickerStyles,\r\n        },\r\n        DetailsList: {\r\n            styles: {\r\n                headerWrapper: {\r\n                    selectors: {\r\n                        '.ms-DetailsHeader': {\r\n                            borderColor: DarkTheme.palette.neutralQuaternary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        ActionButton: {\r\n            styles: {\r\n                root: {\r\n                    backgroundColor: DarkTheme.palette.white,\r\n                },\r\n                rootDisabled: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n                rootHovered: {\r\n                    backgroundColor: DarkTheme.palette.neutralLight,\r\n                },\r\n                rootPressed: {\r\n                    backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n            },\r\n        },\r\n        DetailsRow: {\r\n            styles: {\r\n                root: {\r\n                    selectors: {\r\n                        ':hover': {\r\n                            background: DarkTheme.palette.neutralLighter,\r\n                        },\r\n                    },\r\n                    borderColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n            },\r\n        },\r\n        Modal: {\r\n            styles: {\r\n                main: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n            },\r\n        },\r\n        Overlay: {\r\n            styles: {\r\n                root: {\r\n                    background: DarkTheme.palette.blackTranslucent40,\r\n                },\r\n            },\r\n        },\r\n        VerticalDivider: {\r\n            styles: {\r\n                divider: {\r\n                    backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n                wrapper: {\r\n                    Backgroundcolor: DarkTheme.palette.green,\r\n                },\r\n            },\r\n        },\r\n        DocumentCard: {\r\n            styles: {\r\n                root: {\r\n                    border: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                    selectors: {\r\n                        '.ms-DocumentCardPreview': {\r\n                            borderRight: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        DocumentCardPreview: {\r\n            styles: {\r\n                root: {\r\n                    borderBottom: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                    borderRight: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                },\r\n            },\r\n        },\r\n        Panel: {\r\n            styles: {\r\n                main: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n                closeButton: {\r\n                    color: DarkTheme.palette.neutralSecondary,\r\n                    selectors: {\r\n                        ':hover': {\r\n                            color: DarkTheme.palette.neutralPrimary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        PeoplePickerItem: {\r\n            styles: PeoplePickerItemStyles,\r\n        },\r\n        PersonaCoin: {\r\n            styles: PersonaCoinStyles,\r\n        },\r\n        Separator: {\r\n            styles: {\r\n                root: {\r\n                    selectors: {\r\n                        ':before': {\r\n                            backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                        },\r\n                        ':after': {\r\n                            backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        SpinButton: {\r\n            styles: {\r\n                inputTextSelected: {\r\n                    color: DarkTheme.palette.black,\r\n                    background: DarkTheme.palette.themePrimary,\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\naddVariants(DarkCustomizations.settings.theme);\r\n","// <copyright file=\"date-picker-styles.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { IDatePickerStyleProps, IDatePickerStyles } from 'office-ui-fabric-react';\r\nimport { DarkTheme } from './dark-customizations';\r\n\r\nexport const DatePickerStyles = (props: IDatePickerStyleProps): Partial<IDatePickerStyles> => {\r\n    const { disabled } = props;\r\n\r\n    const TextHoverStyle = () => {\r\n        return {\r\n            color: DarkTheme.palette.neutralPrimary,\r\n            backgroundColor: DarkTheme.palette.neutralQuaternary,\r\n        };\r\n    };\r\n    const TodayAndSelectedDayStyle = () => {\r\n        return {\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today:active': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n            },\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted': {\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day-button': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day--today': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n        };\r\n    };\r\n    const HoverStyles = () => {\r\n        return {\r\n            '.ms-DatePicker-day--highlighted:hover': {\r\n                backgroundColor: DarkTheme.semanticColors.listItemBackgroundChecked,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day-button:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--infocus:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-currentDecade:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-day--outfocus:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-monthAndYear:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-weekday:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-monthOption:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-header > .ms-DatePicker-currentYear:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-prevMonth:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextMonth:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-prevYear:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextYear:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-goToday:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n            },\r\n            '.ms-DatePicker-yearOption:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-prevDecade:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextDecade:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n        };\r\n    };\r\n    return {\r\n        callout: {\r\n            backgroundColor: DarkTheme.semanticColors.bodyBackground,\r\n            color: DarkTheme.palette.neutralPrimary,\r\n            selectors: {\r\n                '.ms-DatePicker-day--infocus': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-currentDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-day--outfocus': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthAndYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-weekday': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthOption': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-currentYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevMonth': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextMonth': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-goToday': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-goToday[disabled]': { display: 'none' },\r\n                '.ms-DatePicker-yearOption': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-yearOption--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthOption--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-day--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextDecade--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevDecade--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevYear--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextYear--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevMonth--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextMonth--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                ...TodayAndSelectedDayStyle(),\r\n                ...HoverStyles(),\r\n            },\r\n        },\r\n        icon: [\r\n            {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            disabled && {\r\n                color: DarkTheme.semanticColors.disabledBodyText,\r\n            },\r\n        ],\r\n        root: [\r\n            disabled && {\r\n                color: DarkTheme.semanticColors.disabledBodyText,\r\n            },\r\n        ],\r\n    };\r\n};\r\n","// <copyright file=\"people-picker-styles.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { IPeoplePickerItemSelectedStyleProps, IPeoplePickerItemSelectedStyles } from 'office-ui-fabric-react';\r\nimport { DarkTheme } from './dark-customizations';\r\n\r\nexport const PeoplePickerItemStyles = (\r\n    props: IPeoplePickerItemSelectedStyleProps,\r\n): Partial<IPeoplePickerItemSelectedStyles> => {\r\n    const { selected } = props;\r\n\r\n    return {\r\n        root: [\r\n            {\r\n                background: DarkTheme.palette.neutralQuaternaryAlt,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.neutralQuaternary,\r\n                    },\r\n                },\r\n            },\r\n            selected && {\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.themeSecondary,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        removeButton: [\r\n            {\r\n                background: DarkTheme.palette.neutralQuaternaryAlt,\r\n                color: DarkTheme.palette.neutralDark,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.neutralQuaternary,\r\n                        color: DarkTheme.palette.black,\r\n                    },\r\n                },\r\n            },\r\n            selected && {\r\n                background: DarkTheme.palette.themeSecondary,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.themeDark,\r\n                    },\r\n                    ':active': {\r\n                        color: DarkTheme.palette.black,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        subComponentStyles: {\r\n            persona: {\r\n                primaryText: [\r\n                    {\r\n                        color: DarkTheme.palette.neutralPrimary,\r\n                    },\r\n                    selected && {\r\n                        color: DarkTheme.palette.black,\r\n                        selectors: {\r\n                            ':hover': {\r\n                                color: DarkTheme.palette.black,\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n    };\r\n};\r\n","// <copyright file=\"default-customizations.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { createTheme, ICustomizations } from 'office-ui-fabric-react';\r\nimport { addVariants } from '@uifabric/variants';\r\n\r\nexport const DefaultCustomizations: ICustomizations = {\r\n    settings: {\r\n        theme: createTheme({}),\r\n    },\r\n    scopedSettings: {},\r\n};\r\n\r\naddVariants(DefaultCustomizations.settings.theme);\r\n","// <copyright file=\"date-picker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex } from '@fluentui/react-northstar';\r\nimport { useState } from \"react\";\r\nimport { DatePicker } from 'office-ui-fabric-react/lib/DatePicker';\r\nimport { Fabric, Customizer } from 'office-ui-fabric-react/lib';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { DarkCustomizations } from \"../../../helpers/dark-customizations\";\r\nimport { DefaultCustomizations } from \"../../../helpers/default-customizations\";\r\nimport Constants from \"../../../constants/resources\";\r\nimport \"./date-picker.css\";\r\n\r\ninitializeIcons();\r\n\r\ninterface IDateePickerProps {\r\n    selectedDate: Date,\r\n    onDateSelect: (startDate: Date) => void,\r\n    theme: string,\r\n    screenWidth: number,\r\n    minDate: Date,\r\n    disableSelectionForPastDate: boolean\r\n}\r\n\r\nconst StartDate: React.FC<IDateePickerProps> = props => {\r\n    let bgcolor = \"\";\r\n    let theme = props.theme;\r\n    let datePickerTheme;\r\n\r\n    if (theme === Constants.dark) {\r\n        bgcolor = \"dark-datepicker\";\r\n        datePickerTheme = DarkCustomizations\r\n    }\r\n    else if (theme === Constants.contrast) {\r\n        bgcolor = \"dark-datepicker\";\r\n        datePickerTheme = DarkCustomizations\r\n    }\r\n    else {\r\n        bgcolor = \"default-datepicker\";\r\n        datePickerTheme = DefaultCustomizations\r\n    }\r\n\r\n    const [selectedDate, setDate] = useState<Date | null | undefined>(props.selectedDate);\r\n    const [minDate, setMinDate] = useState<Date | null | undefined>(props.minDate);\r\n\r\n    React.useEffect(() => {\r\n        setDate(props.selectedDate);\r\n    }, [props.selectedDate]);\r\n\r\n    React.useEffect(() => {\r\n        setMinDate(props.minDate);\r\n    }, [props.minDate]);\r\n\r\n    /**\r\n       * Handle change event for cycle start date picker.\r\n       * @param date | cycle start date.\r\n       */\r\n    const onSelectStartDate = (date: Date | null | undefined): void => {\r\n        let startCycle = moment(date)\r\n            .set('hour', moment().hour())\r\n            .set('minute', moment().minute())\r\n            .set('second', moment().second());\r\n        props.onDateSelect(startCycle.toDate()!);\r\n        setDate(startCycle.toDate());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <Flex gap=\"gap.small\">\r\n                    <Fabric className=\"full-width\" dir=\"ltr\">\r\n                        <Customizer {...datePickerTheme}>\r\n                            <DatePicker\r\n                                className={bgcolor}\r\n                                label={''}\r\n                                showMonthPickerAsOverlay={true}\r\n                                minDate={minDate!}\r\n                                isMonthPickerVisible={true}\r\n                                value={selectedDate!}\r\n                                onSelectDate={onSelectStartDate}\r\n                                disabled={props.disableSelectionForPastDate}\r\n                            />\r\n                        </Customizer>\r\n                    </Fabric>\r\n                </Flex>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StartDate;\r\n","// <copyright file=\"timepicker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useState } from 'react';\r\nimport { Input, Popup, Flex, Dropdown, Text } from '@fluentui/react-northstar';\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport { LanguageDirection } from '../../../models/language-direction';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport \"./timepicker.css\";\r\n\r\ninterface ITimePickerProps {\r\n    onPickerClose: (hours: number, minutes: number) => void,\r\n    hours?: number,\r\n    minutes?: number,\r\n    minHours?: number,\r\n    minMinutes?: number,\r\n    isDisabled: boolean,\r\n    dir: LanguageDirection\r\n}\r\n\r\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [open, setOpen] = useState(false);\r\n    const [text, setText] = React.useState(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    const [hours, setHour] = React.useState(props.hours!.toString().padStart(2, '0'));\r\n    const [minutes, setMinute] = React.useState(props.minutes!.toString().padStart(2, '0'));\r\n    const [minHours, setMinHour] = React.useState(props.minHours!);\r\n    const [minMinutes, setMinMinute] = React.useState(props.minMinutes!);\r\n\r\n    const hoursItems: Array<string> = [];\r\n    const minutesItems: Array<string> = [];\r\n\r\n    React.useEffect(() => {\r\n        setHour(props.hours!.toString().padStart(2, '0'));\r\n        setText(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    }, [props.hours]);\r\n    React.useEffect(() => {\r\n        setMinute (props.minutes!.toString().padStart(2, '0'));\r\n        setText(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    }, [props.minutes]);\r\n    React.useEffect(() => {\r\n        setMinHour(props.minHours!);\r\n    }, [props.minHours]);\r\n    React.useEffect(() => {\r\n        setMinMinute(props.minMinutes!);\r\n    }, [props.minMinutes]);\r\n\r\n    for (var i = minHours ? minHours : 0 ; i < 24; i++) {\r\n        hoursItems.push(i.toString().padStart(2, '0'));\r\n    }\r\n    for (var i = 0; i < 60; i++) {\r\n        minutesItems.push(i.toString().padStart(2, '0'));\r\n    }\r\n\r\n    const onHourChange = {\r\n        onAdd: item => {\r\n            if (item) {\r\n                setHour(item);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const onMinuteChange = {\r\n        onAdd: item => {\r\n            if (item) {\r\n                setMinute(item);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const onOpenChange = (e, { open }: any) => {\r\n        setOpen(open)\r\n        if (!open) {\r\n            setText(hours + \":\" + minutes);\r\n            props.onPickerClose(parseInt(hours), parseInt(minutes));\r\n        }\r\n    }\r\n\r\n    const popupContent = (\r\n        <div className=\"timepicker-popup-style\">\r\n            <Flex gap=\"gap.small\">\r\n                <Flex.Item size=\"size.half\">\r\n                    <Text size={props.dir === LanguageDirection.Rtl ? \"medium\" : \"small\"} content={localize(\"hourPlaceholder\")} />\r\n                </Flex.Item>\r\n                <Flex.Item size=\"size.half\" className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-large\" : \"\"}>\r\n                    <Text size={props.dir === LanguageDirection.Rtl ? \"medium\" : \"small\"} content={localize(\"minutePlaceholder\")} />\r\n                </Flex.Item>\r\n            </Flex>\r\n            <Flex gap=\"gap.small\" styles={{marginTop:\"0.5rem\"}}>\r\n                <Flex.Item>\r\n                    <Dropdown\r\n                        className=\"timepicker-dropdown\"\r\n                        items={hoursItems}\r\n                        value={hours}\r\n                        placeholder={localize(\"hourPlaceholder\")}\r\n                        getA11ySelectionMessage={onHourChange}\r\n                    />\r\n                </Flex.Item>\r\n                <Flex.Item>\r\n                    <Dropdown\r\n                        className={props.dir === LanguageDirection.Rtl ? \"timepicker-dropdown rtl-right-margin-small\" : \"timepicker-dropdown\"}\r\n                        value={minutes}\r\n                        items={minutesItems}\r\n                        placeholder={localize(\"minutePlaceholder\")}\r\n                        getA11ySelectionMessage={onMinuteChange}\r\n                    />\r\n                </Flex.Item>\r\n            </Flex>\r\n        </div>\r\n    )\r\n    return (\r\n        <Popup\r\n            open={open}\r\n            trapFocus\r\n            onOpenChange={onOpenChange}\r\n            trigger={<Input\r\n                className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}\r\n                disabled={props.isDisabled} fluid value={text} icon={<Icon iconName=\"Clock\" />}\r\n                iconPosition={props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n            />}\r\n            content={popupContent}\r\n        />\r\n    )\r\n}\r\n\r\nTimePicker.defaultProps = {\r\n    hours: 0,\r\n    minutes: 0\r\n};","// <copyright file=\"color-picker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React from 'react';\r\nimport { SwatchColorPicker } from '@fluentui/react/lib';\r\nimport Resources from '../../../constants/resources';\r\nimport \"./color-picker.css\";\r\n\r\ninterface IColorPickerProps {\r\n    onColorChange: (id?: string, color?: string) => void,\r\n    selectedColor?: string,\r\n}\r\n\r\nexport const ColorPicker: React.FunctionComponent<IColorPickerProps> = props => {\r\n    const [selectedId, setSelectedId] = React.useState<string | undefined>();\r\n    const [divKey, setDivKey] = React.useState<number>(1);\r\n\r\n    React.useEffect(() => {\r\n        var selectedIdFound = Resources.colorCells.find(x => x.color === props.selectedColor);\r\n        setSelectedId(selectedIdFound?.id);\r\n        setDivKey(divKey! + 1);\r\n    }, [props.selectedColor]);\r\n\r\n    return (\r\n        <div className=\"color-picker\" key={divKey}>\r\n            <SwatchColorPicker columnCount={5} cellShape={'circle'} colorCells={Resources.colorCells} selectedId={selectedId} onColorChanged={props.onColorChange }/>\r\n        </div>\r\n    );\r\n}","// <copyright file=\"create-event-step1.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { Button, Dropdown, ExclamationCircleIcon, FilesUploadIcon, Flex, Input, Text, TextArea, Image as FluentImage } from '@fluentui/react-northstar';\r\nimport moment from \"moment-timezone\";\r\nimport { TFunction } from \"i18next\";\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { uploadEventImage, searchEventAsync } from \"../../api/create-event-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport Resources, { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { saveEventAsDraftAsync } from \"../../helpers/event-helper\";\r\nimport { getLocalizedEventTypes } from \"../../helpers/localized-constants\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport StartDate from \"../common/date-picker/datepicker\";\r\nimport { TimePicker } from \"../common/time-picker/timepicker\";\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { ColorPicker } from \"../common/color-picker/color-picker\";\r\nimport { LanguageDirection } from '../../models/language-direction';\r\n\r\ninterface ICreateEventsStep1Props extends WithTranslation, IWithContext {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n}\r\n\r\ninterface ICreateEventsStep1State {\r\n    theme: string,\r\n    screenWidth: number,\r\n    projectStartDate: number,\r\n    isPhotoValid: boolean,\r\n    isColorValid: boolean,\r\n    isPhotoDimentionsValid: boolean,\r\n    isNameValid: boolean,\r\n    isEventNameExisting:boolean,\r\n    isMeetingLinkValid: boolean,\r\n    isDescriptionValid: boolean,\r\n    isVenueValid: boolean,\r\n    isEventTypeValid: boolean,\r\n    isEventCategoryValid: boolean,\r\n    isMaxNoofParticipantsValid: boolean,\r\n    isTimeValid: boolean,\r\n    eventDetails: IEvent,\r\n    eventTypes: Array<IConstantDropdownItem>,\r\n    categories: Array<IConstantDropdownItem>,\r\n    selectedEventType: ISelectedDropdownItem,\r\n    selectedCategory: ISelectedDropdownItem,\r\n    imageUploadLoader: boolean,\r\n    isLoading: boolean,\r\n    isValidatingStep1: boolean,\r\n    inputKey: number\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep1 extends React.Component<ICreateEventsStep1Props, ICreateEventsStep1State> {\r\n    readonly localize: TFunction;\r\n    // Create a reference to the hidden file input element\r\n    inputReference: any;\r\n    teamId: string;\r\n    timeZone: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        let eventTypes = getLocalizedEventTypes(this.localize);\r\n        window.addEventListener(\"resize\", this.update);\r\n        this.inputReference = React.createRef();\r\n        let date = new Date();\r\n        this.teamId = \"\";\r\n        this.timeZone = moment.tz.guess();\r\n\r\n        this.state = {\r\n            imageUploadLoader: false,\r\n            inputKey: 1,\r\n            isLoading: false,\r\n            categories: this.props.eventPageState.categories.length > 0 ? this.props.eventPageState.categories : new Array<IConstantDropdownItem>(),\r\n            theme: \"\",\r\n            eventTypes: eventTypes,\r\n            screenWidth: window.innerWidth,\r\n            projectStartDate: date.setDate(date.getDate() + 1),\r\n            isPhotoValid: true,\r\n            isColorValid: true,\r\n            isEventNameExisting: false,\r\n            isPhotoDimentionsValid: true,\r\n            isNameValid: true,\r\n            isDescriptionValid: true,\r\n            isTimeValid: true,\r\n            isVenueValid: true,\r\n            isMeetingLinkValid: true,\r\n            isEventTypeValid: true,\r\n            isEventCategoryValid: true,\r\n            isMaxNoofParticipantsValid: true,\r\n            isValidatingStep1: false,\r\n            selectedEventType: this.props.eventPageState.eventDetails.type === undefined ? {\r\n                key: EventType.Teams.toString(), header: eventTypes.find((event) => event.id === EventType.Teams)!.name!\r\n            } : {\r\n                    key: eventTypes.find((event) => event.id === this.props.eventPageState.eventDetails.type)!.id.toString(), header: eventTypes.find((event) => event.id === this.props.eventPageState.eventDetails.type)!.name!\r\n                },\r\n            selectedCategory: this.props.eventPageState.selectedCategory!,\r\n            eventDetails: { ...this.props.eventPageState.eventDetails }\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps: ICreateEventsStep1Props) {\r\n        if (nextProps.eventPageState.categories !== this.props.eventPageState.categories) {\r\n            this.setState({ categories: nextProps.eventPageState.categories });\r\n        }\r\n\r\n        if (nextProps.eventPageState.eventDetails !== this.props.eventPageState.eventDetails) {\r\n            this.setState({ eventDetails: { ...nextProps.eventPageState.eventDetails } });\r\n        }\r\n\r\n        if (nextProps.eventPageState.selectedCategory !== this.props.eventPageState.selectedCategory) {\r\n            this.setState({ selectedCategory: nextProps.eventPageState.selectedCategory! });\r\n        }\r\n\r\n        if (nextProps.teamsContext && nextProps.teamsContext !== this.props.teamsContext) {\r\n            this.setState({ theme: nextProps.teamsContext.theme! });\r\n            this.teamId = nextProps.teamsContext.teamId!;\r\n        }\r\n    }\r\n\r\n    /** Update the screen width for screen resize */\r\n    update = () => {\r\n        this.setState({\r\n            screenWidth: window.innerWidth\r\n        });\r\n    };\r\n\r\n    /**\r\n    * Function for applying validation on the fields for save as draft functionality\r\n    */\r\n    checkIfSaveAsDraftAllowed = () => {\r\n        let eventValidationStatus = { isPhotoValid: true, isColorValid: true, isNameValid: true, isDescriptionValid: true, isEventTypeValid: true, isEventCategoryValid: true, isVenueValid: true, isMaxNoofPartipantsValid: true, isMeetingLinkValid: true };\r\n\r\n        if (this.state.eventDetails.name == \"\" || this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            eventValidationStatus.isNameValid = false;\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoValid: eventValidationStatus.isPhotoValid,\r\n            isColorValid: eventValidationStatus.isColorValid,\r\n            isNameValid: eventValidationStatus.isNameValid,\r\n            isDescriptionValid: eventValidationStatus.isDescriptionValid,\r\n            isEventTypeValid: eventValidationStatus.isEventTypeValid,\r\n            isEventCategoryValid: eventValidationStatus.isEventCategoryValid,\r\n            isVenueValid: eventValidationStatus.isVenueValid,\r\n            isMaxNoofParticipantsValid: eventValidationStatus.isMaxNoofPartipantsValid,\r\n            isMeetingLinkValid: eventValidationStatus.isMeetingLinkValid\r\n        });\r\n\r\n        if (eventValidationStatus.isPhotoValid && eventValidationStatus.isColorValid && eventValidationStatus.isNameValid &&\r\n            eventValidationStatus.isDescriptionValid && eventValidationStatus.isEventTypeValid &&\r\n            eventValidationStatus.isEventCategoryValid && eventValidationStatus.isVenueValid &&\r\n            eventValidationStatus.isMaxNoofPartipantsValid && eventValidationStatus.isMeetingLinkValid &&\r\n            !this.state.isEventNameExisting) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Function for applying validation on the fields before moving onto next step in event creation\r\n    */\r\n    checkIfNextAllowed = async () => {\r\n        let eventValidationStatus = { isTimeValid: true, isPhotoValid: true, isColorValid: true, isNameValid: true, isDescriptionValid: true, isEventTypeValid: true, isEventCategoryValid: true, isVenueValid: true, isMaxNoofPartipantsValid: true, isMeetingLinkValid: true };\r\n\r\n        if (!this.state.eventDetails.photo && !this.state.eventDetails.selectedColor) {\r\n            eventValidationStatus.isPhotoValid = false;\r\n            eventValidationStatus.isColorValid = false;\r\n        }\r\n\r\n        if (this.state.eventDetails.name.trim() == \"\" || this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            eventValidationStatus.isNameValid = false;\r\n        }\r\n\r\n        let isEventNameAlreadyExists: boolean = false;\r\n\r\n        if (eventValidationStatus.isNameValid) {\r\n            // Checking whether event name already exists-\r\n            // - creating a new event\r\n            // - updating a event after name changed\r\n            if (!this.props.eventPageState.isEdit || (this.props.eventPageState.eventDetails.name !== this.state.eventDetails.name.trim())) {\r\n                isEventNameAlreadyExists = await this.checkEventName();\r\n            }\r\n        }\r\n\r\n        if (this.state.eventDetails.description.trim() == \"\" || this.state.eventDetails.description.length > Resources.eventDescriptionMaxLength) {\r\n            eventValidationStatus.isDescriptionValid = false;\r\n        }\r\n        if (!this.state.eventDetails.type) {\r\n            eventValidationStatus.isEventTypeValid = false;\r\n        }\r\n        if (!this.state.eventDetails.categoryId) {\r\n            eventValidationStatus.isEventCategoryValid = false;\r\n        }\r\n        if (this.state.eventDetails.type === EventType.InPerson && this.state.eventDetails.venue == \"\") {\r\n            eventValidationStatus.isVenueValid = false;\r\n        }\r\n        if (!this.state.eventDetails.maximumNumberOfParticipants) {\r\n            eventValidationStatus.isMaxNoofPartipantsValid = false;\r\n        }\r\n        if (this.state.eventDetails.type === EventType.LiveEvent && (this.state.eventDetails.meetingLink == \"\" || !this.state.eventDetails.meetingLink.match(Resources.validUrlRegExp))) {\r\n            eventValidationStatus.isMeetingLinkValid = false;\r\n        }\r\n\r\n        if (this.checkEventAlreadyStarted()) {\r\n            if ((!this.state.eventDetails!.startTime || !this.state.eventDetails!.endTime) || (this.state.eventDetails!.startTime! >= this.state.eventDetails!.endTime!)) {\r\n                eventValidationStatus.isTimeValid = false;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoValid: eventValidationStatus.isPhotoValid,\r\n            isColorValid: eventValidationStatus.isColorValid,\r\n            isNameValid: eventValidationStatus.isNameValid,\r\n            isDescriptionValid: eventValidationStatus.isDescriptionValid,\r\n            isEventTypeValid: eventValidationStatus.isEventTypeValid,\r\n            isEventCategoryValid: eventValidationStatus.isEventCategoryValid,\r\n            isVenueValid: eventValidationStatus.isVenueValid,\r\n            isMaxNoofParticipantsValid: eventValidationStatus.isMaxNoofPartipantsValid,\r\n            isMeetingLinkValid: eventValidationStatus.isMeetingLinkValid,\r\n            isTimeValid: eventValidationStatus.isTimeValid,\r\n            isEventNameExisting: isEventNameAlreadyExists,\r\n            isValidatingStep1: false\r\n        });\r\n\r\n        if (eventValidationStatus.isPhotoValid && eventValidationStatus.isColorValid && eventValidationStatus.isNameValid &&\r\n            eventValidationStatus.isDescriptionValid && eventValidationStatus.isEventTypeValid &&\r\n            eventValidationStatus.isEventCategoryValid && eventValidationStatus.isVenueValid &&\r\n            eventValidationStatus.isMaxNoofPartipantsValid && eventValidationStatus.isMeetingLinkValid &&\r\n            eventValidationStatus.isTimeValid && !this.state.isEventNameExisting) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** Check whether event start date is less than current date while editing an event */\r\n    checkEventAlreadyStarted = () => {\r\n        return !(this.props.eventPageState.isEdit && moment.utc(this.state.eventDetails.startDate).local().toDate() < new Date());\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto next event-step\r\n    */\r\n    nextBtnClick = async () => {\r\n        this.setState({ isValidatingStep1: true });\r\n\r\n        var isSubmitAllowed = await this.checkIfNextAllowed();\r\n        if (isSubmitAllowed) {\r\n            let modifiedState = { ...this.props.eventPageState };\r\n            modifiedState.eventDetails = this.state.eventDetails;\r\n            modifiedState.selectedCategory = this.state.selectedCategory;\r\n            modifiedState.selectedEvent = this.state.selectedEventType;\r\n            modifiedState.categories = this.state.categories;\r\n\r\n            this.props.navigateToPage(2, modifiedState);\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Event handler on selecting start date\r\n    */\r\n    setStartDate = (date: Date) => {\r\n        let eventDetails = this.state.eventDetails;\r\n        eventDetails.startDate = date;\r\n        eventDetails.endDate = date;\r\n        this.setState({ eventDetails: eventDetails });\r\n    }\r\n\r\n    /**\r\n    * Event handler on selecting end date\r\n    */\r\n    setEndDate = (date: Date) => {\r\n        let eventDetails = this.state.eventDetails;\r\n        eventDetails.endDate = date;\r\n        this.setState({ eventDetails: eventDetails });\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid name\r\n    */\r\n    getNameError = () => {\r\n        if (!this.state.isNameValid) {\r\n            return (<Text data-testid=\"event_name_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else if (this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            return (<Text data-testid=\"event_name_max_error\" content={this.localize(\"eventNameMaxCharError\")} error />);\r\n        }\r\n        else if (this.state.isEventNameExisting) {\r\n            return (<Text content={this.localize(\"eventNameAlreadyExists\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fecthing the validation message for valid event team's meeting link\r\n    */\r\n    getMeetingLinkError = () => {\r\n        if (!this.state.isMeetingLinkValid) {\r\n            return (<Text data-testid=\"event_link_req_error\" content={this.localize(\"validUrlErrorMessage\")} error />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid description\r\n    */\r\n    getDescriptionError = () => {\r\n        if (!this.state.isDescriptionValid) {\r\n            return (<Text data-testid=\"event_desc_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        if (this.state.eventDetails.description.length > Resources.eventDescriptionMaxLength) {\r\n            return (<Text data-testid=\"event_desc_max_error\" content={this.localize(\"eventDescriptionMaxCharError\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid venue\r\n    */\r\n    getVenueError = () => {\r\n        if (!this.state.isVenueValid) {\r\n            return (<Text data-testid=\"event_venue_req_error\" content={this.localize(\"required\")} error size=\"medium\" />);\r\n        }\r\n        if (this.state.eventDetails.venue.length > Resources.eventVenueMaxLength) {\r\n            return (<Text data-testid=\"event_venue_max_error\" content={this.localize(\"eventVenueMaxCharError\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid event type\r\n    */\r\n    getEventTypeError = () => {\r\n        if (!this.state.isEventTypeValid) {\r\n            return (<Text data-testid=\"event_type_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid event category\r\n    */\r\n    getEventCategoryError = () => {\r\n        if (!this.state.isEventCategoryValid) {\r\n            return (<Text data-testid=\"event_category_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid image\r\n    */\r\n    getPhotoError = () => {\r\n        if (!this.state.isPhotoValid) {\r\n            return (<Text data-testid=\"event_photo_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else if (!this.state.isPhotoDimentionsValid) {\r\n            return (<Text content={this.localize(\"invalidImageDimensions\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid mnaximum no of participants\r\n    */\r\n    getMaximumNoofParticipantsError = () => {\r\n        if (!this.state.isMaxNoofParticipantsValid) {\r\n            return (<Text data-testid=\"event_max_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on name change\r\n    */\r\n    onEventNameChange = (eventName: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, name: eventName },\r\n            isNameValid: true,\r\n            isEventNameExisting: false\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on description change\r\n    */\r\n    onEventDescriptionChange = (eventDescription: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, description: eventDescription },\r\n            isDescriptionValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on venue change\r\n    */\r\n    onEventVenueChange = (eventVenue: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, venue: eventVenue },\r\n            isVenueValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on live event url change\r\n    */\r\n    onLiveEventUrlChange = (eventUrl: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, meetingLink: eventUrl },\r\n            isMeetingLinkValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on maximum number of participants change\r\n    */\r\n    onMaxNoOfParticipantsChange = (eventMaxNoofParticipants: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, maximumNumberOfParticipants: parseInt(eventMaxNoofParticipants) },\r\n            isMaxNoofParticipantsValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on start time change\r\n    */\r\n    onStartTimeChange = (hours: number, min: number) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, startTime: new Date(new Date().setHours(hours, min)), endTime: this.state.eventDetails.endTime === undefined ? new Date(new Date().setHours(hours, min + 15)) : this.state.eventDetails.endTime }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on end time change\r\n    */\r\n    onEndTimeChange = (hours: number, min: number) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, endTime: new Date(new Date().setHours(hours, min)) }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Function calling a click event on a hidden file input\r\n    */\r\n    handleUploadClick = (event: any) => {\r\n        this.inputReference.current.click();\r\n    };\r\n\r\n    /**\r\n     * The event handler called when the selected color gets changed\r\n     * @param id The color Id\r\n     * @param color The color code\r\n     */\r\n    onColorChange = (id?: string | undefined, color?: string | undefined) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, selectedColor: color, photo: \"\" }, inputKey: this.state.inputKey + 1, isPhotoDimentionsValid: true, isPhotoValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Function called for uploading image on azure\r\n    */\r\n    uploadImage = async (formData: FormData) => {\r\n        this.setState({ imageUploadLoader: true });\r\n        let response = await uploadEventImage(formData, this.teamId);\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            this.setState((prevState: ICreateEventsStep1State) => ({\r\n                eventDetails: { ...prevState.eventDetails, photo: response.data, selectedColor: \"\" },\r\n                imageUploadLoader: false\r\n            }));\r\n        }\r\n        else {\r\n            this.setState({ imageUploadLoader: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for image change\r\n    */\r\n    handleChange = (event: any) => {\r\n        const fileUploaded = event.target.files[0];\r\n        if (fileUploaded) {\r\n            let isValid = true;\r\n            let img = new Image\r\n            img.src = window.URL.createObjectURL(fileUploaded)\r\n            img.onload = () => {\r\n                if (img.width < 850 || img.height < 290 || img.width > 900 || img.height > 310) {\r\n                    isValid = false;\r\n                } else {\r\n                    const formData = new FormData();\r\n                    formData.append(\r\n                        \"fileInfo\",\r\n                        fileUploaded,\r\n                        fileUploaded.name\r\n                    );\r\n                    this.uploadImage(formData);\r\n                }\r\n\r\n                this.setState({ isPhotoDimentionsValid: isValid });\r\n            }\r\n        }\r\n    };\r\n\r\n    /** Validate whether the event name already exists */\r\n    checkEventName = async () => {\r\n        let response = await searchEventAsync(this.state.eventDetails.name);\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            let isEventAlreadyExists = response.data.some((event: IEvent) => event.name.toLowerCase() === this.state.eventDetails.name.trim().toLowerCase());\r\n\r\n            return isEventAlreadyExists;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        let result = this.checkIfSaveAsDraftAllowed();\r\n        if (result) {\r\n            this.setState({ isLoading: true });\r\n            let modifiedState = { ...this.props.eventPageState };\r\n            modifiedState.eventDetails = this.state.eventDetails;\r\n            modifiedState.selectedCategory = this.state.selectedCategory;\r\n            modifiedState.selectedEvent = this.state.selectedEventType;\r\n            modifiedState.categories = this.state.categories;\r\n\r\n            let result = await saveEventAsDraftAsync(modifiedState, this.teamId);\r\n            if (result) {\r\n                this.props.microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n            }\r\n            else {\r\n                this.setState({ isLoading: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        const onEventTypeChange = {\r\n            onAdd: (item: any) => {\r\n                this.setState((prevState: ICreateEventsStep1State) => ({\r\n                    eventDetails: { ...prevState.eventDetails, type: item.key },\r\n                    isEventTypeValid: true,\r\n                    selectedEventType: item\r\n                }));\r\n                return \"\";\r\n            }\r\n        }\r\n        const onEventCategoryChange = (item: any) => {\r\n            this.setState((prevState: ICreateEventsStep1State) => ({\r\n                eventDetails: { ...prevState.eventDetails, categoryId: item.key },\r\n                isEventCategoryValid: true,\r\n                selectedCategory: item\r\n            }));\r\n        }\r\n\r\n        const categoriesList = new Array<ISelectedDropdownItem>();\r\n        for (var i = 0; i < this.state.categories.length; i++) {\r\n            categoriesList.push({ key: this.state.categories[i].id.toString(), header: this.state.categories[i].name })\r\n        }\r\n\r\n        let minDate = new Date();\r\n        minDate.setDate(minDate.getDate() + 1);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"page-content\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"eventDetailsStep1\")} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\" vAlign=\"center\">\r\n                        <Text className=\"form-label margin-right\" content={this.localize(\"eventPhotoStep1\")} /><ExclamationCircleIcon title={this.localize(\"imageInfoIcon\")} size=\"small\" />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getPhotoError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.eventDetails.photo && <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"end\">\r\n                        <FluentImage className=\"event-image-color\" fluid src={this.state.eventDetails.photo} />\r\n                    </Flex>}\r\n                    {this.state.eventDetails.selectedColor && <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"end\">\r\n                        <div className=\"event-image-color\" style={{ backgroundColor: this.state.eventDetails.selectedColor }}>\r\n                            <Flex className=\"event-image-color\" hAlign=\"center\" vAlign=\"center\">\r\n                                <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={this.state.eventDetails.name} />\r\n                            </Flex>\r\n                        </div>\r\n                    </Flex>}\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"center\" >\r\n                        <Flex.Item>\r\n                            <>\r\n                                <Button disabled={this.state.imageUploadLoader} loading={this.state.imageUploadLoader} onClick={this.handleUploadClick} size=\"medium\" icon={<FilesUploadIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} content={this.state.eventDetails.photo && this.state.eventDetails.photo.length ? this.localize(\"changePhotoStep1\") : this.localize(\"uploadPhotoStep1\")} iconPosition=\"before\" />\r\n                                <input\r\n                                    type=\"file\"\r\n                                    ref={this.inputReference}\r\n                                    onChange={this.handleChange}\r\n                                    style={{ display: 'none' }}\r\n                                    key={this.state.inputKey}\r\n                                />\r\n                                <Text className={this.props.dir === LanguageDirection.Rtl ? \"form-label rtl-left-margin-small\" : \"form-label\"} content={this.localize(\"orLabelForImageOrColor\")} />\r\n                            </>\r\n                        </Flex.Item>\r\n                        <Flex.Item>\r\n                            <div>\r\n                                <ColorPicker onColorChange={this.onColorChange} selectedColor={this.state.eventDetails.selectedColor} />\r\n                            </div>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                        <Text className=\"form-label\" content={this.localize(\"eventNameStep1\")} />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getNameError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Input data-testid=\"event_name_input\" maxLength={Resources.eventNameMaxLength} fluid placeholder={this.localize(\"eventNamePlaceholderStep1\")} value={this.state.eventDetails.name} onChange={(event: any) => this.onEventNameChange(event.target.value)} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" content={this.localize(\"eventTypeStep1\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getEventTypeError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" content={this.localize(\"category\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getEventCategoryError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                className={this.props.dir === LanguageDirection.Rtl ? \"dropdown-flex-half rtl-left-margin-small\" : \"dropdown-flex-half\"}\r\n                                fluid\r\n                                items={this.state.eventTypes.map((value: IConstantDropdownItem) => { return { key: value.id, header: value.name } })}\r\n                                value={this.state.selectedEventType}\r\n                                placeholder={this.localize(\"selectEventTypePlaceholder\")}\r\n                                getA11ySelectionMessage={onEventTypeChange}\r\n                                data-testid=\"event_type_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                className=\"dropdown-flex-half\"\r\n                                fluid\r\n                                onChange={(event, data) => { onEventCategoryChange(data.value) }}\r\n                                value={this.state.selectedCategory}\r\n                                items={categoriesList}\r\n                                placeholder={this.localize(\"selectCategoryPlaceholder\")}\r\n                                data-testid=\"event_category_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {\r\n                        this.state.eventDetails.type === EventType.LiveEvent &&\r\n                        <>\r\n                            <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                                <Text className=\"form-label\" content={this.localize(\"liveEventUrlStep1\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getMeetingLinkError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <Input fluid value={this.state.eventDetails.meetingLink} placeholder={this.localize(\"liveEventUrlPlaceholder\")}\r\n                                    onChange={(event: any) => this.onLiveEventUrlChange(event.target.value)} data-testid=\"event_link_input\" />\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.state.eventDetails.type === EventType.InPerson && <>\r\n                            <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                                <Text className=\"form-label\" content={this.localize(\"venue\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getVenueError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <Input\r\n                                    maxLength={Resources.eventVenueMaxLength}\r\n                                    value={this.state.eventDetails.venue}\r\n                                    onChange={(event: any) => this.onEventVenueChange(event.target.value)}\r\n                                    fluid\r\n                                    placeholder={this.localize(\"venuePlaceholder\")}\r\n                                    data-testid=\"event_venue_input\"\r\n                                />\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Text className=\"form-label\" content={this.localize(\"eventDescriptionStep1\")} />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getDescriptionError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <TextArea\r\n                            maxLength={Resources.eventDescriptionMaxLength}\r\n                            fluid\r\n                            placeholder={this.localize(\"eventDescriptionPlaceholder\")}\r\n                            value={this.state.eventDetails.description}\r\n                            onChange={(event: any) => this.onEventDescriptionChange(event.target.value)}\r\n                            data-testid=\"event_description_input\"\r\n                        />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Text title={this.timeZone} truncated className=\"form-label\" content={`${this.localize(\"yourTimeZone\")}: ${this.timeZone}`} />\r\n                    </Flex>\r\n                    {\r\n                        this.state.screenWidth >= 600 &&\r\n                        <>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <div>\r\n                                        <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={`${this.localize(\"startDateStep1\")}`} />\r\n                                        <Flex className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                                            <StartDate\r\n                                                screenWidth={this.state.screenWidth}\r\n                                                theme={this.state.theme}\r\n                                                selectedDate={this.state.eventDetails.startDate}\r\n                                                minDate={minDate}\r\n                                                onDateSelect={this.setStartDate}\r\n                                                disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                            />\r\n                                        </Flex>\r\n                                    </div>\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <div>\r\n                                        <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={`${this.localize(\"endDateStep1\")}`} />\r\n                                        <StartDate\r\n                                            screenWidth={this.state.screenWidth}\r\n                                            theme={this.state.theme}\r\n                                            minDate={this.state.eventDetails.endDate}\r\n                                            selectedDate={this.state.eventDetails.endDate}\r\n                                            onDateSelect={this.setEndDate}\r\n                                            disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                        />\r\n                                    </div>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.state.screenWidth < 600 &&\r\n                        <React.Fragment>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Text className=\"form-label\" content={this.localize(\"startDateStep1\")} />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <StartDate\r\n                                    screenWidth={this.state.screenWidth}\r\n                                    theme={this.state.theme}\r\n                                    selectedDate={this.state.eventDetails.startDate}\r\n                                    minDate={minDate}\r\n                                    onDateSelect={this.setStartDate}\r\n                                    disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Text className=\"form-label\" content={this.localize(\"endDateStep1\")} />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <StartDate\r\n                                    screenWidth={this.state.screenWidth}\r\n                                    theme={this.state.theme}\r\n                                    minDate={this.state.eventDetails.startDate}\r\n                                    selectedDate={this.state.eventDetails.endDate}\r\n                                    onDateSelect={this.setEndDate}\r\n                                    disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                />\r\n                            </Flex>\r\n                        </React.Fragment>\r\n                    }\r\n\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex gap=\"gap.smaller\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"startTimeStep1\")} />\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"endTimeStep1\")} />\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"maxParticipantsStep1\")} />\r\n                                <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getMaximumNoofParticipantsError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Flex gap=\"gap.smaller\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <TimePicker\r\n                                        hours={this.state.eventDetails.startTime?.getHours()}\r\n                                        minutes={this.state.eventDetails.startTime?.getMinutes()}\r\n                                        isDisabled={!this.checkEventAlreadyStarted()}\r\n                                        onPickerClose={this.onStartTimeChange}\r\n                                        dir={this.props.dir}\r\n                                    />\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <TimePicker\r\n                                        hours={this.state.eventDetails.endTime?.getHours()}\r\n                                        minutes={this.state.eventDetails.endTime?.getMinutes()}\r\n                                        onPickerClose={this.onEndTimeChange}\r\n                                        minHours={this.state.eventDetails.startTime?.getHours()!}\r\n                                        minMinutes={undefined}\r\n                                        isDisabled={!this.checkEventAlreadyStarted()}\r\n                                        dir={this.props.dir}\r\n                                    />\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Input type=\"number\" min={1} fluid value={this.state.eventDetails.maximumNumberOfParticipants.toString()} onChange={(event: any) => this.onMaxNoOfParticipantsChange(event.target.value)} data-testid=\"event_maxParticipants_input\" />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    {!this.state.isTimeValid && <Text error content={this.localize(\"startAndEndTimeError\")} />}\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step1Of3\")} />\r\n                    </Flex.Item>\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button disabled={this.state.isLoading || this.state.isValidatingStep1} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"event_save_button\" />}\r\n                    <Button data-testid=\"event_next_button\" content={this.localize(\"nextButton\")} loading={this.state.isValidatingStep1} disabled={this.state.isLoading || this.state.isValidatingStep1} primary onClick={this.nextBtnClick} />\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Text error content={!this.state.isTimeValid ? this.localize(\"startAndEndTimeError\") : \"\"} />\r\n                    </Flex.Item>\r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step1Of3\")} />\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button className=\"rtl-left-margin-small\" disabled={this.state.isLoading || this.state.isValidatingStep1} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"event_save_button\" />}\r\n                    <Button data-testid=\"event_next_button\" content={this.localize(\"nextButton\")} loading={this.state.isValidatingStep1} disabled={this.state.isLoading || this.state.isValidatingStep1} primary onClick={this.nextBtnClick} />\r\n                </Flex>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventStep1));","// <copyright file=\"dropdown-search.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Dropdown } from '@fluentui/react-northstar'\r\nimport { searchUsersAndGroups } from \"../../../api/user-group-api\";\r\n\r\ninterface IDropdownProps {\r\n    onItemSelect: (selectedItem: IDropdownItem) => void,\r\n    loadingMessage: string,\r\n    placeholder: string,\r\n    noResultMessage: string\r\n}\r\n\r\nexport interface IDropdownItem {\r\n    header: string,\r\n    content: string,\r\n    id: string,\r\n    email: string,\r\n    isGroup: boolean\r\n}\r\n\r\ninterface IUserOrGroupSearchResult {\r\n    displayName: string,\r\n    id: string,\r\n    email: string,\r\n    isGroup: boolean\r\n}\r\n\r\nconst DropdownSearch: React.FunctionComponent<IDropdownProps> = props => {\r\n    let timeout: number | null = null; // to handle API call on user input\r\n    let initialReults = new Array<IDropdownItem>();\r\n\r\n    const [searchResult, setSearchResult] = React.useState(new Array<IDropdownItem>());\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [isOpen, setOpen] = React.useState(false);\r\n    const [key, setKey] = React.useState(0);\r\n    const [selectedValue, setselectedValue] = React.useState(undefined);\r\n\r\n    const searchUsingAPI = async (searchQuery: string) => {\r\n        if (initialReults.length && !searchQuery.length) {\r\n            setSearchResult(initialReults);\r\n            return;\r\n        }\r\n\r\n        let array = new Array<IDropdownItem>();\r\n        const response = await searchUsersAndGroups(searchQuery);\r\n        if (response.status === 200 && response.data) {\r\n            const results: Array<IUserOrGroupSearchResult> = response.data;\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (results[i].displayName && results[i].email) {\r\n                    array.push({ header: results[i].displayName, content: results[i].email, id: results[i].id, email: results[i].email, isGroup: results[i].isGroup });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!initialReults.length) {\r\n            initialReults = [...array];\r\n        }\r\n\r\n        setSearchResult(array);\r\n        setLoading(false);\r\n    }\r\n\r\n    const initiateSearch = (searchQuery: string) => {\r\n        if (timeout) {\r\n            window.clearTimeout(timeout);\r\n        }\r\n        if (!loading) {\r\n            setLoading(true);\r\n        }\r\n\r\n        timeout = window.setTimeout(async () => { await searchUsingAPI(searchQuery) }, 750);\r\n    }\r\n\r\n    const onTypeSelection = {\r\n        onAdd: (item: any) => {\r\n            props.onItemSelect(item);\r\n            setKey(key + 1);\r\n            return \"\";\r\n        },\r\n    };\r\n\r\n    return (\r\n        <Dropdown\r\n            search\r\n            styles={{ width: \"100%\" }}\r\n            fluid\r\n            key={key}\r\n            loading={loading}\r\n            loadingMessage={props.loadingMessage}\r\n            items={searchResult}\r\n            value={selectedValue}\r\n            onChange={(e, { value }) => {\r\n                setselectedValue(undefined);\r\n            }}\r\n            onSearchQueryChange={(e, { searchQuery }) => {\r\n                initiateSearch(searchQuery!);\r\n            }}\r\n            onOpenChange={(e, { open, value }) => {\r\n                if (open) {\r\n                    setLoading(true);\r\n                    searchUsingAPI(\"\");\r\n                }\r\n                else {\r\n                    setSearchResult(new Array<IDropdownItem>())\r\n                }\r\n                setOpen(open!);\r\n            }}\r\n            open={isOpen}\r\n            getA11ySelectionMessage={onTypeSelection}\r\n            placeholder={props.placeholder}\r\n            noResultsMessage={props.noResultMessage}\r\n            data-testid=\"audience_dropdown_search\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default DropdownSearch;","// <copyright file=\"create-event-step2.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport DropdownSearch, { IDropdownItem } from \"../common/user-search-dropdown/dropdown-search\";\r\nimport { Text, Flex, Button, Dropdown, Checkbox, Table } from '@fluentui/react-northstar'\r\nimport { TrashCanIcon, QuestionCircleIcon, InfoIcon, ArrowLeftIcon, ArrowRightIcon } from '@fluentui/react-icons-northstar';\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedAudienceTypes } from \"../../helpers/localized-constants\";\r\nimport { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { ISelectedUserGroup } from \"../../models/ISelectedUserGroup\";\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { saveEventAsDraftAsync } from \"../../helpers/event-helper\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface ICreateEventsStep2Props extends WithTranslation {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n    dir: LanguageDirection;\r\n}\r\n\r\ninterface ICreateEventsStep2State {\r\n    selectedUsersAndGroups: Array<ISelectedUserGroup>,\r\n    eventDetails: IEvent,\r\n    selectedAudienceType: ISelectedDropdownItem,\r\n    audienceTypes: Array<IConstantDropdownItem>,\r\n    isLoading: boolean\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep2 extends React.Component<ICreateEventsStep2Props, ICreateEventsStep2State> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.teamId = \"\";\r\n        this.localize = this.props.t;\r\n        let audienceTypes = getLocalizedAudienceTypes(this.localize);\r\n        this.state = {\r\n            isLoading: false,\r\n            selectedAudienceType: { key: this.props.eventPageState.eventDetails.audience?.toString()!, header: audienceTypes.find((audience) => audience.id === this.props.eventPageState.eventDetails.audience!)?.name! },\r\n            selectedUsersAndGroups: this.props.eventPageState.selectedUserGroups.length > 0 ? this.props.eventPageState.selectedUserGroups : new Array<ISelectedUserGroup>(),\r\n            eventDetails: this.props.eventPageState.eventDetails,\r\n            audienceTypes: audienceTypes\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto next event-step\r\n    */\r\n    nextBtnClick = () => {\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n        this.props.navigateToPage(3, modifiedState);\r\n    };\r\n\r\n    /**\r\n    *  Event handler for moving onto previous event-step\r\n    */\r\n    backBtnClick = () => {\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n        this.props.navigateToPage(1, modifiedState);\r\n    };\r\n\r\n    /**\r\n    * Updating member list for mandatory option change event\r\n    * @param memberIndex array index of a specific member in member list\r\n    */\r\n    onToggleChange = (memberIndex: number) => {\r\n        let members = this.state.selectedUsersAndGroups;\r\n        members[memberIndex].isMandatory = !members[memberIndex].isMandatory;\r\n\r\n        this.setState({ selectedUsersAndGroups: members });\r\n    }\r\n\r\n    /**\r\n    * Removing a member from selected member list for an event\r\n    * @param memberIndex array index of a specific member in member list\r\n    */\r\n    deleteItem = (memberIndex: number) => {\r\n        let members = this.state.selectedUsersAndGroups;\r\n        members.splice(memberIndex, 1);\r\n\r\n        this.setState({ selectedUsersAndGroups: members });\r\n    }\r\n\r\n    /**\r\n    * Fetched members through api call are rendered in a component \r\n    */\r\n    renderMembers = () => {\r\n        if (this.state.selectedUsersAndGroups && this.state.selectedUsersAndGroups.length > 0) {\r\n\r\n            let rows = this.state.selectedUsersAndGroups.map((member, index) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            content: <>\r\n                                <Text weight=\"bold\" content={member.displayName} /><br />\r\n                                <Text size=\"small\" content={member.email} />\r\n                            </>,\r\n                            title: member.displayName,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: <>\r\n                                    <Text content={this.localize(\"mandatoryToggleStep2\")}/>\r\n                                    <Checkbox \r\n                                        className={this.props.dir === LanguageDirection.Rtl ? \"rtl-toggle\" : \"\"}\r\n                                        onChange={() => this.onToggleChange(index)}\r\n                                        checked={member.isMandatory}\r\n                                        toggle\r\n                                    />\r\n                                </>,\r\n                            className: \"mandatory-toggle-column\"\r\n                        },\r\n                        {\r\n                            content: <TrashCanIcon className=\"icon-hover\" onClick={() => this.deleteItem(index)} />,\r\n                            className: \"delete-button-column\"\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            return (\r\n                <Table className=\"selected-user-group-table\" rows={rows} />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex gap=\"gap.small\">\r\n                    <Flex.Item>\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <QuestionCircleIcon outline color=\"green\" />\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item grow={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-medium rtl-direction\" : \"\"}>\r\n                            <div>\r\n                                <Text weight=\"bold\" content={this.localize(\"noUserSelectedHeaderStep2\")} /><br />\r\n                                <Text size=\"small\" content={this.localize(\"noUserSelectedContentStep2\")}\r\n                                />\r\n                            </div>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting audience type\r\n    */\r\n    onAudienceTypeSelection = {\r\n        onAdd: (item: any) => {\r\n            this.setState({ selectedAudienceType: item });\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting users/group as an event audience\r\n    * @param selectedItem selected value of an user/group\r\n    */\r\n    onUserOrGroupSelection = async (selectedItem: IDropdownItem) => {\r\n        let selectedUserOrGroup: ISelectedUserGroup = {\r\n            displayName: selectedItem.header,\r\n            email: selectedItem.content,\r\n            id: selectedItem.id,\r\n            isGroup: selectedItem.isGroup,\r\n            isMandatory: true\r\n        };\r\n\r\n        let existingUsers = this.state.selectedUsersAndGroups;\r\n        let isAlreadyExist = existingUsers.find((userOrGroup) => userOrGroup.id === selectedUserOrGroup.id);\r\n        if (!isAlreadyExist) {\r\n            existingUsers.push(selectedUserOrGroup);\r\n            this.setState({ selectedUsersAndGroups: existingUsers });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for audience type dropdown\r\n    * @param item selected audience type\r\n    */\r\n    onAudienceChange = (item: any) => {\r\n        this.setState((prevState: ICreateEventsStep2State) => ({\r\n            eventDetails: { ...prevState.eventDetails, audience: item.key },\r\n            selectedAudienceType: item\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler for auto-registering the mandatory users for an event\r\n    */\r\n    onAutoRegisterToggleChange = () => {\r\n        this.setState((prevState: ICreateEventsStep2State) => ({\r\n            eventDetails: { ...prevState.eventDetails, isAutoRegister: !this.state.eventDetails.isAutoRegister }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        this.setState({ isLoading: true });\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n\r\n        let result = await saveEventAsDraftAsync(modifiedState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting mandatory all option\r\n    */\r\n    onMandatoryAllClocked = () => {\r\n        let selectedUserGroup = [...this.state.selectedUsersAndGroups];\r\n        for (var i = 0; i < selectedUserGroup.length; i++) {\r\n            selectedUserGroup[i].isMandatory = true;\r\n        }\r\n\r\n        this.setState({ selectedUsersAndGroups: selectedUserGroup });\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"audienceDetailsStep2\")} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex gap=\"gap.smaller\" vAlign=\"center\">\r\n                                <Text className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small form-label\" : \"form-label\"} content={this.localize(\"audienceTypeStep2\")} />\r\n                                <InfoIcon outline title={this.localize(\"audienceTypeInfoIconTitle\")} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                fluid\r\n                                value={this.state.selectedAudienceType}\r\n                                items={this.state.audienceTypes.map((value: IConstantDropdownItem) => { return { key: value.id, header: value.name } })}\r\n                                onChange={(event, data) => { this.onAudienceChange(data.value) }}\r\n                                data-testid=\"event_audience_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.eventDetails.audience === EventAudience.Private && <>\r\n                        <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                            <DropdownSearch\r\n                                loadingMessage={this.localize(\"dropdownSearchLoadingMessage\")}\r\n                                noResultMessage={this.localize(\"noResultFoundDropdownMessage\")}\r\n                                placeholder={this.localize(\"startTypingDropdownSearch\")}\r\n                                onItemSelect={this.onUserOrGroupSelection}\r\n                            />\r\n                        </Flex>\r\n                        <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                            <Checkbox onChange={() => this.onAutoRegisterToggleChange()} checked={this.state.eventDetails.isAutoRegister} label={this.localize(\"autoRegisterCheckboxLabelStep2\")} data-testid=\"auto_toggle\" />\r\n                            <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                <Button\r\n                                    onClick={this.onMandatoryAllClocked}\r\n                                    primary\r\n                                    text\r\n                                    content={this.localize(\"mandatoryAllButtonStep2\")}\r\n                                    disabled={this.state.selectedUsersAndGroups.filter((userOrGroup) => userOrGroup.isMandatory === false).length === 0}\r\n                                    data-testid=\"audience_mandatory_button\"\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"left-push\" : \"\" }\r\n                                />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        {this.renderMembers()}\r\n                    </>}\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Button icon={<ArrowLeftIcon />} text content={this.localize(\"back\")} onClick={this.backBtnClick} data-testid=\"back_button\" />\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step2Of3\")} />\r\n                    </Flex.Item>\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button disabled={this.state.isLoading} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_draft_button\" />}\r\n                    <Button content={this.localize(\"nextButton\")} disabled={this.state.isLoading || (this.state.eventDetails.audience === EventAudience.Private && this.state.selectedUsersAndGroups.length === 0)} primary onClick={this.nextBtnClick} data-testid=\"next_button\" />\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Button icon={<ArrowRightIcon />} text content={<Text content={this.localize(\"back\")} className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\" }/>} onClick={this.backBtnClick} data-testid=\"back_button\" />\r\n                    </Flex.Item>\r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step2Of3\")} />\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button className=\"rtl-right-margin-small\" disabled={this.state.isLoading} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_draft_button\" />}\r\n                    <Button content={this.localize(\"nextButton\")} disabled={this.state.isLoading || (this.state.eventDetails.audience === EventAudience.Private && this.state.selectedUsersAndGroups.length === 0)} primary onClick={this.nextBtnClick} data-testid=\"next_button\" />\r\n                </Flex>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default withTranslation()(CreateEventStep2);","// <copyright file=\"create-event-step3.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { Text, Flex, Image, Button, ArrowLeftIcon, ArrowRightIcon, Layout, Divider } from '@fluentui/react-northstar'\r\nimport { TFunction } from \"i18next\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport moment from 'moment';\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { createEvent, saveEventAsDraftAsync, validateSelectedUsers, updateEventDetails } from \"../../helpers/event-helper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport AudienceArtifact from \"../../components/common/event-artifacts/audience\";\r\nimport TeamsMeetingArtifact from \"../../components/common/event-artifacts/teams-meeting\";\r\nimport LiveEventArtifact from \"../../components/common/event-artifacts/live-event\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface ICreateEventsStep3Props extends WithTranslation, IWithContext {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n}\r\n\r\ninterface ICreateEventsStep3State {\r\n    isCreateLoading: boolean,\r\n    isDraftLoading: boolean,\r\n    registeredAttendeesCount: number\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep3 extends React.Component<ICreateEventsStep3Props, ICreateEventsStep3State> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n        this.state = {\r\n            isCreateLoading: false,\r\n            registeredAttendeesCount: 0,\r\n            isDraftLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n\r\n        if (this.props.eventPageState.eventDetails.audience === EventAudience.Private && this.props.eventPageState.eventDetails.isAutoRegister) {\r\n            this.getRegisteredAttendeesCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sets the attendees count attending the event in state\r\n    */\r\n    getRegisteredAttendeesCount = async () => {\r\n        let result = await validateSelectedUsers([...this.props.eventPageState.selectedUserGroups]);\r\n        this.setState({ registeredAttendeesCount: result.mandatoryUsers.length });\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto previous step\r\n    */\r\n    backBtnClick = () => {\r\n        this.props.navigateToPage(2, this.props.eventPageState);\r\n    };\r\n\r\n    /** Renders artifacts */\r\n    getArtifacts = () => {\r\n        let artifactElements: Array<JSX.Element> = [];\r\n\r\n        switch (this.props.eventPageState.eventDetails?.type) {\r\n            case EventType.Teams:\r\n                artifactElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                artifactElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (this.props.eventPageState.eventDetails?.audience) {\r\n            case EventAudience.Private:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                {artifactElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Format and renders event day and time as per local time\r\n     * @param startDate The start date of an event\r\n     * @param startTime The start time of an event\r\n     * @param endTime The end time of an event\r\n     */\r\n    getEventDayAndTime = (startDate: Date, startTime: Date, endTime: Date) => {\r\n        let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n        let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n        let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n        return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        this.setState({ isDraftLoading: true });\r\n        let result = await saveEventAsDraftAsync({ ...this.props.eventPageState }, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n        }\r\n        else {\r\n            this.setState({ isDraftLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false, isDraft: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for creating an event\r\n    */\r\n    createEvent = async () => {\r\n        this.setState({ isCreateLoading: true });\r\n        let result = await createEvent(this.props.eventPageState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isCreateEvent: true });\r\n        }\r\n        else {\r\n            this.setState({ isCreateLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false, isCreateEvent: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Updating an already created event and fetching its saved details\r\n    */\r\n    updateEvent = async () => {\r\n        this.setState({ isCreateLoading: true });\r\n        let result = await updateEventDetails(this.props.eventPageState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            this.setState({ isCreateLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false });\r\n        }\r\n    }\r\n\r\n    /** Renders the attendee URL for live event */\r\n    renderAttendeeURL = () => {\r\n        if (this.props.eventPageState.eventDetails.type === EventType.LiveEvent) {\r\n            return (\r\n                <Flex design={{ marginTop: \"2.67rem\" }} vAlign=\"center\" hAlign=\"start\" column>\r\n                    <Text content={this.localize(\"liveEventUrlStep1\")} weight=\"semibold\" />\r\n                    <a href={this.props.eventPageState.eventDetails.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.eventPageState.eventDetails.meetingLink}</a>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"page-content create-event-step3\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"eventPreviewStep3\")} />\r\n                    </Flex>\r\n                    <Flex className=\"margin-top\" space=\"between\" vAlign=\"center\">\r\n                        <Text className=\"category label-color\" content={this.props.eventPageState.selectedCategory?.header!} weight=\"bold\" />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            {this.getArtifacts()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.props.eventPageState.eventDetails.photo && <Image className=\"event-image\" fluid src={this.props.eventPageState.eventDetails.photo} />}\r\n                    {this.props.eventPageState.eventDetails.selectedColor && <div className=\"event-image\" style={{ backgroundColor: this.props.eventPageState.eventDetails.selectedColor }}>\r\n                        <Flex className=\"event-image-color\" hAlign=\"center\" vAlign=\"center\">\r\n                            <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={this.props.eventPageState.eventDetails.name} />\r\n                        </Flex>\r\n                    </div>}\r\n                    <div style={{ marginTop: \"1.33rem\" }}>\r\n                        <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                    </div>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\">\r\n                        <Layout\r\n                            className=\"event-date-and-time\"\r\n                            start={<Icon iconName=\"Clock\" />}\r\n                            main={<Text content={this.getEventDayAndTime(this.props.eventPageState.eventDetails.startDate, this.props.eventPageState.eventDetails.startTime!, this.props.eventPageState.eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                            gap=\".4rem\"\r\n                        />\r\n                        {this.renderEventVenue(this.props.eventPageState.eventDetails.type, this.props.eventPageState.eventDetails.venue)}\r\n                    </Flex>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.description} />\r\n                    </Flex>\r\n                    {this.renderAttendeeURL()}\r\n                    <Flex gap={this.props.dir === LanguageDirection.Rtl ? undefined : \"gap.large\"} design={{ marginTop: \"2.67rem\" }}>\r\n                        <Flex column className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.maximumNumberOfParticipants} />\r\n                        </Flex>\r\n                        <Flex column>\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.state.registeredAttendeesCount} />\r\n                        </Flex>\r\n                    </Flex>\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Button disabled={this.state.isCreateLoading} icon={<ArrowLeftIcon />} text content={this.localize(\"back\")} onClick={this.backBtnClick} />\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step3of3\")} />\r\n                    </Flex.Item>\r\n                    {\r\n                        (this.props.eventPageState.isDraft || !this.props.eventPageState.isEdit) && <>\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isDraftLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_button\" />\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isCreateLoading} content={this.localize(\"createEvent\")} primary onClick={this.createEvent} data-testid=\"create_event_button\" />\r\n                        </>\r\n                    }\r\n                    {\r\n                        !this.props.eventPageState.isDraft && this.props.eventPageState.isEdit && <>\r\n                            <Button disabled={this.state.isCreateLoading} loading={this.state.isCreateLoading} content={this.localize(\"updateEventButton\")} primary onClick={this.updateEvent} data-testid=\"update_button\" />\r\n                        </>\r\n                    }\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Button\r\n                            disabled={this.state.isCreateLoading}\r\n                            icon={<ArrowRightIcon />}\r\n                            text\r\n                            content={<Text content={this.localize(\"back\")} className=\"rtl-right-margin-small\" />}\r\n                            onClick={this.backBtnClick}\r\n                        />\r\n                    </Flex.Item>\r\n                    \r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step3of3\")} />\r\n                    {\r\n                        (this.props.eventPageState.isDraft || !this.props.eventPageState.isEdit) && <>\r\n                            <Button className=\"rtl-left-margin-small\" disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isDraftLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_button\" />\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isCreateLoading} content={this.localize(\"createEvent\")} primary onClick={this.createEvent} data-testid=\"create_event_button\" />\r\n                        </>\r\n                    }\r\n                    {\r\n                        !this.props.eventPageState.isDraft && this.props.eventPageState.isEdit && <>\r\n                            <Button className=\"rtl-left-margin-small\" disabled={this.state.isCreateLoading} loading={this.state.isCreateLoading} content={this.localize(\"updateEventButton\")} primary onClick={this.updateEvent} data-testid=\"update_button\" />\r\n                        </>\r\n                    }\r\n                </Flex>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventStep3));","// <copyright file=\"event-details.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Label, Image, EyeSlashIcon, Divider, EyeIcon, Avatar, Layout, Loader } from \"@fluentui/react-northstar\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { IEvent } from \"../../../models/IEvent\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { EventAudience } from \"../../../models/event-audience\";\r\nimport { EventType } from \"../../../models/event-type\";\r\nimport { getUserProfiles } from \"../../../api/user-group-api\"\r\nimport { ResponseStatus } from \"../../../constants/constants\";\r\nimport moment from \"moment\";\r\n\r\nimport \"../../manage-events/manage-events.css\";\r\n\r\ninterface IEventDetailsProps {\r\n    eventDetails: IEvent\r\n}\r\n\r\n/** Renders component to close event registrations or cancel an event */\r\nconst EventDetails: React.FunctionComponent<IEventDetailsProps> = props => {\r\n    const localize = useTranslation().t;\r\n\r\n    let [eventDetails, setEventDetails] = React.useState(props.eventDetails);\r\n    let [isLoading, setLoading] = React.useState(false);\r\n    let [errorGettingEventDetails, setEventDetailsError] = React.useState(false);\r\n    let [createdByName, setCreatedByName] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n        getUserProfile(props.eventDetails.createdBy);\r\n    }, [props.eventDetails]);\r\n\r\n    React.useEffect(() => { getUserProfile(props.eventDetails.createdBy); }, []);\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    const getUserProfile = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            setCreatedByName(userInfo.displayName);\r\n        }\r\n    }\r\n\r\n    /** Renders event audience */\r\n    const getEventAudience = () => {\r\n        if (eventDetails.audience === EventAudience.Private) {\r\n            return <Label className=\"category-type-label\" circular icon={<EyeSlashIcon />} iconPosition=\"start\" content={localize(\"private\")} />;\r\n        }\r\n        else {\r\n            return <Label className=\"category-type-label\" circular icon={<EyeIcon />} iconPosition=\"start\" content={localize(\"public\")} />;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Format and renders event day and time as per local time\r\n     * @param startDate The start date of an event\r\n     * @param startTime The start time of an event\r\n     * @param endTime The end time of an event\r\n     */\r\n    const getEventDayAndTime = (startDate: Date, startTime: Date, endTime: Date) => {\r\n        let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n        let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n        let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n        return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n    }\r\n\r\n    /** Renders the event creator information */\r\n    const renderEventCreatorInfo = () => {\r\n        let name = createdByName && createdByName.length ? createdByName : localize(\"unknownUserName\");\r\n        return (\r\n            <Flex vAlign=\"center\" hAlign=\"start\" gap=\"gap.smaller\" design={{ marginTop: \"2.67rem\" }}>\r\n                <Avatar\r\n                    size=\"small\"\r\n                    name={name}\r\n                />\r\n                <Layout\r\n                    start={<Text content={localize(\"createdBy\")} size=\"small\" />}\r\n                    main={<Text content={name} size=\"small\" weight=\"semibold\" />}\r\n                    gap=\".4rem\"\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    const renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (isLoading) {\r\n            return (\r\n                <Loader className=\"task-module-loader\" />\r\n            );\r\n        }\r\n\r\n        if (errorGettingEventDetails) {\r\n            return <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n        }\r\n\r\n        return (\r\n            <div className=\"close-cancel-event-container\">\r\n                <div className=\"close-cancel-event\">\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <Text className=\"category label-color\" content={eventDetails.categoryName} weight=\"bold\" />\r\n                        <Flex.Item push>\r\n                            {getEventAudience()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Image className=\"event-image\" fluid src={eventDetails.photo} />\r\n                    <div style={{ marginTop: \"1.33rem\" }}>\r\n                        <Text content={eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                    </div>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\">\r\n                        <Layout\r\n                            className=\"event-date-and-time\"\r\n                            start={<Icon iconName=\"Clock\" />}\r\n                            main={<Text content={getEventDayAndTime(eventDetails.startDate, eventDetails.startTime!, eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                            gap=\".4rem\"\r\n                        />\r\n                        {renderEventVenue(eventDetails.type, eventDetails.venue)}\r\n                    </Flex>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Text content={eventDetails.description} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.large\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Flex column>\r\n                            <Text content={localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                            <Text content={eventDetails.maximumNumberOfParticipants} />\r\n                        </Flex>\r\n                        <Flex column>\r\n                            <Text content={localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                            <Text content={eventDetails.registeredAttendeesCount} />\r\n                        </Flex>\r\n                    </Flex>\r\n                    {renderEventCreatorInfo()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default EventDetails;","// <copyright file=\"create-event-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { Flex, Provider, Loader, Text } from '@fluentui/react-northstar'\r\nimport { TFunction } from \"i18next\";\r\nimport CreateEventStep1 from \"../create-event/create-event-step1\";\r\nimport CreateEventStep2 from \"../create-event/create-event-step2\";\r\nimport CreateEventStep3 from \"../create-event/create-event-step3\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedUserGroup } from \"../../models/ISelectedUserGroup\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { getEventAsync } from \"../../api/common-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport EventDetails from \"../common/event-details/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./create-event.css\";\r\n\r\ninterface ICreateEventProps extends WithTranslation, IWithContext {\r\n}\r\n\r\nexport interface ICreateEventState {\r\n    currentEventStep: number,\r\n    eventDetails: IEvent,\r\n    selectedCategory: ISelectedDropdownItem | undefined,\r\n    selectedEvent: ISelectedDropdownItem | undefined,\r\n    selectedAudience: ISelectedDropdownItem | undefined,\r\n    selectedUserGroups: Array<ISelectedUserGroup>,\r\n    categories: Array<IConstantDropdownItem>,\r\n    isEdit: boolean,\r\n    isDraft: boolean,\r\n    isLoading: boolean,\r\n    displayReadonly: boolean\r\n}\r\n\r\nclass CreateEventWrapper extends React.Component<ICreateEventProps, ICreateEventState> {\r\n    readonly localize: TFunction;\r\n    minDate = new Date();\r\n    params: { eventId?: string | undefined, isDraft?: boolean | undefined } = { eventId: undefined, isDraft: false };\r\n    teamId: string;\r\n\r\n    /** Constructor which initializes state */\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.minDate.setDate(this.minDate.getDate() + 1);\r\n        this.teamId = \"\";\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.params.eventId = params.get(\"eventId\")!;\r\n        this.params.isDraft = params.get(\"isDraft\")! === \"true\" ? true : false;\r\n\r\n        this.state = {\r\n            currentEventStep: 1,\r\n            categories: new Array<IConstantDropdownItem>(),\r\n            displayReadonly: false,\r\n            eventDetails: {\r\n                categoryId: \"\",\r\n                categoryName: \"\",\r\n                createdBy: \"\",\r\n                createdOn: new Date(),\r\n                description: \"\",\r\n                endDate: this.minDate,\r\n                eventId: \"\",\r\n                graphEventId: \"\",\r\n                isAutoRegister: false,\r\n                isRegistrationClosed: false,\r\n                maximumNumberOfParticipants: 0,\r\n                meetingLink: \"\",\r\n                name: \"\",\r\n                numberOfOccurrences: 1,\r\n                photo: \"\",\r\n                registeredAttendeesCount: 0,\r\n                startDate: this.minDate,\r\n                status: 0,\r\n                teamId: \"\",\r\n                type: EventType.Teams,\r\n                venue: \"\",\r\n                audience: EventAudience.Public,\r\n                endTime: undefined,\r\n                startTime: undefined,\r\n                mandatoryAttendees: \"\",\r\n                optionalAttendees: \"\",\r\n                registeredAttendees: \"\",\r\n                selectedUserOrGroupListJSON: \"\",\r\n                autoRegisteredAttendees: \"\",\r\n            },\r\n            selectedCategory: undefined,\r\n            selectedEvent: undefined,\r\n            selectedAudience: undefined,\r\n            selectedUserGroups: new Array<ISelectedUserGroup>(),\r\n            isEdit: false,\r\n            isDraft: false,\r\n            isLoading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllCategories();\r\n    }\r\n\r\n    /** Gets teams context from HOC as props */\r\n    componentWillReceiveProps(nextProps: ICreateEventProps) {\r\n        if (nextProps.teamsContext && nextProps.teamsContext !== this.props.teamsContext) {\r\n            this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n            if (this.params.eventId) {\r\n                this.getEventDetailsToUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Updating Event Details required */\r\n    getEventDetailsToUpdate = async () => {\r\n        var response = await getEventAsync(this.params.eventId!, this.teamId);\r\n        if (response.status === ResponseStatus.OK) {\r\n            let eventDetails = response.data as IEvent;\r\n            let selectedUsersOrGroups = Array<ISelectedUserGroup>();\r\n\r\n            if (eventDetails.selectedUserOrGroupListJSON) {\r\n                selectedUsersOrGroups = JSON.parse(eventDetails.selectedUserOrGroupListJSON);\r\n            }\r\n            eventDetails.startDate = moment.utc(eventDetails.startDate).local().toDate();\r\n            eventDetails.endDate = moment.utc(eventDetails.endDate).local().toDate();\r\n            eventDetails.startTime = moment.utc(eventDetails.startTime).local().toDate();\r\n            eventDetails.endTime = moment.utc(eventDetails.endTime).local().toDate();\r\n\r\n            if (eventDetails.status === EventStatus.Cancelled || eventDetails.endDate < new Date()) {\r\n                this.setState({ isLoading: false, displayReadonly: true, eventDetails: eventDetails }, this.getAllCategories);\r\n            } else {\r\n                this.setState({ isLoading: false, eventDetails: eventDetails, selectedUserGroups: selectedUsersOrGroups, isEdit: true, isDraft: this.params.isDraft! }, this.getAllCategories);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Event Handler for fetching the category list and rendering it */\r\n    getAllCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            let categories: any = response.data.map((category: any) => {\r\n                return { name: category.name, id: category.categoryId };\r\n            });\r\n\r\n            let selectedCategory: ISelectedDropdownItem;\r\n            if (this.state.eventDetails.categoryId) {\r\n                let category = categories.find((category: any) => category.id === this.state.eventDetails.categoryId);\r\n                selectedCategory = { header: category.name, key: category.id };\r\n\r\n                this.setState({ categories: categories, selectedCategory: selectedCategory, isLoading: false });\r\n            }\r\n            else {\r\n                this.setState({ categories: categories, isLoading: false });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Set state of an event on navigating to next step\r\n    * @param currentStep shows the event step which is currently active\r\n    * @param stepEventState current state of the event\r\n    */\r\n    setEventStep = (currentStep: number, stepEventState: ICreateEventState) => {\r\n        this.setState({ currentEventStep: currentStep, eventDetails: stepEventState.eventDetails, selectedAudience: stepEventState.selectedAudience, selectedCategory: stepEventState.selectedCategory, selectedEvent: stepEventState.selectedEvent, selectedUserGroups: stepEventState.selectedUserGroups, categories: stepEventState.categories });\r\n    }\r\n\r\n    /** Renders component based on Add, Edit or Delete */\r\n    renderOperation = () => {\r\n        switch (this.state.currentEventStep) {\r\n            case 1:\r\n                return <CreateEventStep1 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n            case 2:\r\n                return <CreateEventStep2 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} dir={this.props.dir}/>\r\n            case 3:\r\n                return <CreateEventStep3 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n            default:\r\n                return <CreateEventStep1 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n        }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        if (!this.state.isLoading && !this.state.categories?.length) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container event-task-module\">\r\n                            <Text error content={this.localize(\"categoriesNotAvailableError\")} weight=\"semibold\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        if (this.state.displayReadonly) {\r\n            return <EventDetails eventDetails={this.state.eventDetails} />\r\n        }\r\n        else {\r\n            return (\r\n                <Fabric dir={this.props.dir}>\r\n                    <Provider>\r\n                        <Flex>\r\n                            <div className=\"task-module-container\">\r\n                                {!this.state.isLoading && !this.state.displayReadonly && this.renderOperation()}\r\n                                {this.state.isLoading && <Loader className=\"loader\" />}\r\n                            </div>\r\n                        </Flex>\r\n                    </Provider>\r\n                </Fabric>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventWrapper));","// <copyright file=\"manage-categories-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { ICategory } from \"../models/ICategory\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getCategoriesAsync = async (teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getEventCategoriesAsync = async () => {\r\n    let url = `${Constants.apiBaseURL}/category/get-categories-for-event`;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* Creates a new category\r\n* @param teamId The LnD team Id\r\n* @param category The category details that needs to be created\r\n*/\r\nexport const createCategoryAsync = async (teamId: string, category: ICategory) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, category, config);\r\n}\r\n\r\n/**\r\n* Updates category details\r\n* @param teamId The LnD team Id\r\n* @param category The category details that needs to be updated\r\n*/\r\nexport const updateCategoryAsync = async (teamId: string, category: ICategory) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, category, config);\r\n}\r\n\r\n/**\r\n* Deletes categories\r\n* @param teamId The LnD team Id\r\n* @param categoryIds The comma separated category IDs that needs to be deleted\r\n*/\r\nexport const deleteCategoriesAsync = async (teamId: string, categoryIds: string) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId, categoryIds: categoryIds });\r\n\r\n    return await axios.delete(url, config);\r\n}","// <copyright file=\"list-categories.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Table, Flex, Input, Text, Button, Checkbox, Loader } from \"@fluentui/react-northstar\";\r\nimport { SearchIcon, AddIcon, EditIcon, TrashCanIcon, QuestionCircleIcon, PresenceAvailableIcon } from '@fluentui/react-icons-northstar';\r\nimport { CategoryOperations, ResponseStatus } from \"../../constants/constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { getCategoriesAsync } from \"../../api/manage-categories-api\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IListCategoriesProps extends WithTranslation, IWithContext {\r\n    statusMessage: string,\r\n    onActionPerformed: (categoryOperation: CategoryOperations, operationData?: Array<ICategory>) => void\r\n}\r\n\r\ninterface IListCategoriesState {\r\n    isEditEnabled: boolean\r\n    isDeleteEnabled: boolean,\r\n    isAllCategoriesSelected: boolean,\r\n    categories: Array<ICategory>,\r\n    searchedCategories: Array<ICategory>,\r\n    statusMessage: string,\r\n    isLoading: boolean,\r\n    showStatusIcon: boolean\r\n}\r\n\r\n/** This component lists all event categories */\r\nclass ListCategories extends React.Component<IListCategoriesProps, IListCategoriesState> {\r\n    readonly localize: TFunction;\r\n    searchText: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n\r\n        this.searchText = \"\";\r\n\r\n        this.state = {\r\n            isEditEnabled: false,\r\n            isDeleteEnabled: false,\r\n            isAllCategoriesSelected: false,\r\n            categories: [],\r\n            searchedCategories: [],\r\n            statusMessage: this.props.statusMessage,\r\n            isLoading: false,\r\n            showStatusIcon: this.props.statusMessage !== \"\" && this.props.statusMessage.length > 0\r\n        }\r\n    }\r\n\r\n    /** Gets called when component get mounted */\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IListCategoriesProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.getCategoriesAsync(nextProps.teamsContext.teamId!);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all event categories\r\n     */\r\n    getCategoriesAsync = async (teamId: string) => {\r\n        let response = await getCategoriesAsync(teamId);\r\n\r\n        if (response && response.status === ResponseStatus.OK) {\r\n            let categories: Array<ICategory> = [];\r\n\r\n            response.data?.forEach((category: ICategory) => {\r\n                categories.push(category);\r\n            });\r\n\r\n            this.setState({categories, isLoading: false });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, statusMessage: this.localize(\"dataResponseFailedStatus\") });\r\n        }\r\n    }\r\n\r\n    /** Manages 'Edit' and 'Delete' button's enability and manages select all categories checked state */\r\n    manageControlsEnabilityAndSelection() {\r\n        let selectedCategoriesCount = this.state.categories.filter((category: ICategory) => { return category.isSelected })?.length;\r\n        let statusMessage = \"\";\r\n\r\n        let isAllCategoriesSelected = selectedCategoriesCount === this.state.categories.length;\r\n\r\n        if (selectedCategoriesCount === 1) {\r\n            statusMessage = this.localize(\"listCategoriesSelectedStatus\",\r\n                { \"selectedCategoriesCount\": selectedCategoriesCount, \"totalCategoriesCount\": this.state.categories.length });\r\n            this.setState({ isEditEnabled: true, isDeleteEnabled: true, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n        else if (selectedCategoriesCount > 1) {\r\n            statusMessage = this.localize(\"listCategoriesSelectedStatus\",\r\n                { \"selectedCategoriesCount\": selectedCategoriesCount, \"totalCategoriesCount\": this.state.categories.length });\r\n            this.setState({ isEditEnabled: false, isDeleteEnabled: true, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n        else {\r\n            this.setState({ isEditEnabled: false, isDeleteEnabled: false, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n    }\r\n\r\n    getLastCategoryUpdateDateAndTime = (): any => {\r\n        if (this.state.categories?.length > 0) {\r\n            let categories = [...this.state.categories];\r\n\r\n            categories.sort((category1, category2) => {\r\n                if (category1.updatedOn && category2.updatedOn) {\r\n                    return 1;\r\n                }\r\n                else if (!category1.updatedOn && category2.updatedOn) {\r\n                    return 1;\r\n                }\r\n                else if (category1.updatedOn && !category2.updatedOn) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            this.localize(\"lastUpdatedOnStatus\", { \"lastUpdatedOnStatus\": categories[categories.length - 1].updatedOn?.toUTCString });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches categories based on search text and display search results\r\n     * @param seachText The seach text entered in seach box\r\n     */\r\n    searchCategories = (searchText: string) => {\r\n        let categories: Array<ICategory> = this.state.categories ?? [];\r\n\r\n        if (categories.length > 0 && searchText && searchText.trim() !== \"\") {\r\n            this.searchText = searchText.trim();\r\n\r\n            let searchedCategories = categories.filter((category) => {\r\n                return category.name.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1 ||\r\n                    category.description.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1;\r\n            });\r\n\r\n            this.setState({ searchedCategories });\r\n        }\r\n        else {\r\n            this.searchText = \"\";\r\n            this.setState({ categories, searchedCategories: [] });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler for Add, Edit and Delete category\r\n     * @param categoryOperation The category operation performed\r\n     */\r\n    onActionPerformed = (categoryOperation: CategoryOperations) => {\r\n        if (categoryOperation === CategoryOperations.Edit || categoryOperation === CategoryOperations.Delete) {\r\n            let categoryOperationData = this.state.categories.filter((category: ICategory) => category.isSelected);\r\n            this.props.onActionPerformed(categoryOperation, categoryOperationData);\r\n        }\r\n        else {\r\n            this.props.onActionPerformed(categoryOperation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when any category checked state changed\r\n     * @param category The selected category details\r\n     */\r\n    onCategoryCheckedChange = (category: ICategory) => {\r\n        category.isSelected = !category.isSelected;\r\n        this.manageControlsEnabilityAndSelection();\r\n    }\r\n\r\n    /** The event handler called when select all categories checked state changed */\r\n    onSelectAllCategoriesCheckedChange = () => {\r\n        if (this.state.categories && this.state.categories.length > 0) {\r\n            var categories = [...this.state.categories];\r\n\r\n            for (let i = 0; i < categories.length; i++) {\r\n                categories[i].isSelected = !this.state.isAllCategoriesSelected;\r\n            }\r\n\r\n            this.setState({ categories }, () => {\r\n                this.manageControlsEnabilityAndSelection();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when seaching categories\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChanged = (event: any) => {\r\n        this.searchCategories(event.target.value);\r\n    }\r\n\r\n    /** Renders success icon if an category operation executed successfully */\r\n    renderCategoryOperationStatusIcon = () => {\r\n        if (this.state.showStatusIcon) {\r\n            return <PresenceAvailableIcon className=\"success-icon\" />;\r\n        }\r\n    }\r\n\r\n    /** Renders footer */\r\n    renderFooter = () => {\r\n        if (this.state.statusMessage && this.state.statusMessage !== \"\") {\r\n            return (\r\n                <React.Fragment>\r\n                    <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"center\">\r\n                        {this.renderCategoryOperationStatusIcon()}\r\n                        <Flex.Item grow>\r\n                            <Text data-testid=\"statusmessage\" content={this.state.statusMessage} weight=\"semibold\" />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex.Item push>\r\n                        <Text timestamp content={this.getLastCategoryUpdateDateAndTime()} weight=\"semibold\" />\r\n                    </Flex.Item>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Render categories */\r\n    renderCategories = () => {\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <Flex className=\"task-module-loader\" hAlign=\"center\" vAlign=\"center\" fill>\r\n                    <Loader />\r\n                </Flex>\r\n            );\r\n        }\r\n\r\n        let categories = this.searchText !== \"\" ? this.state.searchedCategories : this.state.categories;\r\n\r\n        if (categories?.length > 0) {\r\n            const categoriesTableHeaderItems = {\r\n                key: \"header\",\r\n                items: [\r\n                    { key: \"select-all-categories\", className: \"category-select-all-column\", content: <Checkbox data-testid=\"list-categories_selectAllCheckbox\" key=\"categoriesTableHeader\" checked={this.state.isAllCategoriesSelected} onChange={this.onSelectAllCategoriesCheckedChange} /> },\r\n                    { key: \"category-name\", className: \"category-name-column\", content: this.localize(\"categoryName\") },\r\n                    { key: \"category-description\", content: this.localize(\"description\") }\r\n                ]\r\n            };\r\n\r\n            let rows = categories.map((category: ICategory, index: number) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            className: \"category-select-all-column\",\r\n                            content: <Checkbox data-testid={\"list-categories_categoryCheckbox\" + index.toString()} key={index} checked={category.isSelected} onChange={() => this.onCategoryCheckedChange(category)} />\r\n                        },\r\n                        {\r\n                            className: \"category-name-column\",\r\n                            content: <Text content={category.name} weight=\"bold\" />,\r\n                            title: category.name,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: category.description,\r\n                            title: category.description,\r\n                            truncateContent: true\r\n                        }\r\n                    ]}\r\n            });\r\n\r\n            return (\r\n                <Table data-testid=\"table\" className=\"manage-categories-content categories-table manage-categories-content-background\"\r\n                    header={categoriesTableHeaderItems}\r\n                    rows={rows}\r\n                />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex className=\"manage-categories-content\" gap=\"gap.small\">\r\n                    <Flex.Item>\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <QuestionCircleIcon outline color=\"green\" />\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item grow={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                            <div className={this.props.dir === LanguageDirection.Rtl ? \"rtl-direction rtl-right-margin-small\" : \"\"}>\r\n                                <Text weight=\"bold\" content={this.localize(\"categoriesNotAvailableHeader\")} /><br />\r\n                                <Text content={\r\n                                    this.searchText !== \"\" ?\r\n                                    this.localize(\"categoriesNotFoundForSearchedTextDescription\", { searchedText: this.searchText }) :\r\n                                    this.localize(\"categoriesNotAvailableHeaderDescription\")}\r\n                                />\r\n                            </div>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Render search input based on culture direction. */\r\n    renderSearchInput = () => {\r\n            if (this.props.dir === LanguageDirection.Rtl)\r\n            {\r\n                return <div>\r\n                    <Input\r\n                        icon={<SearchIcon />}\r\n                        iconPosition={\"start\"}\r\n                        data-testid=\"searchbar\"\r\n                        placeholder={this.localize(\"searchPlaceholder\")}\r\n                        onChange={this.onSearchTextChanged}\r\n                    />\r\n                </div>\r\n            }\r\n            else if(this.props.dir === LanguageDirection.Ltr)\r\n            {\r\n                return <Input\r\n                    icon={<SearchIcon />}\r\n                    iconPosition={\"end\"}\r\n                    data-testid=\"searchbar\"\r\n                    placeholder={this.localize(\"searchPlaceholder\")}\r\n                    onChange={this.onSearchTextChanged}\r\n                />\r\n            }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"commandbar-wrapper\">\r\n                    <Flex className=\"commandbar-wrapper-container\">\r\n                        <Button text data-testid=\"addbutton\" className=\"list-categories-menu-button\" icon={<AddIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} content={this.localize(\"add\")} onClick={() => this.onActionPerformed(CategoryOperations.Add)} />\r\n                        <Button text data-testid=\"editbutton\" className=\"list-categories-menu-button\" icon={<EditIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} disabled={!this.state.isEditEnabled} content={this.localize(\"edit\")} onClick={() => this.onActionPerformed(CategoryOperations.Edit)} />\r\n                        <Button text data-testid=\"deletebutton\" icon={<TrashCanIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} disabled={!this.state.isDeleteEnabled} content={this.localize(\"delete\")} onClick={() => this.onActionPerformed(CategoryOperations.Delete)} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl} className=\"search-input-container\">\r\n                            {this.renderSearchInput()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                { this.renderCategories() }\r\n                <Flex className=\"manage-categories-footer\" space=\"between\">\r\n                    { this.renderFooter() }\r\n                </Flex>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ListCategories));","// <copyright file=\"manage-categories-operation-footer.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Text, ChevronStartIcon, ChevronEndIcon } from \"@fluentui/react-northstar\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IManageCategoriesOperationFooter {\r\n    backButtonContent: string,\r\n    submitButtonContent: string,\r\n    isSubmitButtonDisabled: boolean,\r\n    isOperationInProgress: boolean,\r\n    errorMessage: string,\r\n    onBackClicked: () => void,\r\n    onSubmit: () => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\n/**\r\n * The function component which renders footers for Add, Edit and Delete category operation\r\n * @param props The props of type IManageCategoriesOperationFooter\r\n */\r\nexport const ManageCategoriesOperationFooter: React.FunctionComponent<IManageCategoriesOperationFooter> = props => {\r\n    /** Renders error if data operation fails */\r\n    const renderError = () => {\r\n        if (props.errorMessage && props.errorMessage !== \"\") {\r\n            return (\r\n                <Flex.Item push>\r\n                    <Text error content={props.errorMessage} weight=\"semibold\" />\r\n                </Flex.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex className=\"manage-categories-footer\" space=\"between\">\r\n            <Button data-testid=\"backbutton\" className=\"back-button\" text icon={props.dir === LanguageDirection.Rtl ? <ChevronEndIcon /> : <ChevronStartIcon />} content={props.backButtonContent} onClick={props.onBackClicked} />\r\n            <Flex gap=\"gap.medium\" vAlign=\"center\" hAlign=\"center\">\r\n                {renderError()}\r\n                <Flex.Item push>\r\n                    <Button\r\n                        primary\r\n                        content={props.submitButtonContent}\r\n                        disabled={props.isSubmitButtonDisabled}\r\n                        loading={props.isOperationInProgress}\r\n                        onClick={props.onSubmit}\r\n                        data-testid=\"manage-categories-operation-footer_button\"\r\n                    />\r\n                </Flex.Item>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}","// <copyright file=\"add-update-category.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Text, TextArea } from \"@fluentui/react-northstar\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ManageCategoriesOperationFooter } from \"./manage-categories-operation-footer\";\r\nimport { createCategoryAsync, updateCategoryAsync, getEventCategoriesAsync } from \"../../api/manage-categories-api\";\r\n\r\ninterface IAddCategoryProps extends WithTranslation, IWithContext {\r\n    category?: ICategory\r\n    onBackClicked: () => void,\r\n    onCategoryAddedOrUpdated: (message: string) => void\r\n}\r\n\r\ninterface IAddCategoryState {\r\n    category: ICategory,\r\n    isCreatingOrUpdating: boolean,\r\n    errorMessage: string,\r\n    isCategoryAlreadyExists: boolean\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass AddUpdateCategory extends React.Component<IAddCategoryProps, IAddCategoryState> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n\r\n        let categoryDetails: ICategory;\r\n\r\n        if (this.props.category) {\r\n            categoryDetails = { ...this.props.category };\r\n        }\r\n        else {\r\n            categoryDetails = {\r\n                categoryId: \"\",\r\n                name: \"\",\r\n                description: \"\",\r\n                isSelected: false,\r\n                isInUse: false,\r\n            };\r\n        }\r\n\r\n        this.state = {\r\n            category: categoryDetails,\r\n            isCreatingOrUpdating: false,\r\n            errorMessage: \"\",\r\n            isCategoryAlreadyExists: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IAddCategoryProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n                if (this.props.category) {\r\n                    this.setState({ category: { ...this.props.category } });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The HTTP POST call to add a new category in storage */\r\n    createOrUpdateCategoryAsync = async () => {\r\n        this.setState({ isCreatingOrUpdating: true, errorMessage: \"\" });\r\n\r\n        let isCategoryAlreadyExists: boolean = false;\r\n\r\n        // Checking whether category name already exists-\r\n        // - creating a new category\r\n        // - updating a category after category name changed\r\n        if (!this.props.category || (this.props.category.name !== this.state.category.name.trim())) {\r\n            isCategoryAlreadyExists = await this.checkCategoryExists();\r\n\r\n            if (isCategoryAlreadyExists) {\r\n                this.setState({ isCategoryAlreadyExists: true, isCreatingOrUpdating: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        let response;\r\n\r\n        if (this.props.category) {\r\n            response = await updateCategoryAsync(this.teamId, this.state.category);\r\n\r\n            if (response.status == ResponseStatus.OK) {\r\n                if (response.data == true) {\r\n                    this.props.onCategoryAddedOrUpdated(this.localize(\"categoryUpdateSuccess\"));\r\n                }\r\n                else {\r\n                    this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"failedToUpdateCategory\") });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n            }\r\n        }\r\n        else {\r\n            response = await createCategoryAsync(this.teamId, this.state.category);\r\n\r\n            if (response.status == ResponseStatus.OK && response.data === true) {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: \"\" });\r\n                this.props.onCategoryAddedOrUpdated(this.localize(\"categoryAddedSuccess\"));\r\n            }\r\n            else {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Checks whether a category with the same name already exists */\r\n    checkCategoryExists = async () => {\r\n        if (this.state.category.name?.length) {\r\n            let result = await getEventCategoriesAsync();\r\n\r\n            if (result && result.status === ResponseStatus.OK && result.data) {\r\n                let categories: Array<ICategory> = result.data;\r\n\r\n                if (!categories || categories.length === 0) {\r\n                    return false;\r\n                }\r\n\r\n                let isCategoryAlreadyExists: boolean = categories.some((category: ICategory) => category.name.toLowerCase() === this.state.category.name.trim().toLowerCase());\r\n\r\n                return isCategoryAlreadyExists;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when category name changes\r\n     * @param event The input event object\r\n     */\r\n    onNameChanged = (event: any) => {\r\n        let category = this.state.category;\r\n        category.name = event.target.value;\r\n\r\n        this.setState({ category, isCategoryAlreadyExists: false });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when category description changes\r\n     * @param event The input event object\r\n     */\r\n    onDescriptionChanged = (event: any) => {\r\n        let category = this.state.category;\r\n        category.description = event.target.value;\r\n\r\n        this.setState({ category });\r\n    }\r\n\r\n    /** Renders the error message related to category name */\r\n    renderCategoryNameError = () => {\r\n        if (this.state.isCategoryAlreadyExists) {\r\n            return (\r\n                <Flex.Item push>\r\n                    <Text error content={this.localize(\"categoryAlreadyExistsError\")} weight=\"semibold\" />\r\n                </Flex.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Flex column gap=\"gap.medium\" data-testid=\"addorupdateform\">\r\n                    <Flex column gap=\"gap.smaller\" >\r\n                        <Flex space=\"between\">\r\n                            <Text content={`${this.localize(\"categoryName\")}*`} weight=\"semibold\" />\r\n                            {this.renderCategoryNameError()}\r\n                        </Flex>\r\n                        <Input\r\n                            fluid\r\n                            required={true}\r\n                            placeholder={this.localize(\"enterNamePlaceholder\")}\r\n                            value={this.state.category.name}\r\n                            maxLength={Constants.categoryNameMaxLength}\r\n                            onChange={this.onNameChanged}\r\n                            data-testid=\"categoryname\"\r\n                        />\r\n                    </Flex>\r\n                    <Flex column gap=\"gap.smaller\">\r\n                        <Text content={`${this.localize(\"description\")}*`} weight=\"semibold\" />\r\n                        <TextArea\r\n                            className=\"add-update-category-description\"\r\n                            fluid\r\n                            placeholder={this.localize(\"categoryDescriptionPlaceholder\", { \"categoryDescriptionMaxLength\": Constants.categoryDescriptionMaxLength })}\r\n                            maxLength={Constants.categoryDescriptionMaxLength}\r\n                            value={this.state.category.description}\r\n                            onChange={this.onDescriptionChanged}\r\n                            data-testid=\"categorydescription\"\r\n                        />\r\n                    </Flex>\r\n                    <ManageCategoriesOperationFooter\r\n                        dir={this.props.dir}\r\n                        backButtonContent={this.localize(\"back\")}\r\n                        submitButtonContent={this.props.category ? this.localize(\"save\") : this.localize(\"addCategory\")}\r\n                        isSubmitButtonDisabled={this.state.category.name.trim() === \"\" || this.state.category.description.trim() === \"\" || this.state.isCreatingOrUpdating || this.state.isCategoryAlreadyExists}\r\n                        isOperationInProgress={this.state.isCreatingOrUpdating}\r\n                        errorMessage={this.state.errorMessage}\r\n                        onBackClicked={this.props.onBackClicked}\r\n                        onSubmit={this.createOrUpdateCategoryAsync}\r\n                    />\r\n                </Flex>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(AddUpdateCategory));","// <copyright file=\"delete-category.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Table, Text, ExclamationCircleIcon } from \"@fluentui/react-northstar\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ManageCategoriesOperationFooter } from \"./manage-categories-operation-footer\";\r\nimport { deleteCategoriesAsync } from \"../../api/manage-categories-api\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface IDeleteCategoryProps extends WithTranslation, IWithContext {\r\n    categories: Array<ICategory>,\r\n    onBackClicked: () => void,\r\n    onCategoryDeleted: (message: string) => void\r\n}\r\n\r\ninterface IDeleteCategoryState {\r\n    isDeleting: boolean,\r\n    errorMessage: string\r\n}\r\n\r\n/** This component manages the Delete category operations */\r\nclass DeleteCategory extends React.Component<IDeleteCategoryProps, IDeleteCategoryState> {\r\n    readonly localize: TFunction = this.props.t;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.teamId = \"\";\r\n\r\n        this.state = {\r\n            isDeleting: false,\r\n            errorMessage: \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IDeleteCategoryProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The HTTP DELETE call to delete selected category/ies */\r\n    deleteCategoryAsync = async () => {\r\n        this.setState({ isDeleting: true, errorMessage: \"\" });\r\n\r\n        let categoryIdsToDelete = this.props.categories.map((category) => {\r\n            return category.categoryId;\r\n        });\r\n\r\n        let response = await deleteCategoriesAsync(this.teamId, categoryIdsToDelete.join(\",\"));\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            if (response.data === true) {\r\n                this.props.onCategoryDeleted(this.localize(\"categoryDeleteSuccess\"));\r\n            }\r\n            else {\r\n                this.setState({ isDeleting: false, errorMessage: this.localize(\"failedToDeleteCategory\") });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isDeleting: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n        }\r\n    }\r\n\r\n    /** Renders the categories that needs to be deleted */\r\n    renderCategories = () => {\r\n        if (this.props.categories && this.props.categories.length > 0) {\r\n            const categoriesTableHeaderItems = {\r\n                key: \"header\",\r\n                items: [\r\n                    { key: \"category-name\", className: \"category-name-column\", content: this.localize(\"categoryName\") },\r\n                    { key: \"category-description\", content: this.localize(\"description\") }\r\n                ]\r\n            };\r\n\r\n            let rows = this.props.categories.map((category: ICategory, index: number) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            className: \"category-select-all-column\",\r\n                            content: category.isInUse ? <ExclamationCircleIcon title={this.localize(\"categoryInUse\")} style={{ paddingLeft: \".42rem\" }} /> : \"\"\r\n                        },\r\n                        {\r\n                            className: \"category-name-column\",\r\n                            content: <Text content={category.name} weight=\"bold\" />,\r\n                            title: category.name,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: category.description,\r\n                            title: category.description,\r\n                            truncateContent: true\r\n                        }\r\n                    ]}\r\n            });\r\n\r\n            return (\r\n                <Table\r\n                    className=\"manage-categories-content categories-table manage-categories-content-background\"\r\n                    header={categoriesTableHeaderItems}\r\n                    rows={rows}\r\n                    data-testid=\"deletecategorytable\"\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Text content={this.localize(\"deleteCategoryConfirmation\")} weight=\"semibold\" />\r\n                {this.renderCategories()}\r\n                <ManageCategoriesOperationFooter\r\n                    dir={this.props.dir}\r\n                    backButtonContent={this.localize(\"back\")}\r\n                    submitButtonContent={this.localize(\"delete\")}\r\n                    isSubmitButtonDisabled={this.state.isDeleting}\r\n                    isOperationInProgress={this.state.isDeleting}\r\n                    errorMessage={this.state.errorMessage}\r\n                    onBackClicked={this.props.onBackClicked}\r\n                    onSubmit={this.deleteCategoryAsync}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(DeleteCategory));","// <copyright file=\"manage-categories.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Provider } from '@fluentui/react-northstar';\r\nimport { Fabric } from '@fluentui/react';\r\nimport ListCategories from \"./list-categories\";\r\nimport { CategoryOperations } from \"../../constants/constants\";\r\nimport AddUpdateCategory from './add-update-category';\r\nimport DeleteCategory from './delete-category';\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\nimport \"./manage-categories.css\";\r\n\r\ninterface IManageCategoriesProps extends WithTranslation, IWithContext {\r\n}\r\n\r\ninterface IManageCategoriesState {\r\n    operation: CategoryOperations,\r\n    operationData: Array<ICategory>,\r\n    operationStatusMessage: string\r\n}\r\n\r\n/** The class which manages manage-categories dialog content */\r\nclass ManageCategories extends React.Component<IManageCategoriesProps, IManageCategoriesState > {\r\n    readonly localize: TFunction;\r\n\r\n    /** Constructor which initializes state */\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n\r\n        this.state = {\r\n            operation: CategoryOperations.Unknown,\r\n            operationData: [],\r\n            operationStatusMessage: \"\"\r\n        };\r\n    }\r\n\r\n    /** Sets operation whether it is Add, Edit or Delete. If 'Back' button pressed from any component,\r\n    in that case the operation will be unknown.*/\r\n    setCategoryOperation = (\r\n        operationStatusMessage: string = \"\",\r\n        categoryOperation: CategoryOperations = CategoryOperations.Unknown,\r\n        operationData: Array<ICategory> = []) => {\r\n        this.setState({ operation: categoryOperation, operationData, operationStatusMessage });\r\n    }\r\n\r\n    /** The event handler called when clicked on 'Back' from any category operation */\r\n    onBackClicked = () => {\r\n        this.setCategoryOperation();\r\n    }\r\n\r\n    /**\r\n     * The event handler called when a category operation successfully executed\r\n     * @param message The success message\r\n     */\r\n    onOperationSuccessful = (message: string) => {\r\n        this.setCategoryOperation(message);\r\n    }\r\n\r\n    /**\r\n     * An event handler gets called when clicked on Add, Edit and Delete category\r\n     * @param categoryOperation The category operation performed\r\n     * @param operationData The data that needs to be populated in selected category operation\r\n     */\r\n    onCategoryActionPerformed = (categoryOperation: CategoryOperations, operationData?: Array<ICategory>) => {\r\n        this.setCategoryOperation(\"\", categoryOperation, operationData);\r\n    }\r\n\r\n    /** Renders component based on Add, Edit or Delete */\r\n    renderOperation = () => {\r\n        switch (this.state.operation) {\r\n            case CategoryOperations.Add:\r\n                return <AddUpdateCategory\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryAddedOrUpdated={this.onOperationSuccessful} />;\r\n\r\n            case CategoryOperations.Edit:\r\n                return <AddUpdateCategory\r\n                    category={this.state.operationData?.[0]}\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryAddedOrUpdated={this.onOperationSuccessful} />;\r\n\r\n            case CategoryOperations.Delete:\r\n                return <DeleteCategory\r\n                    categories={this.state.operationData}\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryDeleted={this.onOperationSuccessful} />\r\n\r\n            default:\r\n                return <ListCategories statusMessage={this.state.operationStatusMessage} onActionPerformed={this.onCategoryActionPerformed} />;\r\n        }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container\">\r\n                            {this.renderOperation()}\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            </Fabric>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ManageCategories));","// <copyright file=\"close-cancel-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { getEventAsync } from \"../../api/manage-events-api\";\r\nimport { getUserProfiles } from \"../../api/user-group-api\"\r\nimport { closeEventRegistrationsAsync, cancelEventAsync } from \"../../api/manage-events-api\";\r\nimport EventDetails from \"../event-operation-task-module/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface ICloseCancelEventState {\r\n    isLoading: boolean,\r\n    isOperationInProgress: boolean,\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedBy: string,\r\n    isErrorGettingEventDetails: boolean,\r\n    isFailedToCloseOrCancelEvent: boolean,\r\n    eventOperationType: EventOperationType\r\n}\r\n\r\ninterface ICloseCancelEventProps extends IWithContext, WithTranslation {\r\n}\r\n\r\nclass CloseCancelEvent extends React.Component<ICloseCancelEventProps, ICloseCancelEventState> {\r\n    readonly localize: TFunction;\r\n    isMobileView: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.isMobileView = false;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isOperationInProgress: false,\r\n            eventDetails: undefined,\r\n            eventCreatedBy: \"\",\r\n            isErrorGettingEventDetails: false,\r\n            isFailedToCloseOrCancelEvent: false,\r\n            eventOperationType: EventOperationType.None\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getEventDetailsAsync();\r\n    }\r\n\r\n    /** Gets event details */\r\n    getEventDetailsAsync = async () => {\r\n        let queryParam = new URLSearchParams(window.location.search);\r\n        let operationType = queryParam.get(\"operationType\") ?? \"0\";\r\n        let eventId = queryParam.get(\"eventId\") ?? \"0\";\r\n        let teamId = queryParam.get(\"teamId\") ?? \"0\";\r\n        this.isMobileView = queryParam.get(\"isMobileView\") === \"true\" ? true : false;\r\n\r\n        let response = await getEventAsync(eventId!, teamId!);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let eventDetails: IEvent = response.data;\r\n            let eventOperationType: EventOperationType = EventOperationType.None;\r\n\r\n            if (eventDetails.status === EventStatus.Active && new Date() < moment.utc(eventDetails.endDate).local().toDate()) {\r\n                if (operationType === EventOperationType.CloseRegistration.toString()) {\r\n                    if (!eventDetails.isRegistrationClosed) {\r\n                        eventOperationType = EventOperationType.CloseRegistration;\r\n                    }\r\n                }\r\n                else if (operationType === EventOperationType.CancelEvent.toString()) {\r\n                    eventOperationType = EventOperationType.CancelEvent;\r\n                }\r\n            }\r\n\r\n            this.setState({isLoading: false, eventDetails, eventOperationType }, () => {\r\n                if (this.state.eventDetails) {\r\n                    this.getUserProfileAsync(this.state.eventDetails.createdBy);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, isErrorGettingEventDetails: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    getUserProfileAsync = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            this.setState({ eventCreatedBy: userInfo.displayName });\r\n        }\r\n    }\r\n\r\n    /** Called when click on 'Close Registration' or 'Cancel' event */\r\n    onCloseOrCancelEvent = async () => {\r\n        this.setState({ isFailedToCloseOrCancelEvent: false, isOperationInProgress: true });\r\n\r\n        let response;\r\n        let teamId = this.state.eventDetails ? this.state.eventDetails.teamId : \"0\";\r\n        let eventId = this.state.eventDetails ? this.state.eventDetails.eventId : \"0\";\r\n\r\n\r\n        switch (this.state.eventOperationType) {\r\n            case EventOperationType.CloseRegistration:\r\n                response = await closeEventRegistrationsAsync(teamId, eventId);\r\n                break;\r\n\r\n            case EventOperationType.CancelEvent:\r\n                response = await cancelEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            this.props.microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            this.setState({ isFailedToCloseOrCancelEvent: true, isOperationInProgress: false });\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <EventDetails\r\n                dir={this.props.dir}\r\n                eventDetails={this.state.eventDetails}\r\n                eventCreatedByName={this.state.eventCreatedBy}\r\n                eventOperationType={this.state.eventOperationType}\r\n                isLoadingEventDetails={this.state.isLoading}\r\n                isFailedToGetEventDetails={this.state.isErrorGettingEventDetails}\r\n                isOperationInProgress={this.state.isOperationInProgress}\r\n                isOperationFailed={this.state.isFailedToCloseOrCancelEvent}\r\n                isMobileView={this.isMobileView}\r\n                onPerformOperation={this.onCloseOrCancelEvent}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CloseCancelEvent));","// <copyright file=\"delete-draft.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Flex, Text, Button, Provider } from \"@fluentui/react-northstar\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { deleteDraftEventAsync } from \"../../api/manage-events-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\n\r\n/** Renders component to delete draft event */\r\nconst DeleteDraftEvent: React.FunctionComponent = props => {\r\n    const localize: TFunction = useTranslation().t;\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const eventId = params.get(\"eventId\")!;\r\n    const teamId = params.get(\"teamId\")!;\r\n    let [isUpdatingStatus, setUpdatingEventStatus] = React.useState(false);\r\n    let [errorGettingEventDetails, setEventDetailsError] = React.useState(false);\r\n    let [errorUpdatingEventStatus, setUpdateStatusError] = React.useState(false);\r\n\r\n    /** Delete draft event */\r\n    const deleteDraftEvent = async () => {\r\n        setUpdateStatusError(false);\r\n        setUpdatingEventStatus(true);\r\n\r\n        let response = await deleteDraftEventAsync(teamId!, eventId!);\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            setUpdatingEventStatus(false);\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            setUpdatingEventStatus(false);\r\n            setUpdateStatusError(true);\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (errorGettingEventDetails) {\r\n            return <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n        }\r\n\r\n        return (\r\n            <Provider>\r\n                <Flex>\r\n                    <div className=\"task-module-container close-cancel-event-container\">\r\n                        <div className=\"close-cancel-event\">\r\n                            <Text weight=\"bold\" content={localize(\"deleteConfirmationText\")} />\r\n                        </div>\r\n                        <Flex styles={{ marginRight: \"3.4rem\", marginLeft: \"3.4rem\", margintop: \"2rem\", position:\"absolute\", bottom:\"3.4rem\" }} vAlign=\"center\">\r\n                            {errorUpdatingEventStatus ? <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" /> : null}\r\n                            <Flex.Item push>\r\n                                <Button\r\n                                    primary\r\n                                    loading={isUpdatingStatus}\r\n                                    disabled={isUpdatingStatus}\r\n                                    content={localize(\"delete\")}\r\n                                    onClick={deleteDraftEvent}\r\n                                />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </div>\r\n                </Flex>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default DeleteDraftEvent;","// <copyright file=\"signin.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Text, Button } from \"@fluentui/react-northstar\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport \"../../styles/signin.css\";\r\n\r\nconst SignInPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n    const localize = useTranslation().t;\r\n\r\n    function onSignIn() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.authentication.authenticate({\r\n            url: window.location.origin + \"/signin-simple-start\",\r\n            successCallback: () => {\r\n                console.log(\"Login succeeded!\");\r\n                window.location.href = \"/discover\";\r\n            },\r\n            failureCallback: (reason) => {\r\n                console.log(\"Login failed: \" + reason);\r\n                window.location.href = \"/errorpage\";\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"sign-in-content-container\">\r\n            <div>\r\n            </div>\r\n            <Text\r\n                content={localize('signInMessage')}\r\n                size=\"medium\"\r\n            />\r\n            <div className=\"space\"></div>\r\n            <Button content={localize(\"signInText\")} primary className=\"sign-in-button\" onClick={onSignIn} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignInPage;\r\n","// <copyright file=\"authentication-metadata-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n* Get authentication metadata from API\r\n* @param  {String} windowLocationOriginDomain Application base URL\r\n* @param  {String} login_hint Login hint for SSO\r\n*/\r\nexport const getAuthenticationConsentMetadata = async (windowLocationOriginDomain: string, login_hint: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/authenticationMetadata/consentUrl`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({\r\n        windowLocationOriginDomain: windowLocationOriginDomain,\r\n        loginhint: login_hint\r\n    });\r\n\r\n    return await axios.get(url, config, false);\r\n}","// <copyright file=\"signin-start.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getAuthenticationConsentMetadata } from '../../api/authentication-metadata-api';\r\n\r\nconst SignInSimpleStart: React.FunctionComponent = () => {\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            const windowLocationOriginDomain = window.location.origin.replace(\"https://\", \"\");\r\n            const login_hint = context.upn ? context.upn : \"\";\r\n\r\n            getAuthenticationConsentMetadata(windowLocationOriginDomain, login_hint).then((result: any) => {\r\n                window.location.assign(result.data);\r\n            });\r\n        });\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleStart;","// <copyright file=\"signin-end.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nconst SignInSimpleEnd: React.FunctionComponent = () => {\r\n    // Parse hash parameters into key-value pairs\r\n    function getHashParameters() {\r\n        const hashParams: any = {};\r\n        window.location.hash.substr(1).split(\"&\").forEach(function (item) {\r\n            let s = item.split(\"=\"),\r\n                k = s[0],\r\n                v = s[1] && decodeURIComponent(s[1]);\r\n            hashParams[k] = v;\r\n        });\r\n        return hashParams;\r\n    }\r\n\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n        const hashParams: any = getHashParameters();\r\n        if (hashParams[\"error\"]) {\r\n            // Authentication/authorization failed\r\n            microsoftTeams.authentication.notifyFailure(hashParams[\"error\"]);\r\n        } else if (hashParams[\"id_token\"]) {\r\n            // Success\r\n            microsoftTeams.authentication.notifySuccess();\r\n            window.location.href = \"/\";\r\n        } else {\r\n            // Unexpected condition: hash does not contain error or access_token parameter\r\n            microsoftTeams.authentication.notifyFailure(\"UnexpectedFailure\");\r\n        }\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleEnd;","/*\r\n    <copyright file=\"router.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport ErrorPage from '../components/error-page';\r\nimport \"../i18n\";\r\nimport RegisterRemoveEvent from \"../components/register-remove-event/register-remove-event\";\r\nimport DiscoverEvents from \"../components/discover-events/discover-events\";\r\nimport MyEvents from \"../components/my-events/my-events\";\r\nimport MobileFilter from \"../components/mobile-filter-bar/mobile-filter-bar\";\r\nimport ManageEvents from \"../components/manage-events/manage-events\";\r\nimport CreateEventWrapper from \"../components/create-event/create-event-wrapper\";\r\nimport ManageCategories from \"../components/manage-categories/manage-categories\";\r\nimport CloseOrCancelEvent from \"../components/manage-events/close-cancel-event\";\r\nimport DeleteDraftEvent from \"../components/manage-events/delete-draft\";\r\nimport SignInPage from \"../components/signin/signin\";\r\nimport SignInSimpleStart from \"../components/signin/signin-start\";\r\nimport SignInSimpleEnd from \"../components/signin/signin-end\";\r\n\r\nexport const AppRoute: React.FunctionComponent<{}> = () => {\r\n    return (\r\n        <React.Suspense fallback={<div className=\"container-div\"><div className=\"container-subdiv\"></div></div>}>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/discover-events\" component={DiscoverEvents} />\r\n                    <Route exact path=\"/my-events\" component={MyEvents} />\r\n                    <Route exact path=\"/manage-events\" component={ManageEvents} />\r\n                    <Route exact path=\"/manage-categories\" component={ManageCategories} />\r\n                    <Route exact path=\"/close-or-cancel-event\" component={CloseOrCancelEvent} />\r\n                    <Route exact path=\"/register-remove\" component={RegisterRemoveEvent} />\r\n                    <Route exact path=\"/create-event\" component={CreateEventWrapper} />\r\n                    <Route exact path=\"/delete-draft\" component={DeleteDraftEvent} />\r\n                    <Route exact path=\"/mobile-filter\" component={MobileFilter} />\r\n                    <Route exact path=\"/signin\" component={SignInPage} />\r\n                    <Route exact path=\"/signin-simple-start\" component={SignInSimpleStart} />\r\n                    <Route exact path=\"/signin-simple-end\" component={SignInSimpleEnd} />\r\n                    <Route exact path=\"/error\" component={ErrorPage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </React.Suspense>\r\n    );\r\n};","// <copyright file=\"app.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\nimport * as React from \"react\";\r\nimport { AppRoute } from \"./router/router\";\r\nimport Resources from \"./constants/constants\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Provider, ThemeInput, themes } from \"@fluentui/react-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport \"./styles/style.css\";\r\n\r\nexport interface IAppState {\r\n    theme: string;\r\n}\r\n\r\nexport default class App extends React.Component<{}, IAppState> {\r\n    theme?: string | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.theme = params.get(\"theme\");\r\n        initializeIcons();\r\n\r\n        this.state = {\r\n            theme: this.theme ? this.theme : Resources.default,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.setState({ theme: context.theme! });\r\n        });\r\n        microsoftTeams.registerOnThemeChangeHandler((theme: string) => {\r\n            this.setState({ theme: theme! }, () => {\r\n                this.forceUpdate();\r\n            });\r\n        });\r\n    }\r\n\r\n    setThemeComponent = () => {\r\n        if (this.state.theme === Resources.dark) {\r\n            return this.getAppDOM(themes.teamsDark, \"dark-container\");;\r\n        }\r\n        else if (this.state.theme === Resources.contrast) {\r\n            return this.getAppDOM(themes.teamsHighContrast, \"high-contrast-container\");\r\n        } else {\r\n            return this.getAppDOM(themes.teams, \"default-container\");\r\n        }\r\n    }\r\n\r\n    getAppDOM = (theme: ThemeInput | undefined, className: string) => {\r\n        return (\r\n            <Provider theme={theme}>\r\n                <div className={className}>\r\n                    <div className=\"appContainer\">\r\n                        <AppRoute />\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Renders the component\r\n    */\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {this.setThemeComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    <copyright file=\"index.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport App from \"./app\";\r\n\r\nReactDOM.render(\r\n\t    <Router>\r\n\t\t    <App />\r\n        </Router>, document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}